# SOME DESCRIPTIVE TITLE.
# Copyright (C) 2020, The Idris Community
# This file is distributed under the same license as the Idris2 package.
# FIRST AUTHOR <EMAIL@ADDRESS>, YEAR.
#
#, fuzzy
msgid ""
msgstr ""
"Project-Id-Version: Idris2 0.0\n"
"Report-Msgid-Bugs-To: \n"
"POT-Creation-Date: 2022-07-23 12:38+0800\n"
"PO-Revision-Date: YEAR-MO-DA HO:MI+ZONE\n"
"Last-Translator: FULL NAME <EMAIL@ADDRESS>\n"
"Language-Team: LANGUAGE <LL@li.org>\n"
"MIME-Version: 1.0\n"
"Content-Type: text/plain; charset=UTF-8\n"
"Content-Transfer-Encoding: 8bit\n"

#: ../source/tutorial/packages.rst:5
#: d545843afaf84bf7a71812a458937334
msgid "Packages"
msgstr ""

#: ../source/tutorial/packages.rst:7
#: e7d5c73b493048079e27a5da610476c9
msgid "Idris includes a simple build system for building packages and executables from a named package description file. These files can be used with the Idris compiler to manage the development process."
msgstr ""

#: ../source/tutorial/packages.rst:12
#: 4f1af5e852a34aeab70709e84f203054
msgid "Package Descriptions"
msgstr ""

#: ../source/tutorial/packages.rst:14
#: 4522fd7271364cfcad612ec310b51bf5
msgid "A package description includes the following:"
msgstr ""

#: ../source/tutorial/packages.rst:16
#: f87ed061ecfc4623a869b482c189254c
msgid "A header, consisting of the keyword ``package`` followed by a package name. Package names can be any valid Idris identifier. The iPKG format also takes a quoted version that accepts any valid filename."
msgstr ""

#: ../source/tutorial/packages.rst:20
#: 9967ac5d378d48b69c0a3fdd5e7a84a0
msgid "Fields describing package contents, ``<field> = <value>``."
msgstr ""

#: ../source/tutorial/packages.rst:22
#: dd073d2578364fdc94465ac5e3e07c36
msgid "At least one field must be the modules field, where the value is a comma separated list of modules. For example, given an idris package ``maths`` that has modules ``Maths.idr``, ``Maths.NumOps.idr``, ``Maths.BinOps.idr``, and ``Maths.HexOps.idr``, the corresponding package file would be:"
msgstr ""

#: ../source/tutorial/packages.rst:37
#: 31ee190040f1417ca44258d4f30c3062
msgid "Running ``idris2 --init`` will interactively create a new package file in the current directory. The generated package file lists all configurable fields with a brief description."
msgstr ""

#: ../source/tutorial/packages.rst:39
#: cc9b2fe1c65542e0ab23d491d05ed4a1
msgid "Other examples of package files can be found in the ``libs`` directory of the main Idris repository, and in `third-party libraries <https://github.com/idris-lang/Idris-dev/wiki/Libraries>`_."
msgstr ""

#: ../source/tutorial/packages.rst:45
#: 859169d121cd49e7a19f5a82521ece18
msgid "Using Package files"
msgstr ""

#: ../source/tutorial/packages.rst:47
#: eb1de121c52e43cf87dfa0b4dacc5b33
msgid "Idris itself is aware about packages, and special commands are available to help with, for example, building packages, installing packages, and cleaning packages.  For instance, given the ``maths`` package from earlier we can use Idris as follows:"
msgstr ""

#: ../source/tutorial/packages.rst:52
#: 7d58d94092324716a5c7dcda3a134a58
msgid "``idris2 --build maths.ipkg`` will build all modules in the package"
msgstr ""

#: ../source/tutorial/packages.rst:54
#: f23ada6322494a5ebe1bb696d6d822b5
msgid "``idris2 --install maths.ipkg`` will install the package, making it accessible by other Idris libraries and programs."
msgstr ""

#: ../source/tutorial/packages.rst:57
#: 367e5ad22b574c978eb51a86f974821e
msgid "``idris2 --clean maths.ipkg`` will delete all intermediate code and executable files generated when building."
msgstr ""

#: ../source/tutorial/packages.rst:60
#: 0617b32707794e8fb09a808d79e6297e
msgid "Once the maths package has been installed, the command line option ``--package maths`` makes it accessible (abbreviated to ``-p maths``). For example:"
msgstr ""

#: ../source/tutorial/packages.rst:69
#: e6aa2932c6894bde99c64bba5fac643b
msgid "Package Dependencies Using Atom"
msgstr ""

#: ../source/tutorial/packages.rst:71
#: 664cf5b4d6fa46748734c1bcdfe363d5
msgid "If you are using the Atom editor and have a dependency on another package, corresponding to for instance ``import Lightyear`` or ``import Pruviloj``, you need to let Atom know that it should be loaded. The easiest way to accomplish that is with a .ipkg file. The general contents of an ipkg file will be described in the next section of the tutorial, but for now here is a simple recipe for this trivial case:"
msgstr ""

#: ../source/tutorial/packages.rst:78
#: 319d388e1508420fa9aa5a9998933289
msgid "Create a folder myProject."
msgstr ""

#: ../source/tutorial/packages.rst:80
#: 8d196d40387744b3b5ef754893b8920c
msgid "Add a file myProject.ipkg containing just a couple of lines:"
msgstr ""

#: ../source/tutorial/packages.rst:88
#: db2f3a79ba354410b59e20f5989fa286
msgid "In Atom, use the File menu to Open Folder myProject."
msgstr ""
