# SOME DESCRIPTIVE TITLE.
# Copyright (C) 2020, The Idris Community
# This file is distributed under the same license as the Idris2 package.
# FIRST AUTHOR <EMAIL@ADDRESS>, YEAR.
#
#, fuzzy
msgid ""
msgstr ""
"Project-Id-Version: Idris2 0.0\n"
"Report-Msgid-Bugs-To: \n"
"POT-Creation-Date: 2022-07-23 12:38+0800\n"
"PO-Revision-Date: YEAR-MO-DA HO:MI+ZONE\n"
"Last-Translator: FULL NAME <EMAIL@ADDRESS>\n"
"Language-Team: LANGUAGE <LL@li.org>\n"
"MIME-Version: 1.0\n"
"Content-Type: text/plain; charset=UTF-8\n"
"Content-Transfer-Encoding: 8bit\n"

#: ../source/tutorial/introduction.rst:5
#: fb15bf84709b45a49fe8efbda8ba2c3b
msgid "Introduction"
msgstr ""

#: ../source/tutorial/introduction.rst:7
#: aa49775fb1f3472b9cb0ab0c3f8e50f3
msgid "In conventional programming languages, there is a clear distinction between *types* and *values*. For example, in `Haskell <https://www.haskell.org>`_, the following are types, representing integers, characters, lists of characters, and lists of any value respectively:"
msgstr ""

#: ../source/tutorial/introduction.rst:13
#: f0c8880b18cf4913a50645efd3d71b9d
msgid "``Int``, ``Char``, ``[Char]``, ``[a]``"
msgstr ""

#: ../source/tutorial/introduction.rst:15
#: 9c41839a62b24c40bc6abcf644abc3ca
msgid "Correspondingly, the following values are examples of inhabitants of those types:"
msgstr ""

#: ../source/tutorial/introduction.rst:18
#: a82e09c7add04ed38663bb3ca5f52603
msgid "``42``, ``’a’``, ``\"Hello world!\"``, ``[2,3,4,5,6]``"
msgstr ""

#: ../source/tutorial/introduction.rst:20
#: c21844e9a7024313b303aad339af8837
msgid "In a language with *dependent types*, however, the distinction is less clear. Dependent types allow types to “depend” on values — in other words, types are a *first class* language construct and can be manipulated like any other value. The standard example is the type of lists of a given length [#fn1]_, ``Vect n a``, where ``a`` is the element type and ``n`` is the length of the list and can be an arbitrary term."
msgstr ""

#: ../source/tutorial/introduction.rst:27
#: 7b16ce9577354e44902166f979241cb3
msgid "When types can contain values, and where those values describe properties, for example the length of a list, the type of a function can begin to describe its own properties. Take for example the concatenation of two lists. This operation has the property that the resulting list's length is the sum of the lengths of the two input lists. We can therefore give the following type to the ``app`` function, which concatenates vectors:"
msgstr ""

#: ../source/tutorial/introduction.rst:39
#: d6fd51a898dc4a41815e981eac21f16c
msgid "This tutorial introduces Idris, a general purpose functional programming language with dependent types. The goal of the Idris project is to build a dependently typed language suitable for verifiable general purpose programming. To this end, Idris is a compiled language which aims to generate efficient executable code. It also has a lightweight foreign function interface which allows easy interaction with external libraries."
msgstr ""

#: ../source/tutorial/introduction.rst:48
#: 23280ec126164d6795466ff29645941e
msgid "Intended Audience"
msgstr ""

#: ../source/tutorial/introduction.rst:50
#: fbfc980bf67c4328b434ac65cddab206
msgid "This tutorial is intended as a brief introduction to the language, and is aimed at readers already familiar with a functional language such as `Haskell <https://www.haskell.org>`_ or `OCaml <https://ocaml.org>`_. In particular, a certain amount of familiarity with Haskell syntax is assumed, although most concepts will at least be explained briefly. The reader is also assumed to have some interest in using dependent types for writing and verifying software."
msgstr ""

#: ../source/tutorial/introduction.rst:58
#: 3bf290a5a2894f19ba24aaf731d437cf
msgid "For a more in-depth introduction to Idris, which proceeds at a much slower pace, covering interactive program development, with many more examples, see `Type-Driven Development with Idris <https://www.manning.com/books/type-driven-development-with-idris>`_ by Edwin Brady, available from `Manning <https://www.manning.com>`_."
msgstr ""

#: ../source/tutorial/introduction.rst:64
#: 12a595cbc0ba4c7cb8c91bad3b624992
msgid "Example Code"
msgstr ""

#: ../source/tutorial/introduction.rst:66
#: 40809c2122de447386007d6dcfec937f
msgid "This tutorial includes some example code, which has been tested against Idris 2. These files are available with the Idris 2 distribution, so that you can try them out easily. They can be found under ``samples``. It is, however, strongly recommended that you type them in yourself, rather than simply loading and reading them."
msgstr ""

#: ../source/tutorial/introduction.rst:73
#: ae57904aeafd4a3985109b9dd2bb20f5
msgid "Footnotes"
msgstr ""

#: ../source/tutorial/introduction.rst:74
#: e85ea13dea46473fb7820e9494424485
msgid "Typically, and perhaps confusingly, referred to in the dependently typed programming literature as \"vectors\"."
msgstr ""
