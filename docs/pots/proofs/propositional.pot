# SOME DESCRIPTIVE TITLE.
# Copyright (C) 2020, The Idris Community
# This file is distributed under the same license as the Idris2 package.
# FIRST AUTHOR <EMAIL@ADDRESS>, YEAR.
#
#, fuzzy
msgid ""
msgstr ""
"Project-Id-Version: Idris2 0.0\n"
"Report-Msgid-Bugs-To: \n"
"POT-Creation-Date: 2022-07-23 12:38+0800\n"
"PO-Revision-Date: YEAR-MO-DA HO:MI+ZONE\n"
"Last-Translator: FULL NAME <EMAIL@ADDRESS>\n"
"Language-Team: LANGUAGE <LL@li.org>\n"
"MIME-Version: 1.0\n"
"Content-Type: text/plain; charset=UTF-8\n"
"Content-Transfer-Encoding: 8bit\n"

#: ../source/proofs/propositional.rst:1
#: bb48761903cc4c5a82e8bddd3dfcc74b
msgid "This page attempts to explain some of the techniques used in Idris to prove propositional equalities."
msgstr ""

#: ../source/proofs/propositional.rst:5
#: 03b527731d9a45719534d5dfcb987664
msgid "Proving Propositional Equality"
msgstr ""

#: ../source/proofs/propositional.rst:7
#: a0395a075ad74fcebbc5eb6e4fc2aa9c
msgid "We have seen that definitional equalities can be proved using ``Refl`` since they always normalise to values that can be compared directly."
msgstr ""

#: ../source/proofs/propositional.rst:10
#: 6f3dc1827cc24d6eafee5b350ea5ccde
msgid "However with propositional equalities we are using symbolic variables, which do not always normalise."
msgstr ""

#: ../source/proofs/propositional.rst:13
#: f2872fbfdf324a47b3bc0b39ebb5fcfe
msgid "So to take the previous example:"
msgstr ""

#: ../source/proofs/propositional.rst:19
#: 95697c96eb16427c8d12e794db185044
msgid "In this case ``plus n Z`` does not normalise to n. Even though both sides of the equality are provably equal we cannot claim ``Refl`` as a proof."
msgstr ""

#: ../source/proofs/propositional.rst:22
#: 155785563cdf4393841a8779cc64eae3
msgid "If the pattern match cannot match for all ``n`` then we need to match all possible values of ``n``. In this case"
msgstr ""

#: ../source/proofs/propositional.rst:33
#: 1a9210e411c8418785f9cf15d7cf4f63
msgid "we can't use ``Refl`` to prove ``plus n 0 = n`` for all ``n``. Instead, we call it for each case separately.  So, in the second line for example, the type checker substitutes ``Z`` for ``n`` in the type being matched, and reduces the type accordingly."
msgstr ""

#: ../source/proofs/propositional.rst:39
#: d7b99c393459430186969c3dae842ff6
msgid "Replace"
msgstr ""

#: ../source/proofs/propositional.rst:41
#: 94bd201e7d834825b947a18eb77eb5de
msgid "This implements the 'indiscernability of identicals' principle, if two terms are equal then they have the same properties. In other words, if ``x=y``, then we can substitute y for x in any expression. In our proofs we can express this as:"
msgstr ""

#: ../source/proofs/propositional.rst:45
#: 1701fc2b43414795aca976560b1fe84d
msgid "if x=y then prop x = prop y"
msgstr ""

#: ../source/proofs/propositional.rst:48
#: a01f805ad1fe4b7d86fd2540ce5cf500
msgid "where prop is a pure function representing the property. In the examples below prop is an expression in some variable with a type like this: ``prop: n -> Type``"
msgstr ""

#: ../source/proofs/propositional.rst:51
#: fca8727a95d949158da7a37b5a238b3e
msgid "So if ``n`` is a natural number variable then ``prop`` could be something like ``\\n => 2*n + 3``."
msgstr ""

#: ../source/proofs/propositional.rst:54
#: 167462bf1a7748309e6ce063f7d26064
msgid "To use this in our proofs there is the following function in the prelude:"
msgstr ""

#: ../source/proofs/propositional.rst:62
#: 87b67f43c5f347fea50e20d3bfcf34eb
msgid "If we supply an equality (x=y) and a proof of a property of x (``prop x``) then we get a proof of a property of y (``prop y``). So, in the following example, if we supply ``p1 x`` which is a proof that ``x=2`` and the equality ``x=y`` then we get a proof that ``y=2``."
msgstr ""

#: ../source/proofs/propositional.rst:76
#: 00e8f14a31444620a0ac71c5b1a3468d
msgid "Rewrite"
msgstr ""

#: ../source/proofs/propositional.rst:78
#: 9a106445eb98431089dd1ad71fcf81fc
msgid "In practice, ``replace`` can be a little tricky to use because in general the implicit argument ``prop`` can be hard to infer for the machine, so Idris provides a high level syntax which calculates the property and applies ``replace``."
msgstr ""

#: ../source/proofs/propositional.rst:83
#: a9b942610c054055ba63831003d4beef
msgid "Example: again we supply ``p1 x`` which is a proof that ``x=2`` and the equality ``y=x`` then we get a proof that ``y=2``."
msgstr ""

#: ../source/proofs/propositional.rst:94
#: d067dae119e64d85b11a99be29fa1958
msgid "We can think of ``rewrite`` as working in this way:"
msgstr ""

#: ../source/proofs/propositional.rst:96
#: 45286f13dddb4480944725171eb35e39
msgid "Start with a equation ``x=y`` and a property ``prop : x -> Type``"
msgstr ""

#: ../source/proofs/propositional.rst:97
#: 1f02dabab293484799c793210f127ec6
msgid "Search for ``x`` in ``prop``"
msgstr ""

#: ../source/proofs/propositional.rst:98
#: a3ae435e18e4467cbaedb3999f6f1dd0
msgid "Replaces all occurrences of ``x`` with ``y`` in ``prop``."
msgstr ""

#: ../source/proofs/propositional.rst:100
#: 231f36c3c31442b3b31e3ce6d4d66511
msgid "That is, we are doing a substitution."
msgstr ""

#: ../source/proofs/propositional.rst:102
#: 7086db82b52842a3967d7a297adde07f
msgid "Notice that here we need to supply reverse equality, i.e. ``y=x`` instead of ``x=y``. This is because ``rewrite`` performs the substitution of left part of equality to the right part and this substitution is done in the *return type*. Thus, here in the return type ``y=2`` we need to apply ``y=x`` in order to match the type of the argument ``x=2``."
msgstr ""

#: ../source/proofs/propositional.rst:108
#: 7ab37f801e7248949810a8f7dabdbff7
msgid "Symmetry and Transitivity"
msgstr ""

#: ../source/proofs/propositional.rst:110
#: 70777c1860b34ffcb0d5ecf8f59127c5
msgid "In addition to 'reflexivity' equality also obeys 'symmetry' and 'transitivity' and these are also included in the prelude:"
msgstr ""

#: ../source/proofs/propositional.rst:124
#: 82214f3a459247b98df7665af9372ced
msgid "Heterogeneous Equality"
msgstr ""

#: ../source/proofs/propositional.rst:126
#: e69faf21785e47fc9d5fe9d8407f6dea
msgid "Also included in the prelude:"
msgstr ""
