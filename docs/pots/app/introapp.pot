# SOME DESCRIPTIVE TITLE.
# Copyright (C) 2020, The Idris Community
# This file is distributed under the same license as the Idris2 package.
# FIRST AUTHOR <EMAIL@ADDRESS>, YEAR.
#
#, fuzzy
msgid ""
msgstr ""
"Project-Id-Version: Idris2 0.0\n"
"Report-Msgid-Bugs-To: \n"
"POT-Creation-Date: 2022-07-23 12:38+0800\n"
"PO-Revision-Date: YEAR-MO-DA HO:MI+ZONE\n"
"Last-Translator: FULL NAME <EMAIL@ADDRESS>\n"
"Language-Team: LANGUAGE <LL@li.org>\n"
"MIME-Version: 1.0\n"
"Content-Type: text/plain; charset=UTF-8\n"
"Content-Transfer-Encoding: 8bit\n"

#: ../source/app/introapp.rst:2
#: 9456dfc0f3a94a2e8f3a3279d8c2be4b
msgid "Introducing App"
msgstr ""

#: ../source/app/introapp.rst:4
#: 6a56811defd14f229f08a92e7d48a327
msgid "``App`` is declared as below, in a module ``Control.App``, which is part of the ``base`` libraries. It is parameterised by an implicit ``Path`` (which states whether the program's execution path is linear or might throw exceptions), which has a ``default`` value that the program might throw, and a ``List Error`` (which gives a list of exception types which can be thrown, ``Error`` is a synonym for ``Type``):"
msgstr ""

#: ../source/app/introapp.rst:19
#: 5768d1bdf1434112b26e95e670b96c71
msgid "It serves the same purpose as ``IO``, but supports throwing and catching exceptions, and allows us to define more constrained interfaces parameterised by the list of errors ``es``. e.g. a program which supports console IO:"
msgstr ""

#: ../source/app/introapp.rst:29
#: 34f85ec7789c49fd86ab3fb6738da94f
msgid "We can use this in a complete program as follows:"
msgstr ""

#: ../source/app/introapp.rst:44
#: 6f791a0d669f4e15b28cd8b62f6934c1
msgid "Or, a program which supports console IO and carries an ``Int`` state, labelled ``Counter``:"
msgstr ""

#: ../source/app/introapp.rst:58
#: d1b4236954e546f2a5d068a8554ff488
msgid "To run this as part of a complete program, we need to initialise the state."
msgstr ""

#: ../source/app/introapp.rst:65
#: e6fae569ce074b53b5ea29160fde07d2
msgid "For convenience, we can list multiple interfaces in one go, using a function ``Has``, defined in ``Control.App``, to compute the interface constraints:"
msgstr ""

#: ../source/app/introapp.rst:76
#: cdaad91421ee4c8c8fc3db2663346deb
msgid "The purpose of ``Path`` is to state whether a program can throw exceptions, so that we can know where it is safe to reference linear resources. It is declared as follows:"
msgstr ""

#: ../source/app/introapp.rst:84
#: 516b8b7b670145efb9439066120b8ea1
msgid "The type of ``App`` states that ``MayThrow`` is the default. We expect this to be the most common case. After all, realistically, most operations have possible failure modes, especially those which interact with the outside world."
msgstr ""

#: ../source/app/introapp.rst:89
#: 61ea1b5567594467aea4661a8fa4c730
msgid "The ``0`` on the declaration of ``Has`` indicates that it can only be run in an erased context, so it will never be run at run-time. To run an ``App`` inside ``IO``, we use an initial list of errors ``Init`` (recall that an ``Error`` is a synonym for ``Type``):"
msgstr ""

#: ../source/app/introapp.rst:102
#: 98003c8c6987481eb49d3568baff1394
msgid "Generalising the ``Path`` parameter with ``l`` means that we can invoke ``run`` for any application, whether the ``Path`` is ``NoThrow`` or ``MayThrow``. But, in practice, all applications given to ``run`` will not throw at the top level, because the only exception type available is the type ``AppHasIO``. Any exceptions will have been introduced and handled inside the ``App``."
msgstr ""
