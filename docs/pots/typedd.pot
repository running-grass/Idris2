# SOME DESCRIPTIVE TITLE.
# Copyright (C) 2020, The Idris Community
# This file is distributed under the same license as the Idris2 package.
# FIRST AUTHOR <EMAIL@ADDRESS>, YEAR.
#
#, fuzzy
msgid ""
msgstr ""
"Project-Id-Version: Idris2 0.0\n"
"Report-Msgid-Bugs-To: \n"
"POT-Creation-Date: 2022-08-28 21:56+0800\n"
"PO-Revision-Date: YEAR-MO-DA HO:MI+ZONE\n"
"Last-Translator: FULL NAME <EMAIL@ADDRESS>\n"
"Language-Team: LANGUAGE <LL@li.org>\n"
"MIME-Version: 1.0\n"
"Content-Type: text/plain; charset=UTF-8\n"
"Content-Transfer-Encoding: 8bit\n"

#: ../source/typedd/typedd.rst:4
#: 2996835656ec4f86a9e40ea64a9f206a
msgid "Type Driven Development with Idris: Updates Required"
msgstr ""

#: ../source/typedd/typedd.rst:6
#: bfeab939815a428d9d00cf90c1a727ec
msgid "The code in the book `Type-Driven Development with Idris <https://www.manning.com/books/type-driven-development-with-idris>`_ by Edwin Brady, available from `Manning <https://www.manning.com>`_,  will mostly work in Idris 2, with some small changes as detailed in this document. The updated code is also [going to be] part of the test suite (see `tests/typedd-book <https://github.com/edwinb/Idris2/tree/master/tests/typedd-book>`_ in the Idris 2 source)."
msgstr ""

#: ../source/typedd/typedd.rst:14
#: 4144a7971fe84cf88a1ea53845428611
msgid "If you are new to Idris, and learning from the book, we recommend working through the first 3-4 chapters with Idris 1, to avoid the need to worry about the changes described here. After that, refer to this document for any necessary changes."
msgstr ""

#: ../source/typedd/typedd.rst:20
#: 457baeb057e040f78870883a00b22a52
msgid "Chapter 1"
msgstr ""

#: ../source/typedd/typedd.rst:22
#: 7f9037abadec47d89ad1aab43b75b0ae
msgid "No changes necessary"
msgstr ""

#: ../source/typedd/typedd.rst:25
#: 989ffc92cece44feac120b6b51b9762c
msgid "Chapter 2"
msgstr ""

#: ../source/typedd/typedd.rst:27
#: 087db020e56a42f694d733a187ca9ba2
msgid "The Prelude is smaller than Idris 1, and many functions have been moved to the base libraries instead. So:"
msgstr ""

#: ../source/typedd/typedd.rst:30
#: ec2930388e7c4d14b8ac50fbd00f7136
msgid "In ``Average.idr``, add:"
msgstr ""

#: ../source/typedd/typedd.rst:37
#: 7ec8ef1b9eed466c90030d4a607c19d0
msgid "In ``AveMain.idr`` and ``Reverse.idr`` add:"
msgstr ""

#: ../source/typedd/typedd.rst:44
#: 5850e21eab534f548968c548bc1a2945
msgid "Chapter 3"
msgstr ""

#: ../source/typedd/typedd.rst:46
#: ca07a17f8a46498987ce96bc346cf769
msgid "Unbound implicits have multiplicity 0, so we can't match on them at run-time. Therefore, in ``Matrix.idr``, we need to change the type of ``createEmpties`` and ``transposeMat`` so that the length of the inner vector is available to match on:"
msgstr ""

#: ../source/typedd/typedd.rst:57
#: 0ac566fbb10f4ac398461848b92ff5fd
msgid "Chapter 4"
msgstr ""

#: ../source/typedd/typedd.rst:59
#: 0848c7a9ad6c42928a260a58d19e2282
msgid "For the reasons described above:"
msgstr ""

#: ../source/typedd/typedd.rst:61
#: d0d9f75b45744a9abfc0f652f72b66aa
msgid "In ``DataStore.idr``, add ``import System.REPL`` and ``import Data.String``"
msgstr ""

#: ../source/typedd/typedd.rst:62
#: e0bea208f388455588c96466a18718a8
msgid "In ``SumInputs.idr``, add ``import System.REPL``"
msgstr ""

#: ../source/typedd/typedd.rst:63
#: 4007860c8dd94e9e80f34bc2aa1211e2
msgid "In ``TryIndex.idr``, add an implicit argument:"
msgstr ""

#: ../source/typedd/typedd.rst:69
#: 851dd611fe794b9e962fe2707afd9ccb
msgid "In exercise 5 of 4.2, add an implicit argument:"
msgstr ""

#: ../source/typedd/typedd.rst:76
#: 4134a5677aed47959571cd1d55f6852e
msgid "Chapter 5"
msgstr ""

#: ../source/typedd/typedd.rst:78
#: aa1530c8c3da4121b4df425bdc37f495
msgid "There is no longer a ``Cast`` instance from ``String`` to ``Nat``, because its behaviour of returing Z if the ``String`` wasn't numeric was thought to be confusing and potentially error prone. Instead, there is ``stringToNatOrZ`` in ``Data.String`` which at least has a clearer name. So:"
msgstr ""

#: ../source/typedd/typedd.rst:83
#: 1a16afdb092949e7925c53ef7bd58162
msgid "In ``Loops.idr`` and ``ReadNum.idr`` add ``import Data.String`` and change ``cast`` to ``stringToNatOrZ``"
msgstr ""

#: ../source/typedd/typedd.rst:86
#: 058e49a9650c4c748ebf3fb4d0aff536
msgid "In ``ReadNum.idr``, since functions must now be ``covering`` by default, add a ``partial`` annotation to ``readNumber_v2``."
msgstr ""

#: ../source/typedd/typedd.rst:90
#: 8b7ca7e23b834a33bbadcafa65daf40a
msgid "Chapter 6"
msgstr ""

#: ../source/typedd/typedd.rst:92
#: 79c342b0c30a4382a72abd015a35483f
msgid "In ``DataStore.idr`` and ``DataStoreHoles.idr``, add ``import Data.String`` and ``import System.REPL``. Also in ``DataStore.idr``, the ``schema`` argument to ``display`` is required for matching, so change the type to:"
msgstr ""

#: ../source/typedd/typedd.rst:100
#: 9aaf84bfe64c424cb21378d56f1b5de4
msgid "In ``TypeFuns.idr`` add ``import Data.String``"
msgstr ""

#: ../source/typedd/typedd.rst:103
#: 5b7cd36ffed5474a8758ded00e8da0ed
msgid "Chapter 7"
msgstr ""

#: ../source/typedd/typedd.rst:105
#: 1e3129a911cb47168a5b9559639214fa
msgid "``Abs`` is now a separate interface from ``Neg``. So, change the type of ``eval`` to include ``Abs`` specifically:"
msgstr ""

#: ../source/typedd/typedd.rst:112
#: 00fd7cae5b9f4720b92fdc52e59a90ae
msgid "Also, take ``abs`` out of the ``Neg`` implementation for ``Expr`` and add an implementation of ``Abs`` as follows:"
msgstr ""

#: ../source/typedd/typedd.rst:121
#: 4a302631ef3f49de994f49fe301816e6
msgid "Chapter 8"
msgstr ""

#: ../source/typedd/typedd.rst:123
#: 534645fbe78f4e1590fa4fba5d5c4d65
msgid "In ``AppendVec.idr``, add ``import Data.Nat`` for the ``Nat`` proofs"
msgstr ""

#: ../source/typedd/typedd.rst:125
#: 2f85672b1b6d42ad9b61abb8f787f54a
msgid "``cong`` now takes an explicit argument for the function to apply. So, in ``CheckEqMaybe.idr`` change the last case to:"
msgstr ""

#: ../source/typedd/typedd.rst:134
#: efdad2c6396f466983dc99fb236f5073
msgid "A similar change is necessary in ``CheckEqDec.idr``."
msgstr ""

#: ../source/typedd/typedd.rst:136
#: 0f557bb033d94b0cb92626d878f8eeed
msgid "In ``ExactLength.idr``, the ``m`` argument to ``exactLength`` is needed at run time, so change its type to:"
msgstr ""

#: ../source/typedd/typedd.rst:144
#: 0d494476d96d4f18b39a122161f01571
msgid "A similar change is necessary in ``ExactLengthDec.idr``. Also, ``DecEq`` is no longer part of the prelude, so add ``import Decidable.Equality``."
msgstr ""

#: ../source/typedd/typedd.rst:147
#: f4cb528365b64e10a736845fab6ca3cd
msgid "In ``ReverseVec.idr``, add ``import Data.Nat`` for the ``Nat`` proofs."
msgstr ""

#: ../source/typedd/typedd.rst:149
#: 72c632168df24769a1e69559d56741f2
msgid "In ``Void.idr``, since functions must now be ``covering`` by default, add a ``partial`` annotation to ``nohead`` and its helper function ``getHead``."
msgstr ""

#: ../source/typedd/typedd.rst:152
#: c0f80e2c378b4d9a8b2817590e3d737d
msgid "In Exercise 2 of 8.2.5, the definition of ``reverse'`` should be changed to ``reverse' : Vect k a -> Vect m a -> Vect (k + m) a``, because the ``n`` in ``reverse'`` is otherwise bound to the same value as the ``n`` in the signature of ``myReverse``."
msgstr ""

#: ../source/typedd/typedd.rst:157
#: 766b4209bead42679fbe283801eea2ae
msgid "Chapter 9"
msgstr ""

#: ../source/typedd/typedd.rst:159
#: be2165ea64384ce58118fb5dc697657f
msgid "In ``ElemType.idr``, add ``import Decidable.Equality``"
msgstr ""

#: ../source/typedd/typedd.rst:161
#: d507925a5e604e268df2bd5a8bc1ec69
msgid "In ``Elem.idr``, add ``import Data.Vect.Elem``"
msgstr ""

#: ../source/typedd/typedd.rst:163
#: fda1e2a1499c499e8337becc6fe76131
msgid "In ``Hangman.idr``:"
msgstr ""

#: ../source/typedd/typedd.rst:165
#: 040668d5b5bc4f98baedc52e81855903
msgid "Add ``import Data.String``, ``import Data.Vect.Elem`` and ``import Decidable.Equality``"
msgstr ""

#: ../source/typedd/typedd.rst:166
#: ../source/typedd/typedd.rst:518
#: 40538cf1664140428f4feff85b6fcb04
#: 061be160f9a3431eb9a74bce7748ec60
msgid "``removeElem`` pattern matches on ``n``, so it needs to be written in its type:"
msgstr ""

#: ../source/typedd/typedd.rst:176
#: 4fc28a146ab4487cbc0b5ef55f85dadc
msgid "``letters`` is used by ``processGuess``, because it's passed to ``removeElem``:"
msgstr ""

#: ../source/typedd/typedd.rst:185
#: ce6cbe9b79244f31a92b7320117a2c29
msgid "``guesses`` and ``letters`` are implicit arguments to ``game``, but are used by the definition, so add them to its type:"
msgstr ""

#: ../source/typedd/typedd.rst:193
#: 96b997ac5104475a8f5dc790114c1da3
msgid "In ``RemoveElem.idr``"
msgstr ""

#: ../source/typedd/typedd.rst:195
#: 798a370d31144a5387b83efd62391ec5
msgid "Add ``import Data.Vect.Elem``"
msgstr ""

#: ../source/typedd/typedd.rst:196
#: ea9f0f75cac644538569ff91aa64356c
msgid "``removeElem`` needs to be updated as above."
msgstr ""

#: ../source/typedd/typedd.rst:199
#: ac3763b23cd34af78c812c16f2aac9ce
msgid "Chapter 10"
msgstr ""

#: ../source/typedd/typedd.rst:201
#: de787d9f72114c5091526ab0696d2bc7
msgid "Lots of changes necessary here, at least when constructing views, due to Idris 2 having a better (that is, more precise and correct!) implementation of unification, and the rules for recursive ``with`` application being tightened up."
msgstr ""

#: ../source/typedd/typedd.rst:205
#: 3b7a011a02ec4b46b6d7b73d4243060c
msgid "In ``MergeSort.idr``, add ``import Data.List``"
msgstr ""

#: ../source/typedd/typedd.rst:207
#: e682229dc19341f7a5dbac85deb7783a
msgid "In ``MergeSortView.idr``, add ``import Data.List``, and make the arguments to the views explicit:"
msgstr ""

#: ../source/typedd/typedd.rst:220
#: aef31dba5ce94f6bb4569bf9a4263d17
msgid "In the problem 1 of exercise 10-1, the ``rest`` argument of the data constructor ``Exact`` of ``TakeN`` must be made explicit."
msgstr ""

#: ../source/typedd/typedd.rst:229
#: df27d7cdf32e45309273a36bd4970c6d
msgid "In ``SnocList.idr``, in ``my_reverse``, the link between ``Snoc rec`` and ``xs ++ [x]`` needs to be made explicit. Idris 1 would happily decide that ``xs`` and ``x`` were the relevant implicit arguments to ``Snoc`` but this was little more than a guess based on what would make it type check, whereas Idris 2 is more precise in what it allows to unify. So, ``x`` and ``xs`` need to be explicit arguments to ``Snoc``:"
msgstr ""

#: ../source/typedd/typedd.rst:242
#: faff9437c18249bea3037c599b7d2a8d
msgid "Correspondingly, they need to be explicit when matching. For example:"
msgstr ""

#: ../source/typedd/typedd.rst:251
#: 9a26ece4493c4bbc8cd9098f2f08b88a
msgid "Similar changes are necessary in ``snocListHelp`` and ``my_reverse_help``. See tests/typedd-book/chapter10/SnocList.idr for the full details."
msgstr ""

#: ../source/typedd/typedd.rst:254
#: 586c0af6fa094e1ca736b84ab4d082db
msgid "Also, in ``snocListHelp``, ``input`` is used at run time so needs to be bound in the type:"
msgstr ""

#: ../source/typedd/typedd.rst:262
#: bfa6fac91575452ea6c3a5dc42eddda0
msgid "It's no longer necessary to give ``{input}`` explicitly in the patterns for ``snocListHelp``, although it's harmless to do so."
msgstr ""

#: ../source/typedd/typedd.rst:265
#: 036da150c7af40d3bebbff2b5181fcc3
msgid "In ``IsSuffix.idr``, the matching has to be written slightly differently. The recursive with application in Idris 1 probably shouldn't have allowed this! Note that the ``Snoc`` - ``Snoc`` case has to be written first otherwise Idris generates a case tree splitting on ``input1`` and ``input2`` instead of the ``SnocList`` objects and this leads to a lot of cases being detected as missing."
msgstr ""

#: ../source/typedd/typedd.rst:280
#: 3a092e2afcdc4905b4aff945bd5144c7
msgid "This doesn't yet get past the totality checker, however, because it doesn't know about looking inside pairs."
msgstr ""

#: ../source/typedd/typedd.rst:283
#: 3ee7a6c1c6da4f939e3d9733fa61739a
msgid "For the ``VList`` view in the exercise 4 after Chapter 10-2 ``import Data.List.Views.Extra`` from ``contrib`` library."
msgstr ""

#: ../source/typedd/typedd.rst:285
#: 7ecee446801f405faa533d6e8d6901e5
msgid "In ``DataStore.idr``: Well this is embarrassing - I've no idea how Idris 1 lets this through! I think perhaps it's too \"helpful\" when solving unification problems. To fix it, add an extra parameter ``schema`` to ``StoreView``, and change the type of ``SNil`` to be explicit that the ``empty`` is the function defined in ``DataStore``. Also add ``entry`` and ``store`` as explicit arguments to ``SAdd``:"
msgstr ""

#: ../source/typedd/typedd.rst:298
#: 17f22d870e6a4c13832e279dba4d3997
msgid "Since ``size`` is as explicit argument in the ``DataStore`` record, it also needs to be relevant in the type of ``storeViewHelp``:"
msgstr ""

#: ../source/typedd/typedd.rst:307
#: 11af3b204d514eaa8aa68fe54924607e
msgid "In ``TestStore.idr``:"
msgstr ""

#: ../source/typedd/typedd.rst:309
#: 26d20bd50494445ea3e6f267d80182ae
msgid "In ``listItems``, ``empty`` needs to be ``DataStore.empty`` to be explicit that you mean the function"
msgstr ""

#: ../source/typedd/typedd.rst:311
#: 2bf4a8269056456daad92d882e1c1e72
msgid "In ``filterKeys``, there is an error in the ``SNil`` case, which wasn't caught because of the type of ``SNil`` above. It should be:"
msgstr ""

#: ../source/typedd/typedd.rst:319
#: 9b5ff2fc7bde4aefbff4bfbf020d4291
msgid "Chapter 11"
msgstr ""

#: ../source/typedd/typedd.rst:321
#: 058e1c4cc35a41b1922aab7caf3042ce
msgid "In ``Streams.idr`` add ``import Data.Stream`` for ``iterate``."
msgstr ""

#: ../source/typedd/typedd.rst:323
#: dd485ac784414f78a93e8d462cb5088f
msgid "In ``Arith.idr`` and ``ArithTotal.idr``, the ``Divides`` view now has explicit arguments for the dividend and remainder, so they need to be explicit in ``bound``:"
msgstr ""

#: ../source/typedd/typedd.rst:333
#: f5f52d3ad06548f8b2c16dc917fd0cb8
msgid "In addition,  ``import Data.Bits`` has to be added for ``shiftR``, which now uses a safer type for the number of shifts:"
msgstr ""

#: ../source/typedd/typedd.rst:343
#: 3198c997053640c5b5c3b25e5099f48e
msgid "In ``ArithCmd.idr``, update ``DivBy``, ``randoms``, and ``import Data.Bits`` as above. Also add ``import Data.String`` for ``String.toLower``."
msgstr ""

#: ../source/typedd/typedd.rst:346
#: b5715c407b61489abfcb7595611f0ef9
msgid "In ``ArithCmd.idr``, update ``DivBy``, ``randoms``, ``import Data.Bits`` and ``import Data.String`` as above.  Also, since export rules are per-namespace now, rather than per-file, you need to export ``(>>=)`` from the namespaces ``CommandDo`` and ``ConsoleDo``."
msgstr ""

#: ../source/typedd/typedd.rst:351
#: 510e6b3073344857bf03f5aa6a968998
msgid "In ``ArithCmdDo.idr``, since ``(>>=)`` is ``export``, ``Command`` and ``ConsoleIO`` also have to be ``export``. Also, update ``randoms`` and ``import Data.Bits`` as above."
msgstr ""

#: ../source/typedd/typedd.rst:354
#: 6d0d19e52ac54cffb2fc7c3cae42cc3a
msgid "In ``StreamFail.idr``, add a ``partial`` annotation to ``labelWith``."
msgstr ""

#: ../source/typedd/typedd.rst:356
#: 360a23737fa54686bbe6c3ddd7bb521d
msgid "In order to support ``do`` notation for custom types (like ``RunIO``), you need to implement ``(>>=)`` for binding values in a ``do`` block and ``(>>)`` for sequencing computations without binding values. See  `tests <https://github.com/idris-lang/Idris2/tree/master/tests/typedd-book/chapter11>`_ for complete implementations."
msgstr ""

#: ../source/typedd/typedd.rst:358
#: da87d26df2ff45ddbdd771631f3c1a61
msgid "For instance, the following do block is desugared to ``foo >>= (\\x => bar >>= (\\y => baz x y))``:"
msgstr ""

#: ../source/typedd/typedd.rst:367
#: 347aba24f7b047839576e04f0009f978
msgid "while the following is converted to ``foo >> bar >> baz``:"
msgstr ""

#: ../source/typedd/typedd.rst:377
#: 0e58fb753da94a26807e906e76c6c948
msgid "Chapter 12"
msgstr ""

#: ../source/typedd/typedd.rst:379
#: e87175192a4b4e03965ca77a8b5fc55c
msgid "For reasons described above: In ``ArithState.idr``, add ``import Data.String`` and ``import Data.Bits`` and update ``randoms``.  Also the ``(>>=)`` operators need to be set as ``export`` since they are in their own namespaces, and in ``getRandom``, ``DivBy`` needs to take additional arguments ``div`` and ``rem``."
msgstr ""

#: ../source/typedd/typedd.rst:385
#: cdd4f05201304135af42918ab99191f4
msgid "In ``ArithState.idr``, since ``(>>=)`` is ``export``, ``Command`` and ``ConsoleIO`` also have to be ``export``."
msgstr ""

#: ../source/typedd/typedd.rst:388
#: 0f8febe7e3c5443cbf87daee25bfd214
msgid "evalState from Control.Monad.State now takes the ``stateType`` argument first."
msgstr ""

#: ../source/typedd/typedd.rst:391
#: 5792d9a65d6f4125ba27f5171429bbed
msgid "Chapter 13"
msgstr ""

#: ../source/typedd/typedd.rst:393
#: dec9cda43da24880931458eac13d6134
msgid "In ``StackIO.idr``:"
msgstr ""

#: ../source/typedd/typedd.rst:395
#: 78f91503bffa49fa8e8265b7f6aec059
msgid "``tryAdd`` pattern matches on ``height``, so it needs to be written in its type:"
msgstr ""

#: ../source/typedd/typedd.rst:402
#: f8936839b21d48e59d04ca339c88925c
msgid "``height`` is also an implicit argument to ``stackCalc``, but is used by the definition, so add it to its type:"
msgstr ""

#: ../source/typedd/typedd.rst:409
#: 865e77e21eed46bbb96a13e08ce5f396
msgid "In ``StackDo`` namespace, export ``(>>=)``:"
msgstr ""

#: ../source/typedd/typedd.rst:419
#: c533f2eb4a6e4cc6883922b36508e5b6
msgid "In ``Vending.idr``:"
msgstr ""

#: ../source/typedd/typedd.rst:421
#: 9105b966d8684f659b7429b0990e3d7e
msgid "Add ``import Data.String`` and change ``cast`` to ``stringToNatOrZ`` in ``strToInput``"
msgstr ""

#: ../source/typedd/typedd.rst:422
#: a135ce289474495da53e72734401dec3
msgid "In ``MachineCmd`` type, add an implicit argument to ``(>>=)`` data constructor:"
msgstr ""

#: ../source/typedd/typedd.rst:431
#: 6d648c7496a1495bb868c18e5a2e3fbe
msgid "In ``MachineIO`` type, add an implicit argument to ``Do`` data constructor:"
msgstr ""

#: ../source/typedd/typedd.rst:440
#: 09ab553fd4bf4cc99197c83e79876621
msgid "``runMachine`` pattern matches on ``inState``, so it needs to be written in its type:"
msgstr ""

#: ../source/typedd/typedd.rst:447
#: 26043bdeff3f4a85a106d5e81cf5b0f7
msgid "In ``MachineDo`` namespace, add an implicit argument to ``(>>=)`` and export it:"
msgstr ""

#: ../source/typedd/typedd.rst:458
#: ca10088c2e9248758be8b0a5185c1670
msgid "``vend`` and ``refill`` pattern match on ``pounds`` and ``chocs``, so they need to be written in their type:"
msgstr ""

#: ../source/typedd/typedd.rst:466
#: 5f6b4e9799394aa7b7cb9d5b587b708f
msgid "``pounds`` and ``chocs`` are implicit arguments to ``machineLoop``, but are used by the definition, so add them to its type:"
msgstr ""

#: ../source/typedd/typedd.rst:474
#: e98dd140a81c4c06aef58b44e55fa454
msgid "Chapter 14"
msgstr ""

#: ../source/typedd/typedd.rst:476
#: 891d586200c74018b3636bd558a087b5
msgid "In ``ATM.idr``:"
msgstr ""

#: ../source/typedd/typedd.rst:478
#: dd1c4d4d342b476086a8417200ccaf59
msgid "Add ``import Data.String`` and change ``cast`` to ``stringToNatOrZ`` in ``runATM``"
msgstr ""

#: ../source/typedd/typedd.rst:480
#: 3b196d0aedc54e7ab52aa85b0cd29f23
msgid "In ``Hangman.idr``, add:"
msgstr ""

#: ../source/typedd/typedd.rst:488
#: 1a5f027e61a747e79e1cda15efa254b5
msgid "In ``Loop`` namespace, export ``GameLoop`` type and its data constructors:"
msgstr ""

#: ../source/typedd/typedd.rst:500
#: 88091151dbad4462b2657232e756dec6
msgid "``letters`` and ``guesses`` are used by ``gameLoop``, so they need to be written in its type:"
msgstr ""

#: ../source/typedd/typedd.rst:507
#: 0b402f301a3a413da166a6cb7f67ad16
msgid "In ``Game`` type, add an implicit argument ``letters`` to ``InProgress`` data constructor:"
msgstr ""

#: ../source/typedd/typedd.rst:528
#: 0d9f4169fd954736909728869c4c8664
msgid "Chapter 15"
msgstr ""

#: ../source/typedd/typedd.rst:530
#: 33d34b4ff8a841faa7b42365a12e8816
msgid "Todo"
msgstr ""

#: ../source/typedd/typedd.rst:532
#: ca58bb9bdc2b4b138f9df4b56ec26043
msgid "This chapter."
msgstr ""
