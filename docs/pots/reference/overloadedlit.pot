# SOME DESCRIPTIVE TITLE.
# Copyright (C) 2020, The Idris Community
# This file is distributed under the same license as the Idris2 package.
# FIRST AUTHOR <EMAIL@ADDRESS>, YEAR.
#
#, fuzzy
msgid ""
msgstr ""
"Project-Id-Version: Idris2 0.0\n"
"Report-Msgid-Bugs-To: \n"
"POT-Creation-Date: 2022-07-23 12:38+0800\n"
"PO-Revision-Date: YEAR-MO-DA HO:MI+ZONE\n"
"Last-Translator: FULL NAME <EMAIL@ADDRESS>\n"
"Language-Team: LANGUAGE <LL@li.org>\n"
"MIME-Version: 1.0\n"
"Content-Type: text/plain; charset=UTF-8\n"
"Content-Transfer-Encoding: 8bit\n"

#: ../source/reference/overloadedlit.rst:2
#: da85ec00a691432eb32f422f8d8b5565
msgid "Overloaded literals"
msgstr ""

#: ../source/reference/overloadedlit.rst:7
#: 9fc2f92f317649b3b58d0fb563170066
msgid "The compiler provides directives for literals overloading, respectively ``%stringLit <fun>`` and ``%integerLit <fun>`` for string and integer literals. During elaboration, the given function is applied to the corresponding literal. In the Prelude these functions are set to ``fromString`` and ``fromInteger``."
msgstr ""

#: ../source/reference/overloadedlit.rst:12
#: dc0555f00beb4b99b117d809d73bcded
msgid "The interface ``FromString ty`` provides the ``fromString : String -> ty`` function, while the ``Num ty`` interface provides the ``fromInteger : Integer -> ty`` function for all numerical types."
msgstr ""

#: ../source/reference/overloadedlit.rst:17
#: 71defaa0f057410d8eb57807d9cab83f
msgid "Restricted overloads"
msgstr ""

#: ../source/reference/overloadedlit.rst:18
#: 5db1a5883e374dbe972434d4e071432f
msgid "Although the overloading of literals can be achieved by implementing the interfaces described above, in principle only a function with the correct signature and name is enough to achieve the desired behaviour. This can be exploited to obtain more restrictive overloading such as converting literals to ``Fin n`` values, where integer literals greater or equal to n are not constructible values for the type. Additional implicit arguments can be added to the function signature, in particular auto implicit arguments for searching proofs. As an example, this is the implementation of ``fromInteger``Â for ``Fin n``."
msgstr ""

#: ../source/reference/overloadedlit.rst:36
#: 6c89c87fe2c8483db5c3139b54b608c7
msgid "The ``prf`` auto implicit is an automatically constructed proof (if possible) that the literal is suitable for the ``Fin n`` type. The restricted behaviour can be observed in the REPL, where the failure to construct a valid proof is caught during the type-checking phase and not at runtime:"
msgstr ""
