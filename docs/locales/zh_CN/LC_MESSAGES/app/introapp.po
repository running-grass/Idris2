# SOME DESCRIPTIVE TITLE.
# Copyright (C) 2020, The Idris Community
# This file is distributed under the same license as the Idris2 package.
# FIRST AUTHOR <EMAIL@ADDRESS>, 2022.
#
msgid ""
msgstr ""
"Project-Id-Version: Idris2 0.0\n"
"Report-Msgid-Bugs-To: 467195537@qq.com\n"
"POT-Creation-Date: 2022-07-12 11:10+0800\n"
"PO-Revision-Date: 2022-07-16 04:57+0000\n"
"Last-Translator: Leo Liu <leo19920823@gmail.com>\n"
"Language-Team: Chinese (Simplified) <https://hosted.weblate.org/projects/"
"idris2/appintroapp/zh_Hans/>\n"
"Language: zh_CN\n"
"MIME-Version: 1.0\n"
"Content-Type: text/plain; charset=utf-8\n"
"Content-Transfer-Encoding: 8bit\n"
"Plural-Forms: nplurals=1; plural=0;\n"
"X-Generator: Weblate 4.14-dev\n"
"Generated-By: Babel 2.10.3\n"

#: ../../source/app/introapp.rst:2 94b2475e694d4f8c91dfa20565303ab6
msgid "Introducing App"
msgstr "APP 介绍"

#: ../../source/app/introapp.rst:4 f3699575ba6549c29747b213c438fdb0
msgid ""
"``App`` is declared as below, in a module ``Control.App``, which is part "
"of the ``base`` libraries. It is parameterised by an implicit ``Path`` "
"(which states whether the program's execution path is linear or might "
"throw exceptions), which has a ``default`` value that the program might "
"throw, and a ``List Error`` (which gives a list of exception types which "
"can be thrown, ``Error`` is a synonym for ``Type``):"
msgstr ""
"``App`` 声明在模块 ``Control.App`` 中，它是 ``base`` 库的一部分。"
"它的参数是一个隐含的 ``Path`` "
"（说明程序的执行路径是线性的还是可能抛出异常），它有一个 ``default`` "
"值，程序可能会抛出一个``List Error``（一个可以抛出的异常类型列表， ``Error`` "
"是 ``Type`` 的同义词）："

#: ../../source/app/introapp.rst:19 f2bc8557d0664de3b52db49a8e8cdf7f
msgid ""
"It serves the same purpose as ``IO``, but supports throwing and catching "
"exceptions, and allows us to define more constrained interfaces "
"parameterised by the list of errors ``es``. e.g. a program which supports"
" console IO:"
msgstr ""
"它的作用与 ``IO`` 相同，但支持抛出和捕获异常，并允许我们定义更多的由错误列表 "
"``es`` 参数化的约束性接口。例如，一个支持控制台IO的程序："

#: ../../source/app/introapp.rst:29 23be7801187242d8b31034967db705ed
msgid "We can use this in a complete program as follows:"
msgstr "我们可以在一个完整的程序中使用它，如下所示："

#: ../../source/app/introapp.rst:44 a888e867d4574d6180e5b035c6f6a543
msgid ""
"Or, a program which supports console IO and carries an ``Int`` state, "
"labelled ``Counter``:"
msgstr "或者，一个支持控制台IO的程序，携带一个 ``Int`` 的状态，标记为 ``Counter`` ："

#: ../../source/app/introapp.rst:58 894a0e65380f4a3f824b057de8cc1173
msgid ""
"To run this as part of a complete program, we need to initialise the "
"state."
msgstr "为了将其作为一个完整程序的一部分来运行，我们需要初始化状态。"

#: ../../source/app/introapp.rst:65 e3bd07b8c43d41118ac0a5317f367fbe
msgid ""
"For convenience, we can list multiple interfaces in one go, using a "
"function ``Has``, defined in ``Control.App``, to compute the interface "
"constraints:"
msgstr "为了方便起见，我们可以一次性列出多个接口，使用 ``Control.App`` 中定义的函数 "
"``Has`` 来计算接口约束："

#: ../../source/app/introapp.rst:76 85ab751d2fb64dcfafc4d14eef3dd6c8
msgid ""
"The purpose of ``Path`` is to state whether a program can throw "
"exceptions, so that we can know where it is safe to reference linear "
"resources. It is declared as follows:"
msgstr "``Path`` 的目的是说明一个程序是否可以抛出异常，这样我们就可以知道在哪里引用线"
"性资源是安全的。它被声明如下："

#: ../../source/app/introapp.rst:84 312a6cd669474e2793ee8f2742043463
msgid ""
"The type of ``App`` states that ``MayThrow`` is the default. We expect "
"this to be the most common case. After all, realistically, most "
"operations have possible failure modes, especially those which interact "
"with the outside world."
msgstr ""
"``App`` 的类型中 ``MayThrow`` 是默认的。我们希望这是最常见的情况。毕竟，现实"
"中，大多数操作都有可能的失败模式，特别是那些与外部世界交互的操作。"

#: ../../source/app/introapp.rst:89 1f6e0e2f3f924010b05817e34dcf2da6
msgid ""
"The ``0`` on the declaration of ``Has`` indicates that it can only be run"
" in an erased context, so it will never be run at run-time. To run an "
"``App`` inside ``IO``, we use an initial list of errors ``Init`` (recall "
"that an ``Error`` is a synonym for ``Type``):"
msgstr ""
"``0`` 在 ``Has`` "
"的声明中表示它只能在一个被擦除的上下文中运行，所以它在运行时永远不会被运行。"
"为了在 ``IO`` 内运行一个 ``App`` ，我们使用一个初始错误列表 ``Init`` （记住 "
"``Error`` 是 ``Type`` 的同义词）："

#: ../../source/app/introapp.rst:102 7a9f40ca8db04f30b4eb78bea2ee990e
msgid ""
"Generalising the ``Path`` parameter with ``l`` means that we can invoke "
"``run`` for any application, whether the ``Path`` is ``NoThrow`` or "
"``MayThrow``. But, in practice, all applications given to ``run`` will "
"not throw at the top level, because the only exception type available is "
"the type ``AppHasIO``. Any exceptions will have been introduced and "
"handled inside the ``App``."
msgstr ""
"将 ``Path`` 参数配合 ``l`` 使用，意味着我们可以为任何应用程序调用 ``run`` ，"
"无论 ``Path`` 是 ``NoThrow`` 还是 ``MayThrow`` 。但是，在实践中，所有给 "
"``run`` 的应用程序都不会在顶层抛出，因为唯一可用的异常类型是 ``AppHasIO`` 。"
"任何异常都会在 ``App`` 里面被引入和处理。"
