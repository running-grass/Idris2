# SOME DESCRIPTIVE TITLE.
# Copyright (C) 2020, The Idris Community
# This file is distributed under the same license as the Idris2 package.
# FIRST AUTHOR <EMAIL@ADDRESS>, 2022.
#
#, fuzzy
msgid ""
msgstr ""
"Project-Id-Version: Idris2 0.0\n"
"Report-Msgid-Bugs-To: \n"
"POT-Creation-Date: 2022-07-12 09:10+0800\n"
"PO-Revision-Date: YEAR-MO-DA HO:MI+ZONE\n"
"Last-Translator: FULL NAME <EMAIL@ADDRESS>\n"
"Language-Team: LANGUAGE <LL@li.org>\n"
"MIME-Version: 1.0\n"
"Content-Type: text/plain; charset=utf-8\n"
"Content-Transfer-Encoding: 8bit\n"
"Generated-By: Babel 2.10.3\n"

#: ../../source/app/introapp.rst:2 ad38466c592841feb08b3273068d0162
msgid "Introducing App"
msgstr ""

#: ../../source/app/introapp.rst:4 c505e753ce0d41818c32103aa2e21e6f
msgid ""
"``App`` is declared as below, in a module ``Control.App``, which is part "
"of the ``base`` libraries. It is parameterised by an implicit ``Path`` "
"(which states whether the program's execution path is linear or might "
"throw exceptions), which has a ``default`` value that the program might "
"throw, and a ``List Error`` (which gives a list of exception types which "
"can be thrown, ``Error`` is a synonym for ``Type``):"
msgstr ""

#: ../../source/app/introapp.rst:19 8303f14220b94f0b9afdbb3011322f96
msgid ""
"It serves the same purpose as ``IO``, but supports throwing and catching "
"exceptions, and allows us to define more constrained interfaces "
"parameterised by the list of errors ``es``. e.g. a program which supports"
" console IO:"
msgstr ""

#: ../../source/app/introapp.rst:29 23da3fa6871743bc950dbbadae95596e
msgid "We can use this in a complete program as follows:"
msgstr ""

#: ../../source/app/introapp.rst:44 00095fdc907742e2a327f349426189b1
msgid ""
"Or, a program which supports console IO and carries an ``Int`` state, "
"labelled ``Counter``:"
msgstr ""

#: ../../source/app/introapp.rst:58 963e58894b7e40cebe8b9901bc1f0bd5
msgid ""
"To run this as part of a complete program, we need to initialise the "
"state."
msgstr ""

#: ../../source/app/introapp.rst:65 d9cd2e25f7b14de0b1f8005f96aa97d1
msgid ""
"For convenience, we can list multiple interfaces in one go, using a "
"function ``Has``, defined in ``Control.App``, to compute the interface "
"constraints:"
msgstr ""

#: ../../source/app/introapp.rst:76 d0ed71228f3642e3b636b6bb1bdaaea8
msgid ""
"The purpose of ``Path`` is to state whether a program can throw "
"exceptions, so that we can know where it is safe to reference linear "
"resources. It is declared as follows:"
msgstr ""

#: ../../source/app/introapp.rst:84 da82ac74245043259b56bfeff0a84e2b
msgid ""
"The type of ``App`` states that ``MayThrow`` is the default. We expect "
"this to be the most common case. After all, realistically, most "
"operations have possible failure modes, especially those which interact "
"with the outside world."
msgstr ""

#: ../../source/app/introapp.rst:89 d9fc9e4e6d0542b1828e17ad0868bdfe
msgid ""
"The ``0`` on the declaration of ``Has`` indicates that it can only be run"
" in an erased context, so it will never be run at run-time. To run an "
"``App`` inside ``IO``, we use an initial list of errors ``Init`` (recall "
"that an ``Error`` is a synonym for ``Type``):"
msgstr ""

#: ../../source/app/introapp.rst:102 364ca4e885fe41eba49fd08f02b28618
msgid ""
"Generalising the ``Path`` parameter with ``l`` means that we can invoke "
"``run`` for any application, whether the ``Path`` is ``NoThrow`` or "
"``MayThrow``. But, in practice, all applications given to ``run`` will "
"not throw at the top level, because the only exception type available is "
"the type ``AppHasIO``. Any exceptions will have been introduced and "
"handled inside the ``App``."
msgstr ""

