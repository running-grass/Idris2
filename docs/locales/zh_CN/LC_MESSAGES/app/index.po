# SOME DESCRIPTIVE TITLE.
# Copyright (C) 2020, The Idris Community
# This file is distributed under the same license as the Idris2 package.
# FIRST AUTHOR <EMAIL@ADDRESS>, 2022.
#
#, fuzzy
msgid ""
msgstr ""
"Project-Id-Version: Idris2 0.0\n"
"Report-Msgid-Bugs-To: \n"
"POT-Creation-Date: 2022-07-12 09:10+0800\n"
"PO-Revision-Date: YEAR-MO-DA HO:MI+ZONE\n"
"Last-Translator: FULL NAME <EMAIL@ADDRESS>\n"
"Language-Team: LANGUAGE <LL@li.org>\n"
"MIME-Version: 1.0\n"
"Content-Type: text/plain; charset=utf-8\n"
"Content-Transfer-Encoding: 8bit\n"
"Generated-By: Babel 2.10.3\n"

#: ../../source/app/index.rst:5 4e8d1cbb83be447ca6e89e29a25f36d6
msgid "Structuring Idris 2 Applications"
msgstr ""

#: ../../source/app/index.rst:7 b7d2ee1fe5a24078ae30a7eb29685f2c
msgid "A tutorial on structuring Idris 2 applications using ``Control.App``."
msgstr ""

#: ../../source/app/index.rst:11 b2efd602fbd24553a79980fee5036907
msgid ""
"The documentation for Idris has been published under the Creative Commons"
" CC0 License. As such to the extent possible under law, *The Idris "
"Community* has waived all copyright and related or neighboring rights to "
"Documentation for Idris."
msgstr ""

#: ../../source/app/index.rst:16 8c03046b3b564e059159fe96a76f68ea
msgid ""
"More information concerning the CC0 can be found online at: "
"http://creativecommons.org/publicdomain/zero/1.0/"
msgstr ""

#: ../../source/app/index.rst:21 2f35d53e52f74f688c17369434db561a
msgid ""
"Idris applications have ``main : IO ()`` as an entry point.  A type ``IO "
"a`` is a description of interactive actions which produce a value of type"
" ``a``. This is fine for primitives, but ``IO`` does not support "
"exceptions so we have to be explicit about how an operation handles "
"failure. Also, if we do want to support exceptions, we also want to "
"explain how exceptions and linearity (see Section :ref:`sect-"
"multiplicities`) interact."
msgstr ""

#: ../../source/app/index.rst:28 7029bd6488dc4e04b0487dd24fb43364
msgid ""
"In this tutorial, we describe a parameterised type ``App`` and a related "
"parameterised type ``App1``, which together allow us to structure larger "
"applications, taking into account both exceptions and linearity. The aims"
" of ``App`` and ``App1`` are that they should:"
msgstr ""

#: ../../source/app/index.rst:33 d4346833f79a48379c1eef835a0ceb1d
msgid ""
"make it possible to express what interactions a function does, in its "
"type, without too much notational overhead."
msgstr ""

#: ../../source/app/index.rst:35 8b9b4121afe74e81bf40c64bf061ae5c
msgid "have little or no performance overhead compared to writing in *IO*."
msgstr ""

#: ../../source/app/index.rst:36 a18920f1c7994f62b1fc89081b033069
msgid ""
"be compatible with other libraries and techniques for describing effects,"
" such as algebraic effects or monad transformers."
msgstr ""

#: ../../source/app/index.rst:38 494fa367b56a4c9fb21c1f1b25a0441d
msgid ""
"be sufficiently easy to use and performant that it can be the basis of "
"*all* libraries that make foreign function calls, much as *IO* is in "
"Idris 1 and Haskell"
msgstr ""

#: ../../source/app/index.rst:41 2f03a8f412764222b28344d0e149f271
msgid ""
"be compatible with linear types, meaning that they should express whether"
" a section of code is linear (guaranteed to execute exactly once without "
"throwing an exception) or whether it might throw an exception."
msgstr ""

#: ../../source/app/index.rst:45 bee639ae220643a4b07200974a701230
msgid ""
"We begin by introducing ``App``, with some small example programs, then "
"show how to extend it with exceptions, state, and other interfaces."
msgstr ""

