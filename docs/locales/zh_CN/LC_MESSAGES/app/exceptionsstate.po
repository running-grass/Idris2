# SOME DESCRIPTIVE TITLE.
# Copyright (C) 2020, The Idris Community
# This file is distributed under the same license as the Idris2 package.
# FIRST AUTHOR <EMAIL@ADDRESS>, 2022.
#
msgid ""
msgstr ""
"Project-Id-Version: Idris2 0.0\n"
"Report-Msgid-Bugs-To: 467195537@qq.com\n"
"POT-Creation-Date: 2022-07-12 11:10+0800\n"
"PO-Revision-Date: 2022-07-16 07:43+0000\n"
"Last-Translator: Leo Liu <leo19920823@gmail.com>\n"
"Language-Team: Chinese (Simplified) <https://hosted.weblate.org/projects/"
"idris2/appexceptionsstate/zh_Hans/>\n"
"Language: zh_CN\n"
"MIME-Version: 1.0\n"
"Content-Type: text/plain; charset=utf-8\n"
"Content-Transfer-Encoding: 8bit\n"
"Plural-Forms: nplurals=1; plural=0;\n"
"X-Generator: Weblate 4.14-dev\n"
"Generated-By: Babel 2.10.3\n"

#: ../../source/app/exceptionsstate.rst:2 c24ef6f5c8a44b9aa2322e439cd62240
msgid "Exceptions and State"
msgstr "异常和状态"

#: ../../source/app/exceptionsstate.rst:4 63a92dd8e35f4698bcab2e2b14b547dd
msgid ""
"``Control.App`` is primarily intended to make it easier to manage the "
"common cases of applications with exceptions and state. We can throw and "
"catch exceptions listed in the list of errors (the ``es`` parameter to "
"``App``) and introduce new global state."
msgstr ""
"``Control.App`` 主要是为了更容易管理有异常和状态的应用程序的常见情况。我们可"
"以抛出和捕捉错误列表中列出的异常（ ``es`` 参数为 ``App`` "
"），并引入新的全局状态。"

#: ../../source/app/exceptionsstate.rst:10 b482cf57c0c74946b2896d2d6538f6d9
msgid "Exceptions"
msgstr "异常"

#: ../../source/app/exceptionsstate.rst:12 33b7d41950214129aff7303f428705b2
msgid ""
"The ``List Error`` is a list of error types, usable via the ``Exception``"
" interface defined in ``Control.App``:"
msgstr "``List Error`` 是一个错误类型的列表，可通过定义在 ``Control.App`` 中 "
"``Exception`` 接口使用："

#: ../../source/app/exceptionsstate.rst:21 936f4abddaee4b3db8d0ec36a6e5e093
msgid ""
"We can use ``throw`` and ``catch`` for some exception type ``err`` as "
"long as the exception type exists in the list of errors. This is checked "
"with the ``HasErr`` predicate, also defined in ``Control.App``:"
msgstr ""
"要该异常类型存在于错误列表中，我们就可以使用 ``throw`` 和 ``catch`` "
"处理异常类型 ``err`` 。可以通过 ``HasErr`` 谓词来检查，被定义在``Control."
"App`` 中："

#: ../../source/app/exceptionsstate.rst:33 918a7b98c9f34944a5be84673ce34dc8
msgid ""
"Note the ``HasErr`` constraint on ``Exception``: this is one place where "
"it is notationally convenient that the ``auto`` implicit mechanism and "
"the interface resolution mechanism are identical in Idris 2. Finally, we "
"can introduce new exception types via ``handle``, which runs a block of "
"code which might throw, handling any exceptions:"
msgstr ""
"注意 ``Exception`` 上的 ``HasErr`` 约束：这是在 Idris 2 中 ``auto`` "
"隐式机制和接口解析机制相同的符号方便的地方。最后，我们可以通过 ``handle`` "
"引入新的异常类型，它运行可能抛出的代码块，处理任何异常："

#: ../../source/app/exceptionsstate.rst:46 103b43c6d8884529a52ee3817e392c27
msgid "Adding State"
msgstr "添加状态"

#: ../../source/app/exceptionsstate.rst:48 ce740325955045658fead53336de061a
msgid ""
"Applications will typically need to keep track of state, and we support "
"this primitively in ``App`` using a ``State`` type, defined in "
"``Control.App``:"
msgstr "应用程序通常需要跟踪状态，我们在 ``App`` 中使用 ``Control.App`` 中定义的 "
"``State`` 类型支持这个原语："

#: ../../source/app/exceptionsstate.rst:56 96212af10fe047879d54ae147580003d
msgid ""
"The ``tag`` is used purely to distinguish between different states, and "
"is not required at run-time, as explicitly stated in the types of ``get``"
" and ``put``, which are used to access and update a state:"
msgstr "``tag`` 只被用于区分不同的状态，在运行时是不需要，如用于访问和更新的 ``get`` "
"和 ``put`` 类型："

#: ../../source/app/exceptionsstate.rst:65 f49836941e4048058433487f280f9e0e
msgid ""
"These use an ``auto``-implicit to pass around a ``State`` with the "
"relevant ``tag`` implicitly, so we refer to states by tag alone. In "
"``helloCount`` earlier, we used an empty type ``Counter`` as the tag:"
msgstr ""
"它们使用 ``auto``-implicit 来隐式传递带有相关 ``tag`` 的 ``State`` "
"，因此我们仅通过标签来引用状态。在前面的 ``helloCount`` 中，"
"我们使用了一个空类型 ``Counter`` 作为标签："

#: ../../source/app/exceptionsstate.rst:74 5c09a3c2d13d4c93a975c157d870c2d6
msgid ""
"The list of errors ``e`` is used to ensure that states are only usable in"
" the list of errors in which they are introduced. States are introduced "
"using ``new``:"
msgstr "错误列表 ``e`` 用来确保状态只在其被引入的错误列表中可用。状态是用 ``new`` "
"引入的："

#: ../../source/app/exceptionsstate.rst:82 fc39cb023df948c6a51657c1fedb842f
msgid ""
"Note that the type tells us ``new`` runs the program with the state "
"exactly once. Rather than using ``State`` and ``Exception`` directly, "
"however, we typically use interfaces to constrain the operations which "
"are allowed in a list of errors. Internally, ``State`` is implemented via"
" an ``IORef``, primarily for performance reasons."
msgstr ""
"请注意，这个类型告诉我们 ``new`` 用这个状态运行程序正好一次。然而，"
"我们通常不直接使用 ``State`` 和 ``Exception`` "
"，而是使用接口来约束错误列表中允许的操作。在内部， ``State`` 是通过 ``IORef``"
" 实现的，这主要是出于性能的考虑。"
