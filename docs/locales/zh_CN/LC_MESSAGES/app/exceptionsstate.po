# SOME DESCRIPTIVE TITLE.
# Copyright (C) 2020, The Idris Community
# This file is distributed under the same license as the Idris2 package.
# FIRST AUTHOR <EMAIL@ADDRESS>, 2022.
#
#, fuzzy
msgid ""
msgstr ""
"Project-Id-Version: Idris2 0.0\n"
"Report-Msgid-Bugs-To: \n"
"POT-Creation-Date: 2022-07-12 11:10+0800\n"
"PO-Revision-Date: YEAR-MO-DA HO:MI+ZONE\n"
"Last-Translator: FULL NAME <EMAIL@ADDRESS>\n"
"Language-Team: LANGUAGE <LL@li.org>\n"
"MIME-Version: 1.0\n"
"Content-Type: text/plain; charset=utf-8\n"
"Content-Transfer-Encoding: 8bit\n"
"Generated-By: Babel 2.10.3\n"

#: ../../source/app/exceptionsstate.rst:2 c24ef6f5c8a44b9aa2322e439cd62240
msgid "Exceptions and State"
msgstr ""

#: ../../source/app/exceptionsstate.rst:4 63a92dd8e35f4698bcab2e2b14b547dd
msgid ""
"``Control.App`` is primarily intended to make it easier to manage the "
"common cases of applications with exceptions and state. We can throw and "
"catch exceptions listed in the list of errors (the ``es`` parameter to "
"``App``) and introduce new global state."
msgstr ""

#: ../../source/app/exceptionsstate.rst:10 b482cf57c0c74946b2896d2d6538f6d9
msgid "Exceptions"
msgstr ""

#: ../../source/app/exceptionsstate.rst:12 33b7d41950214129aff7303f428705b2
msgid ""
"The ``List Error`` is a list of error types, usable via the ``Exception``"
" interface defined in ``Control.App``:"
msgstr ""

#: ../../source/app/exceptionsstate.rst:21 936f4abddaee4b3db8d0ec36a6e5e093
msgid ""
"We can use ``throw`` and ``catch`` for some exception type ``err`` as "
"long as the exception type exists in the list of errors. This is checked "
"with the ``HasErr`` predicate, also defined in ``Control.App``:"
msgstr ""

#: ../../source/app/exceptionsstate.rst:33 918a7b98c9f34944a5be84673ce34dc8
msgid ""
"Note the ``HasErr`` constraint on ``Exception``: this is one place where "
"it is notationally convenient that the ``auto`` implicit mechanism and "
"the interface resolution mechanism are identical in Idris 2. Finally, we "
"can introduce new exception types via ``handle``, which runs a block of "
"code which might throw, handling any exceptions:"
msgstr ""

#: ../../source/app/exceptionsstate.rst:46 103b43c6d8884529a52ee3817e392c27
msgid "Adding State"
msgstr ""

#: ../../source/app/exceptionsstate.rst:48 ce740325955045658fead53336de061a
msgid ""
"Applications will typically need to keep track of state, and we support "
"this primitively in ``App`` using a ``State`` type, defined in "
"``Control.App``:"
msgstr ""

#: ../../source/app/exceptionsstate.rst:56 96212af10fe047879d54ae147580003d
msgid ""
"The ``tag`` is used purely to distinguish between different states, and "
"is not required at run-time, as explicitly stated in the types of ``get``"
" and ``put``, which are used to access and update a state:"
msgstr ""

#: ../../source/app/exceptionsstate.rst:65 f49836941e4048058433487f280f9e0e
msgid ""
"These use an ``auto``-implicit to pass around a ``State`` with the "
"relevant ``tag`` implicitly, so we refer to states by tag alone. In "
"``helloCount`` earlier, we used an empty type ``Counter`` as the tag:"
msgstr ""

#: ../../source/app/exceptionsstate.rst:74 5c09a3c2d13d4c93a975c157d870c2d6
msgid ""
"The list of errors ``e`` is used to ensure that states are only usable in"
" the list of errors in which they are introduced. States are introduced "
"using ``new``:"
msgstr ""

#: ../../source/app/exceptionsstate.rst:82 fc39cb023df948c6a51657c1fedb842f
msgid ""
"Note that the type tells us ``new`` runs the program with the state "
"exactly once. Rather than using ``State`` and ``Exception`` directly, "
"however, we typically use interfaces to constrain the operations which "
"are allowed in a list of errors. Internally, ``State`` is implemented via"
" an ``IORef``, primarily for performance reasons."
msgstr ""

