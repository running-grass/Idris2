# SOME DESCRIPTIVE TITLE.
# Copyright (C) 2020, The Idris Community
# This file is distributed under the same license as the Idris2 package.
# FIRST AUTHOR <EMAIL@ADDRESS>, 2022.
#
#, fuzzy
msgid ""
msgstr ""
"Project-Id-Version: Idris2 0.0\n"
"Report-Msgid-Bugs-To: \n"
"POT-Creation-Date: 2022-07-12 09:10+0800\n"
"PO-Revision-Date: YEAR-MO-DA HO:MI+ZONE\n"
"Last-Translator: FULL NAME <EMAIL@ADDRESS>\n"
"Language-Team: LANGUAGE <LL@li.org>\n"
"MIME-Version: 1.0\n"
"Content-Type: text/plain; charset=utf-8\n"
"Content-Transfer-Encoding: 8bit\n"
"Generated-By: Babel 2.10.3\n"

#: ../../source/backends/refc.rst:3 ba2adffe74ac496ba206b6758a7162b6
msgid "C with Reference Counting"
msgstr ""

#: ../../source/backends/refc.rst:5 32fc2c366bdf404e9da9079843097eae
msgid ""
"There is an experimental code generator which compiles to an executable "
"via C, using a reference counting garbage collector. This is intended as "
"a lightweight (i.e. minimal dependencies) code generator that can be "
"ported to multiple platforms, especially those with memory constraints."
msgstr ""

#: ../../source/backends/refc.rst:10 02aed202f0174a879c0eef1baf4f62d2
msgid ""
"Performance is not as good as the Scheme based code generators, partly "
"because the reference counting has not yet had any optimisation, and "
"partly because of the limitations of C. However, the main goal is "
"portability: the generated code should run on any platform that supports "
"a C compiler."
msgstr ""

#: ../../source/backends/refc.rst:15 7f4d8080fff842e0888eb1e0973ad470
msgid "This code generator can be accessed via the REPL command:"
msgstr ""

#: ../../source/backends/refc.rst:21 b784832994854f15be232550273df96a
msgid "Alternatively, you can set it via the ``IDRIS2_CG`` environment variable:"
msgstr ""

#: ../../source/backends/refc.rst:27 70c272967272433b9a8cf923f93f0cc6
msgid ""
"The C compiler it invokes is determined by either the ``IDRIS2_CC`` or "
"``CC`` environment variables. If neither is set, it uses ``cc``."
msgstr ""

#: ../../source/backends/refc.rst:30 d4f919a38cd046eb97e1a05d602f785a
msgid "This code generator does not yet support `:exec`, just `:c`."
msgstr ""

#: ../../source/backends/refc.rst:32 0adc893fa6a24760b126c3c655e6306a
msgid ""
"Also note that, if you link with any dynamic libraries for interfacing "
"with C, you will need to arrange for them to be accessible via "
"``LD_LIBRARY_PATH`` when running the executable. The default Idris 2 "
"support libraries are statically linked."
msgstr ""

#: ../../source/backends/refc.rst:38 7ed2f9cf376d4f7d930e4c48e58f39b8
msgid "Extending RefC"
msgstr ""

#: ../../source/backends/refc.rst:40 db43aced51164e9d833ae637cad04491
msgid ""
"RefC can be extended to produce a new backend for languages that support "
"C foreign functions. For example, a `Python backend for Idris "
"<https://github.com/madman-bob/idris2-python>`_."
msgstr ""

#: ../../source/backends/refc.rst:44 48188f8241594fed92ad1fda089aad41
msgid ""
"In your backend, use the ``Compiler.RefC`` functions "
"``generateCSourceFile``, ``compileCObjectFile {asLibrary = True}``, and "
"``compileCFile {asShared = True}`` to generate a ``.so`` shared object "
"file."
msgstr ""

#: ../../source/backends/refc.rst:54 9f62291f0d2a422b977d361ab8a01c09
msgid ""
"To run a compiled Idris program, call the ``int main(int argc, char "
"*argv[])`` function in the compiled ``.so`` file, with the arguments you "
"wish to pass to the running program."
msgstr ""

#: ../../source/backends/refc.rst:58 4a5ed1dc371a4c09aaa430af03d08a78
msgid "For example, in Python:"
msgstr ""

#: ../../source/backends/refc.rst:72 381be2808497441387b56c7af922d92f
msgid "Extending RefC FFIs"
msgstr ""

#: ../../source/backends/refc.rst:74 8cec8c081eee41d89af45300b2e87cb6
msgid ""
"To make the generated C code recognize additional FFI languages beyond "
"the standard RefC FFIs, pass the ``additionalFFILangs`` option to "
"``generateCSourceFile``, with a list of the language identifiers your "
"backend recognizes."
msgstr ""

#: ../../source/backends/refc.rst:83 85e3097fa7ad47edaea758baadc8f732
msgid ""
"This will generate stub FFI function pointers in the generated C file, "
"which your backend should set to the appropriate C functions before "
"``main`` is called."
msgstr ""

#: ../../source/backends/refc.rst:87 75208dae6fb949869d9896829e1f45ca
#, python-format
msgid ""
"Each ``%foreign \"lang: foreignFuncName, opts\"`` definition for a "
"function will produce a stub, of the appropriate function pointer type. "
"This stub will be called ``cName $ NS (mkNamespace lang) funcName``, "
"where ``funcName`` is the fully qualified Idris name of that function."
msgstr ""

#: ../../source/backends/refc.rst:92 39bc709202cd4911ae336968a2169add
#, python-format
msgid "So the ``%foreign`` function"
msgstr ""

#: ../../source/backends/refc.rst:99 4fa812a7d4cb41a6bb010812dbf1c31c
msgid ""
"produces a stub ``python_Main_abs``, which can be backpatched in Python "
"by:"
msgstr ""

