# SOME DESCRIPTIVE TITLE.
# Copyright (C) 2020, The Idris Community
# This file is distributed under the same license as the Idris2 package.
# FIRST AUTHOR <EMAIL@ADDRESS>, 2022.
#
msgid ""
msgstr ""
"Project-Id-Version: Idris2 0.0\n"
"Report-Msgid-Bugs-To: \n"
"POT-Creation-Date: 2022-07-12 11:10+0800\n"
"PO-Revision-Date: 2022-07-26 13:03+0000\n"
"Last-Translator: admin <467195537@qq.com>\n"
"Language-Team: Chinese (Simplified) <https://weblate.grass.work:30443/"
"projects/idris2/backendschez/zh_Hans/>\n"
"Language: zh_CN\n"
"MIME-Version: 1.0\n"
"Content-Type: text/plain; charset=utf-8\n"
"Content-Transfer-Encoding: 8bit\n"
"Plural-Forms: nplurals=1; plural=0;\n"
"X-Generator: Weblate 4.13.1\n"
"Generated-By: Babel 2.10.3\n"

#: ../../source/backends/chez.rst:3 031df179d38d4bf78b60c1efeef7bc1d
msgid "Chez Scheme Code Generator"
msgstr "Chez Scheme 代码生成器"

#: ../../source/backends/chez.rst:5 68e22470735d433baa93b8eda6f06fd1
msgid ""
"The Chez Scheme code generator is the default, or it can be accessed via "
"a REPL command:"
msgstr "Chez Scheme 代码生成器是默认的，或者可以通过 REPL 命令访问："

#: ../../source/backends/chez.rst:12 0dd31067e2a644f887013bb78b1d8da8
msgid ""
"By default, therefore, to run Idris programs you will need to install "
"`Chez Scheme <https://www.scheme.com/>`_. Chez Scheme is open source, and"
" available via most OS package managers."
msgstr ""
"因此，默认情况下，要运行 Idris 程序，您需要安装 `Chez Scheme <https://www."
"scheme.com/>`_ 。 Chez Scheme 是开源的，可通过大多数操作系统包管理器获得。"

#: ../../source/backends/chez.rst:16 46fc5437caa8498689ab6b9216809f95
msgid ""
"You can compile an expression ``expr`` of type ``IO ()`` to an executable"
" as follows, at the REPL:"
msgstr "您可以在 REPL 中将类型为 ``IO ()`` 的表达式 ``expr`` "
"编译为可执行文件，如下所示："

#: ../../source/backends/chez.rst:23 ea42b95730204567ad278936f30288f6
msgid ""
"...where ``execname`` is the name of the executable file. This will "
"generate the following:"
msgstr "...其中 ``execname`` 是可执行文件的名称。这将生成以下内容："

#: ../../source/backends/chez.rst:26 35c55ad79d9942e6bbacc9f7e10a9752
msgid "A shell script ``build/exec/execname`` which invokes the program"
msgstr "调用程序的 shell 脚本 ``build/exec/execname``"

#: ../../source/backends/chez.rst:27 551bed13ae73406a83bfb41fbd1b23b9
msgid ""
"A subdirectory ``build/exec/execname_app`` which contains all the data "
"necessary to run the program. This includes the Chez Scheme source "
"(``execname.ss``), the compiled Chez Scheme code (``execname.so``) and "
"any shared libraries needed for foreign function definitions."
msgstr ""
"子目录 ``build/exec/execname_app`` 中包含运行程序所需的所有数据。这包括 Chez "
"Scheme 源代码（ ``execname.ss`` ），已编译的 Chez Scheme 代码（ ``execname."
"so`` ）和外部函数定义所需的任何共享库。"

#: ../../source/backends/chez.rst:32 8dda3ec059bc4eb3b83faf3a4638340c
msgid ""
"The executable ``execname`` is relocatable to any subdirectory, provided "
"that ``execname_app`` is also in the same subdirectory."
msgstr "可执行的 ``execname`` 可以重新定位到任何子目录，前提是 ``execname_app`` "
"也在同一个子目录中。"

#: ../../source/backends/chez.rst:35 3b99a2f1c4af4c889e2b22d6075e0a5f
msgid "You can also execute an expression directly:"
msgstr "你也可以直接执行表达式："

#: ../../source/backends/chez.rst:41 1f79591c812f407aabd77f2c6b1073e7
msgid ""
"Again, ``expr`` must have type ``IO ()``. This will generate a temporary "
"executable script ``_tmpchez`` in the ``build/exec`` directory, and "
"execute that."
msgstr ""
"同样， ``expr`` 必须具有 ``IO ()`` 类型。这将在 ``build/exec`` "
"目录中生成一个临时可执行脚本 ``_tmpchez`` ，并执行它。"

#: ../../source/backends/chez.rst:45 956e16790c9d46bc86f218d18116b730
msgid ""
"Chez Scheme is the default code generator, so if you invoke ``idris2`` "
"with the ``-o execname`` flag, it will generate an executable script "
"``build/exec/execname``, again with support files in "
"``build/exec/execname_app``."
msgstr ""
"Chez Scheme 是默认的代码生成器，因此如果您使用 ``-o execname`` 标志调用 "
"``idris2`` ，它将生成一个可执行脚本 ``build/exec/execname`` ，和支持文件 ``"
"build/exec/execname_app`` 。"

#: ../../source/backends/chez.rst:51 f9a98275862a449bb841b93003cc2ed9
msgid "Chez Directives"
msgstr "Chez 指令"

#: ../../source/backends/chez.rst:53 386337eaed2d456690862b41fe0e59f8
msgid "``--directive extraRuntime=<path>``"
msgstr "``--directive extraRuntime=<path>``"

#: ../../source/backends/chez.rst:55 61434afb69b442dea22cc1665340e500
msgid ""
"Embed Scheme source from ``<path>`` directly into generated output. Can "
"be specified more than once, in which case all given files will be "
"included in the order specified."
msgstr "将来自 ``<path>`` 的 Scheme 源代码直接嵌入到生成的输出中。可以多次指定，在这"
"种情况下，所有给定的文件都将按指定的顺序包含。"

#: ../../source/backends/chez.rst:76 63865231998945b69cdb7d4f170bff56
msgid "Making a freestanding executable"
msgstr "构建独立的可执行文件"

#: ../../source/backends/chez.rst:78 0cab716a44b34d67b2d147c1d5af50b5
msgid ""
"It's possible to embed the Chez Scheme system and the built Idris2 "
"program into a freestanding executable with `chez-exe "
"<https://github.com/gwatt/chez-exe>`_."
msgstr ""
"可以使用 `chez-exe <https://github.com/gwatt/chez-exe>`_ 将 Chez Scheme "
"系统和内置的 Idris2 程序嵌入到独立的可执行文件中。"

#: ../../source/backends/chez.rst:80 9a98b2c9ff1a443cac6e238e932f3445
msgid ""
"Build and install the ``compile-chez-program-tool`` by running the "
"configuration script and then make:"
msgstr "通过运行配置脚本构建并安装 ``compile-chez-program-tool`` ，然后执行："

#: ../../source/backends/chez.rst:87 9c12d28d66d049ba94738d966cb13fdd
msgid ""
"where ``<bootpath`` is the path to where the Chez Scheme bootfiles "
"(``petite.boot`` and ``scheme.boot``) and ``scheme.h`` are. More "
"configuration is described in the chez-exe installation instructions."
msgstr ""
"其中 ``<bootpath`` 是 Chez Scheme 引导文件（ ``petite.boot`` 和 ``scheme."
"boot`` ）和 ``scheme.h`` 所在的路径。更多配置在 chez-exe 安装说明中描述。"

#: ../../source/backends/chez.rst:90 9aa394ad4dad4746bcfa26caeced49eb
msgid "Invoke ``compile-chez-program``:"
msgstr "调用 ``compile-chez-program`` ："

#: ../../source/backends/chez.rst:96 07af1e01e5704f87a3232ea2159bb2d5
msgid ""
"Note that it can only use the ``.ss``-file and not the ``.so``-file. To "
"embed the full Chez Scheme system including the compiler add the "
"``--full-chez`` option."
msgstr ""
"请注意，它只能使用 ``.ss`` 文件而不是 ``.so`` 文件。"
"要嵌入包括编译器在内的完整 Chez Scheme 系统，请添加 ``--full-chez`` 选项。"

#: ../../source/backends/chez.rst:99 07eae07f07e945ee98023649941271ce
msgid ""
"The finished executable still requires the libidris_support shared "
"library. It's possible to also eliminate that dependency by linking with "
"it statically."
msgstr "完成的可执行文件仍然需要 libidris_support "
"共享库。也可以通过静态链接来消除这种依赖关系。"
