# SOME DESCRIPTIVE TITLE.
# Copyright (C) 2020, The Idris Community
# This file is distributed under the same license as the Idris2 package.
# FIRST AUTHOR <EMAIL@ADDRESS>, 2022.
#
#, fuzzy
msgid ""
msgstr ""
"Project-Id-Version: Idris2 0.0\n"
"Report-Msgid-Bugs-To: \n"
"POT-Creation-Date: 2022-07-12 11:10+0800\n"
"PO-Revision-Date: YEAR-MO-DA HO:MI+ZONE\n"
"Last-Translator: FULL NAME <EMAIL@ADDRESS>\n"
"Language-Team: LANGUAGE <LL@li.org>\n"
"MIME-Version: 1.0\n"
"Content-Type: text/plain; charset=utf-8\n"
"Content-Transfer-Encoding: 8bit\n"
"Generated-By: Babel 2.10.3\n"

#: ../../source/typedd/typedd.rst:4 f726c39928c1475db2697fb26b68fce0
msgid "Type Driven Development with Idris: Updates Required"
msgstr ""

#: ../../source/typedd/typedd.rst:6 b2c99fe3cc894fd39db2425d706f2abb
msgid ""
"The code in the book `Type-Driven Development with Idris "
"<https://www.manning.com/books/type-driven-development-with-idris>`_ by "
"Edwin Brady, available from `Manning <https://www.manning.com>`_,  will "
"mostly work in Idris 2, with some small changes as detailed in this "
"document. The updated code is also [going to be] part of the test suite "
"(see `tests/typedd-book "
"<https://github.com/edwinb/Idris2/tree/master/tests/typedd-book>`_ in the"
" Idris 2 source)."
msgstr ""

#: ../../source/typedd/typedd.rst:14 29ab34da6ef34d05a22c4e22b1bcea34
msgid ""
"If you are new to Idris, and learning from the book, we recommend working"
" through the first 3-4 chapters with Idris 1, to avoid the need to worry "
"about the changes described here. After that, refer to this document for "
"any necessary changes."
msgstr ""

#: ../../source/typedd/typedd.rst:20 d45dcb40a5674490bfee88ae75193698
msgid "Chapter 1"
msgstr ""

#: ../../source/typedd/typedd.rst:22 e947481629664880a1494e90e1f9a568
msgid "No changes necessary"
msgstr ""

#: ../../source/typedd/typedd.rst:25 08ebf2e4fef24dbdbdcb1e39c6397e1f
msgid "Chapter 2"
msgstr ""

#: ../../source/typedd/typedd.rst:27 d07cd17926d7468e871f0be9ca14ea99
msgid ""
"The Prelude is smaller than Idris 1, and many functions have been moved "
"to the base libraries instead. So:"
msgstr ""

#: ../../source/typedd/typedd.rst:30 760729268ac943bd88b928b562d9d06a
msgid "In ``Average.idr``, add:"
msgstr ""

#: ../../source/typedd/typedd.rst:37 3c504c5582184df2956ce08bba6f97b5
msgid "In ``AveMain.idr`` and ``Reverse.idr`` add:"
msgstr ""

#: ../../source/typedd/typedd.rst:44 24c94b0ca71b4f0c97043b18cc7d5288
msgid "Chapter 3"
msgstr ""

#: ../../source/typedd/typedd.rst:46 90c635380076405da3d37dc9faeeab2c
msgid ""
"Unbound implicits have multiplicity 0, so we can't match on them at run-"
"time. Therefore, in ``Matrix.idr``, we need to change the type of "
"``createEmpties`` and ``transposeMat`` so that the length of the inner "
"vector is available to match on:"
msgstr ""

#: ../../source/typedd/typedd.rst:57 068a9a78719843148bef8c81b5e0d448
msgid "Chapter 4"
msgstr ""

#: ../../source/typedd/typedd.rst:59 04fc51052f984fccaee7f1856d0b9c33
msgid "For the reasons described above:"
msgstr ""

#: ../../source/typedd/typedd.rst:61 3559ef9334e34a2283c00d6c766bb183
msgid ""
"In ``DataStore.idr``, add ``import System.REPL`` and ``import "
"Data.String``"
msgstr ""

#: ../../source/typedd/typedd.rst:62 e33d3affc2ba460b861241ed6ead3c3d
msgid "In ``SumInputs.idr``, add ``import System.REPL``"
msgstr ""

#: ../../source/typedd/typedd.rst:63 8c1b6faf0ac74e13ae2c00fbdf32f1f9
msgid "In ``TryIndex.idr``, add an implicit argument:"
msgstr ""

#: ../../source/typedd/typedd.rst:69 431afa2571bd4a64bd5deb50343a4cc0
msgid "In exercise 5 of 4.2, add an implicit argument:"
msgstr ""

#: ../../source/typedd/typedd.rst:76 9270c85b06f84f3591fea542aab834b7
msgid "Chapter 5"
msgstr ""

#: ../../source/typedd/typedd.rst:78 4387e5278c0d4c34b03c228ad3b4a3b0
msgid ""
"There is no longer a ``Cast`` instance from ``String`` to ``Nat``, "
"because its behaviour of returing Z if the ``String`` wasn't numeric was "
"thought to be confusing and potentially error prone. Instead, there is "
"``stringToNatOrZ`` in ``Data.String`` which at least has a clearer name. "
"So:"
msgstr ""

#: ../../source/typedd/typedd.rst:83 e0c6b94ed2ab4cee88550c1a60c965d7
msgid ""
"In ``Loops.idr`` and ``ReadNum.idr`` add ``import Data.String`` and "
"change ``cast`` to ``stringToNatOrZ``"
msgstr ""

#: ../../source/typedd/typedd.rst:86 96291ea66f5b46f491331641ea9e1160
msgid ""
"In ``ReadNum.idr``, since functions must now be ``covering`` by default, "
"add a ``partial`` annotation to ``readNumber_v2``."
msgstr ""

#: ../../source/typedd/typedd.rst:90 2916c33375c24971abb38d829ae15ac3
msgid "Chapter 6"
msgstr ""

#: ../../source/typedd/typedd.rst:92 1bd6733f0f3b41e5ae1af070a2f63c8c
msgid ""
"In ``DataStore.idr`` and ``DataStoreHoles.idr``, add ``import "
"Data.String`` and ``import System.REPL``. Also in ``DataStore.idr``, the "
"``schema`` argument to ``display`` is required for matching, so change "
"the type to:"
msgstr ""

#: ../../source/typedd/typedd.rst:100 8d5b7f8607304086b3d4fc46844f35a9
msgid "In ``TypeFuns.idr`` add ``import Data.String``"
msgstr ""

#: ../../source/typedd/typedd.rst:103 2947a30348264b01a69645eb4861e67e
msgid "Chapter 7"
msgstr ""

#: ../../source/typedd/typedd.rst:105 02b33d511c09420bafb11d1da7654a2e
msgid ""
"``Abs`` is now a separate interface from ``Neg``. So, change the type of "
"``eval`` to include ``Abs`` specifically:"
msgstr ""

#: ../../source/typedd/typedd.rst:112 d7ce83c49cd64b368125703e9bf3d553
msgid ""
"Also, take ``abs`` out of the ``Neg`` implementation for ``Expr`` and add"
" an implementation of ``Abs`` as follows:"
msgstr ""

#: ../../source/typedd/typedd.rst:121 5d40fc0f427c46d5ab8cf24966d82c25
msgid "Chapter 8"
msgstr ""

#: ../../source/typedd/typedd.rst:123 3e2b030848e5405a80a24387fb8e83b1
msgid "In ``AppendVec.idr``, add ``import Data.Nat`` for the ``Nat`` proofs"
msgstr ""

#: ../../source/typedd/typedd.rst:125 27d276c72e6447c2a87f8574b1498812
msgid ""
"``cong`` now takes an explicit argument for the function to apply. So, in"
" ``CheckEqMaybe.idr`` change the last case to:"
msgstr ""

#: ../../source/typedd/typedd.rst:134 bf5c3622593c46e69f3f91cacf5cad1d
msgid "A similar change is necessary in ``CheckEqDec.idr``."
msgstr ""

#: ../../source/typedd/typedd.rst:136 d1e9f07cc5cd478e988660783fbee981
msgid ""
"In ``ExactLength.idr``, the ``m`` argument to ``exactLength`` is needed "
"at run time, so change its type to:"
msgstr ""

#: ../../source/typedd/typedd.rst:144 750b5c3d7e294edc86816ec319172713
msgid ""
"A similar change is necessary in ``ExactLengthDec.idr``. Also, ``DecEq`` "
"is no longer part of the prelude, so add ``import Decidable.Equality``."
msgstr ""

#: ../../source/typedd/typedd.rst:147 70d6fe0942d8488c9cffba962179337f
msgid "In ``ReverseVec.idr``, add ``import Data.Nat`` for the ``Nat`` proofs."
msgstr ""

#: ../../source/typedd/typedd.rst:149 2b9290685f2c4fcaa1bd9edf3041e954
msgid ""
"In ``Void.idr``, since functions must now be ``covering`` by default, add"
" a ``partial`` annotation to ``nohead`` and its helper function "
"``getHead``."
msgstr ""

#: ../../source/typedd/typedd.rst:152 ef389b30818544088965bc62329d97af
msgid ""
"In Exercise 2 of 8.2.5, the definition of ``reverse'`` should be changed "
"to ``reverse' : Vect k a -> Vect m a -> Vect (k + m) a``, because the "
"``n`` in ``reverse'`` is otherwise bound to the same value as the ``n`` "
"in the signature of ``myReverse``."
msgstr ""

#: ../../source/typedd/typedd.rst:157 2f164841fd2845be8865388ac06b3ce7
msgid "Chapter 9"
msgstr ""

#: ../../source/typedd/typedd.rst:159 ec322ec1455a4316a6c6b2a0e9eed9da
msgid "In ``ElemType.idr``, add ``import Decidable.Equality``"
msgstr ""

#: ../../source/typedd/typedd.rst:161 961374f150f44364b1a03a27766d57f9
msgid "In ``Elem.idr``, add ``import Data.Vect.Elem``"
msgstr ""

#: ../../source/typedd/typedd.rst:163 d199f6d80544469393e8b90b230e86dd
msgid "In ``Hangman.idr``:"
msgstr ""

#: ../../source/typedd/typedd.rst:165 5799e7ebb0914e80aad2c9e1a9a13995
msgid ""
"Add ``import Data.String``, ``import Data.Vect.Elem`` and ``import "
"Decidable.Equality``"
msgstr ""

#: ../../source/typedd/typedd.rst:166 ../../source/typedd/typedd.rst:518
#: 8ae683943ea146ec92f678a59691e80b b7f188e15aaf476d8cd20d07ffaced71
msgid ""
"``removeElem`` pattern matches on ``n``, so it needs to be written in its"
" type:"
msgstr ""

#: ../../source/typedd/typedd.rst:176 83f386b668f14d5db744024ab7f6dff5
msgid ""
"``letters`` is used by ``processGuess``, because it's passed to "
"``removeElem``:"
msgstr ""

#: ../../source/typedd/typedd.rst:185 409263da8659464eb352b982c89aecf9
msgid ""
"``guesses`` and ``letters`` are implicit arguments to ``game``, but are "
"used by the definition, so add them to its type:"
msgstr ""

#: ../../source/typedd/typedd.rst:193 be07145fa271410da7797f354656e1cb
msgid "In ``RemoveElem.idr``"
msgstr ""

#: ../../source/typedd/typedd.rst:195 c59bb724a96342d584f45ffb4e1e865b
msgid "Add ``import Data.Vect.Elem``"
msgstr ""

#: ../../source/typedd/typedd.rst:196 7a900566bd5f430a9edc772c63d520ad
msgid "``removeElem`` needs to be updated as above."
msgstr ""

#: ../../source/typedd/typedd.rst:199 4b34c0f6b2fc4006838ceeb231e56976
msgid "Chapter 10"
msgstr ""

#: ../../source/typedd/typedd.rst:201 a61f59ee77b54d17b85571574bedac7d
msgid ""
"Lots of changes necessary here, at least when constructing views, due to "
"Idris 2 having a better (that is, more precise and correct!) "
"implementation of unification, and the rules for recursive ``with`` "
"application being tightened up."
msgstr ""

#: ../../source/typedd/typedd.rst:205 16354a560b294b138f7b9324901c0a31
msgid "In ``MergeSort.idr``, add ``import Data.List``"
msgstr ""

#: ../../source/typedd/typedd.rst:207 32913a980fcd4a6491805316bc91c960
msgid ""
"In ``MergeSortView.idr``, add ``import Data.List``, and make the "
"arguments to the views explicit:"
msgstr ""

#: ../../source/typedd/typedd.rst:220 ca421162f944468eaa0fed3448b2277e
msgid ""
"In the problem 1 of exercise 10-1, the ``rest`` argument of the data "
"constructor ``Exact`` of ``TakeN`` must be made explicit."
msgstr ""

#: ../../source/typedd/typedd.rst:229 4bf69b22845f413ca6bb66c44ed55cb9
msgid ""
"In ``SnocList.idr``, in ``my_reverse``, the link between ``Snoc rec`` and"
" ``xs ++ [x]`` needs to be made explicit. Idris 1 would happily decide "
"that ``xs`` and ``x`` were the relevant implicit arguments to ``Snoc`` "
"but this was little more than a guess based on what would make it type "
"check, whereas Idris 2 is more precise in what it allows to unify. So, "
"``x`` and ``xs`` need to be explicit arguments to ``Snoc``:"
msgstr ""

#: ../../source/typedd/typedd.rst:242 46f1eaad3c3145319bea88d410b44571
msgid "Correspondingly, they need to be explicit when matching. For example:"
msgstr ""

#: ../../source/typedd/typedd.rst:251 ab2fb83b55e7448db897ad3364c74a64
msgid ""
"Similar changes are necessary in ``snocListHelp`` and "
"``my_reverse_help``. See tests/typedd-book/chapter10/SnocList.idr for the"
" full details."
msgstr ""

#: ../../source/typedd/typedd.rst:254 a2b2d8c69f4c48559e00473b6c37269f
msgid ""
"Also, in ``snocListHelp``, ``input`` is used at run time so needs to be "
"bound in the type:"
msgstr ""

#: ../../source/typedd/typedd.rst:262 74f65f1d808748b3befbeb629c542fef
msgid ""
"It's no longer necessary to give ``{input}`` explicitly in the patterns "
"for ``snocListHelp``, although it's harmless to do so."
msgstr ""

#: ../../source/typedd/typedd.rst:265 d0d1488d78ef475c8155a659a7e44091
msgid ""
"In ``IsSuffix.idr``, the matching has to be written slightly differently."
" The recursive with application in Idris 1 probably shouldn't have "
"allowed this! Note that the ``Snoc`` - ``Snoc`` case has to be written "
"first otherwise Idris generates a case tree splitting on ``input1`` and "
"``input2`` instead of the ``SnocList`` objects and this leads to a lot of"
" cases being detected as missing."
msgstr ""

#: ../../source/typedd/typedd.rst:280 ec91767c0820434c8ab645f3886d4f21
msgid ""
"This doesn't yet get past the totality checker, however, because it "
"doesn't know about looking inside pairs."
msgstr ""

#: ../../source/typedd/typedd.rst:283 2da772bedab940ea8ca55d9ed348d392
msgid ""
"For the ``VList`` view in the exercise 4 after Chapter 10-2 ``import "
"Data.List.Views.Extra`` from ``contrib`` library."
msgstr ""

#: ../../source/typedd/typedd.rst:285 dff61d15330f49e3b073934223d7fee9
msgid ""
"In ``DataStore.idr``: Well this is embarrassing - I've no idea how Idris "
"1 lets this through! I think perhaps it's too \"helpful\" when solving "
"unification problems. To fix it, add an extra parameter ``schema`` to "
"``StoreView``, and change the type of ``SNil`` to be explicit that the "
"``empty`` is the function defined in ``DataStore``. Also add ``entry`` "
"and ``store`` as explicit arguments to ``SAdd``:"
msgstr ""

#: ../../source/typedd/typedd.rst:298 b297f48eb3d848488982fa26e5011122
msgid ""
"Since ``size`` is as explicit argument in the ``DataStore`` record, it "
"also needs to be relevant in the type of ``storeViewHelp``:"
msgstr ""

#: ../../source/typedd/typedd.rst:307 52734b642be24df5aeb9ffabbc086eaf
msgid "In ``TestStore.idr``:"
msgstr ""

#: ../../source/typedd/typedd.rst:309 31ff10312ece44cbbc41350780fc26a0
msgid ""
"In ``listItems``, ``empty`` needs to be ``DataStore.empty`` to be "
"explicit that you mean the function"
msgstr ""

#: ../../source/typedd/typedd.rst:311 35ad8a81bb084b81a1fcc5d413ad12a4
msgid ""
"In ``filterKeys``, there is an error in the ``SNil`` case, which wasn't "
"caught because of the type of ``SNil`` above. It should be:"
msgstr ""

#: ../../source/typedd/typedd.rst:319 b1db3b55a359451c8c7468fc93806660
msgid "Chapter 11"
msgstr ""

#: ../../source/typedd/typedd.rst:321 9308c5726196434ca38af61a77c9952e
msgid "In ``Streams.idr`` add ``import Data.Stream`` for ``iterate``."
msgstr ""

#: ../../source/typedd/typedd.rst:323 6594efd9add14dfdb736de5b8b2c92bf
msgid ""
"In ``Arith.idr`` and ``ArithTotal.idr``, the ``Divides`` view now has "
"explicit arguments for the dividend and remainder, so they need to be "
"explicit in ``bound``:"
msgstr ""

#: ../../source/typedd/typedd.rst:333 2ebc191c556848e6b26677bf0829ea66
msgid ""
"In addition,  ``import Data.Bits`` has to be added for ``shiftR``, which "
"now uses a safer type for the number of shifts:"
msgstr ""

#: ../../source/typedd/typedd.rst:343 f967eea3a29645739996ad0abfa7f183
msgid ""
"In ``ArithCmd.idr``, update ``DivBy``, ``randoms``, and ``import "
"Data.Bits`` as above. Also add ``import Data.String`` for "
"``String.toLower``."
msgstr ""

#: ../../source/typedd/typedd.rst:346 627dec293c494bc5bd14383060ecc77b
msgid ""
"In ``ArithCmd.idr``, update ``DivBy``, ``randoms``, ``import Data.Bits`` "
"and ``import Data.String`` as above.  Also, since export rules are per-"
"namespace now, rather than per-file, you need to export ``(>>=)`` from "
"the namespaces ``CommandDo`` and ``ConsoleDo``."
msgstr ""

#: ../../source/typedd/typedd.rst:351 d529b695fa884af6b0ded9772b4736d3
msgid ""
"In ``ArithCmdDo.idr``, since ``(>>=)`` is ``export``, ``Command`` and "
"``ConsoleIO`` also have to be ``export``. Also, update ``randoms`` and "
"``import Data.Bits`` as above."
msgstr ""

#: ../../source/typedd/typedd.rst:354 2a8b4ccf0aa84d018615f72623d021a6
msgid "In ``StreamFail.idr``, add a ``partial`` annotation to ``labelWith``."
msgstr ""

#: ../../source/typedd/typedd.rst:356 2c128f2d4eeb4149b0e8e2ee2f1be778
msgid ""
"In order to support ``do`` notation for custom types (like ``RunIO``), "
"you need to implement ``(>>=)`` for binding values in a ``do`` block and "
"``(>>)`` for sequencing computations without binding values. See  `tests "
"<https://github.com/idris-lang/Idris2/tree/master/tests/typedd-"
"book/chapter11>`_ for complete implementations."
msgstr ""

#: ../../source/typedd/typedd.rst:358 9abc4ca6cadc4c13b787f4360c2d9778
msgid ""
"For instance, the following do block is desugared to ``foo >>= (\\x => "
"bar >>= (\\y => baz x y))``:"
msgstr ""

#: ../../source/typedd/typedd.rst:367 5b3d46a1e48d4140a5aed0e85129d584
msgid "while the following is converted to ``foo >> bar >> baz``:"
msgstr ""

#: ../../source/typedd/typedd.rst:377 3beb6dc1e20840a7b7c95b6f3011d0d1
msgid "Chapter 12"
msgstr ""

#: ../../source/typedd/typedd.rst:379 eedd2665ca3a412584ce009ddef287c5
msgid ""
"For reasons described above: In ``ArithState.idr``, add ``import "
"Data.String`` and ``import Data.Bits`` and update ``randoms``.  Also the "
"``(>>=)`` operators need to be set as ``export`` since they are in their "
"own namespaces, and in ``getRandom``, ``DivBy`` needs to take additional "
"arguments ``div`` and ``rem``."
msgstr ""

#: ../../source/typedd/typedd.rst:385 ce4f30e1eba04ea78c3a101e8ad9420f
msgid ""
"In ``ArithState.idr``, since ``(>>=)`` is ``export``, ``Command`` and "
"``ConsoleIO`` also have to be ``export``."
msgstr ""

#: ../../source/typedd/typedd.rst:388 2164408206454f659615795d772c70b5
msgid ""
"evalState from Control.Monad.State now takes the ``stateType`` argument "
"first."
msgstr ""

#: ../../source/typedd/typedd.rst:391 9aa8ab12fd3041838362e70422f6b00b
msgid "Chapter 13"
msgstr ""

#: ../../source/typedd/typedd.rst:393 fb5d36ee9c284bb3b28fd6a3e67a3068
msgid "In ``StackIO.idr``:"
msgstr ""

#: ../../source/typedd/typedd.rst:395 2224228cfb934c0da221c915fbfe962d
msgid ""
"``tryAdd`` pattern matches on ``height``, so it needs to be written in "
"its type:"
msgstr ""

#: ../../source/typedd/typedd.rst:402 c87cb9195b874f65b4c12076ddd8a075
msgid ""
"``height`` is also an implicit argument to ``stackCalc``, but is used by "
"the definition, so add it to its type:"
msgstr ""

#: ../../source/typedd/typedd.rst:409 c3c559eec89f4ae1bb2ee57fdea82526
msgid "In ``StackDo`` namespace, export ``(>>=)``:"
msgstr ""

#: ../../source/typedd/typedd.rst:419 dc6e9b7baae64f76a440eb4d2c9a9bcc
msgid "In ``Vending.idr``:"
msgstr ""

#: ../../source/typedd/typedd.rst:421 7ab44f13825f40dc8d32197fec2c5cc5
msgid ""
"Add ``import Data.String`` and change ``cast`` to ``stringToNatOrZ`` in "
"``strToInput``"
msgstr ""

#: ../../source/typedd/typedd.rst:422 d0d3abfe646449a5b0cc273a70fa177c
msgid ""
"In ``MachineCmd`` type, add an implicit argument to ``(>>=)`` data "
"constructor:"
msgstr ""

#: ../../source/typedd/typedd.rst:431 1e96ba3c53734b1990f7787e7b0c7b33
msgid ""
"In ``MachineIO`` type, add an implicit argument to ``Do`` data "
"constructor:"
msgstr ""

#: ../../source/typedd/typedd.rst:440 10f34b2852914eecb5f72b59848e21d1
msgid ""
"``runMachine`` pattern matches on ``inState``, so it needs to be written "
"in its type:"
msgstr ""

#: ../../source/typedd/typedd.rst:447 6c54501896584be7b2fb0bc6be698494
msgid ""
"In ``MachineDo`` namespace, add an implicit argument to ``(>>=)`` and "
"export it:"
msgstr ""

#: ../../source/typedd/typedd.rst:458 2982143899264dc1b205af2a3117879b
msgid ""
"``vend`` and ``refill`` pattern match on ``pounds`` and ``chocs``, so "
"they need to be written in their type:"
msgstr ""

#: ../../source/typedd/typedd.rst:466 59f9dddae87c41ba97da2cd74456bee8
msgid ""
"``pounds`` and ``chocs`` are implicit arguments to ``machineLoop``, but "
"are used by the definition, so add them to its type:"
msgstr ""

#: ../../source/typedd/typedd.rst:474 db32d227aeb34a79b7c98a3c81b85067
msgid "Chapter 14"
msgstr ""

#: ../../source/typedd/typedd.rst:476 9222fefefe1b488eb8ec7b2639faa759
msgid "In ``ATM.idr``:"
msgstr ""

#: ../../source/typedd/typedd.rst:478 1bdd1956d96b4cec98d9bda3b7132a3a
msgid ""
"Add ``import Data.String`` and change ``cast`` to ``stringToNatOrZ`` in "
"``runATM``"
msgstr ""

#: ../../source/typedd/typedd.rst:480 43c8ffe372c441c9a649f89f8176f2ec
msgid "In ``Hangman.idr``, add:"
msgstr ""

#: ../../source/typedd/typedd.rst:488 cd1dedc28de24745ae49ebf6709ca94e
msgid "In ``Loop`` namespace, export ``GameLoop`` type and its data constructors:"
msgstr ""

#: ../../source/typedd/typedd.rst:500 25f15efff13b4963828e3b1c29082fdd
msgid ""
"``letters`` and ``guesses`` are used by ``gameLoop``, so they need to be "
"written in its type:"
msgstr ""

#: ../../source/typedd/typedd.rst:507 c0ab126c0f9340c2a23e4d484b64e0de
msgid ""
"In ``Game`` type, add an implicit argument ``letters`` to ``InProgress`` "
"data constructor:"
msgstr ""

#: ../../source/typedd/typedd.rst:528 ffec1e9f25884fde8a88707680f2ea16
msgid "Chapter 15"
msgstr ""

#: ../../source/typedd/typedd.rst:530 031104a07ec1478c9cf5b7ac95ee43a5
msgid "Todo"
msgstr ""

#: ../../source/typedd/typedd.rst:532 2f9693de70dc4b0cb04999f14a947228
msgid "This chapter."
msgstr ""

