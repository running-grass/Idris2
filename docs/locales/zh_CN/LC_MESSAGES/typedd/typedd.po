# SOME DESCRIPTIVE TITLE.
# Copyright (C) 2020, The Idris Community
# This file is distributed under the same license as the Idris2 package.
# FIRST AUTHOR <EMAIL@ADDRESS>, 2022.
#
#, fuzzy
msgid ""
msgstr ""
"Project-Id-Version: Idris2 0.0\n"
"Report-Msgid-Bugs-To: \n"
"POT-Creation-Date: 2022-07-12 09:10+0800\n"
"PO-Revision-Date: YEAR-MO-DA HO:MI+ZONE\n"
"Last-Translator: FULL NAME <EMAIL@ADDRESS>\n"
"Language-Team: LANGUAGE <LL@li.org>\n"
"MIME-Version: 1.0\n"
"Content-Type: text/plain; charset=utf-8\n"
"Content-Transfer-Encoding: 8bit\n"
"Generated-By: Babel 2.10.3\n"

#: ../../source/typedd/typedd.rst:4 5a9c2b7f6e354198ac0d7caef57b8bf5
msgid "Type Driven Development with Idris: Updates Required"
msgstr ""

#: ../../source/typedd/typedd.rst:6 af6dea83a0b4403c86d445d7ec48389c
msgid ""
"The code in the book `Type-Driven Development with Idris "
"<https://www.manning.com/books/type-driven-development-with-idris>`_ by "
"Edwin Brady, available from `Manning <https://www.manning.com>`_,  will "
"mostly work in Idris 2, with some small changes as detailed in this "
"document. The updated code is also [going to be] part of the test suite "
"(see `tests/typedd-book "
"<https://github.com/edwinb/Idris2/tree/master/tests/typedd-book>`_ in the"
" Idris 2 source)."
msgstr ""

#: ../../source/typedd/typedd.rst:14 8698cd7320594c6d92ddf1eef4fe92bd
msgid ""
"If you are new to Idris, and learning from the book, we recommend working"
" through the first 3-4 chapters with Idris 1, to avoid the need to worry "
"about the changes described here. After that, refer to this document for "
"any necessary changes."
msgstr ""

#: ../../source/typedd/typedd.rst:20 d5a86225d9c24d1f9e5ec6e28505d9c5
msgid "Chapter 1"
msgstr ""

#: ../../source/typedd/typedd.rst:22 ca15a4a1f33d4d3d85f242bd72a10f6c
msgid "No changes necessary"
msgstr ""

#: ../../source/typedd/typedd.rst:25 b76025add90142b8aca7799513967c51
msgid "Chapter 2"
msgstr ""

#: ../../source/typedd/typedd.rst:27 38506161c1d147ecbd9ef86672236d7a
msgid ""
"The Prelude is smaller than Idris 1, and many functions have been moved "
"to the base libraries instead. So:"
msgstr ""

#: ../../source/typedd/typedd.rst:30 902adfa9b24e451ab24fe5459dff3549
msgid "In ``Average.idr``, add:"
msgstr ""

#: ../../source/typedd/typedd.rst:37 6fbca261a86c428ab946992ba600eb27
msgid "In ``AveMain.idr`` and ``Reverse.idr`` add:"
msgstr ""

#: ../../source/typedd/typedd.rst:44 94639b8f8d4748ac88a0ca7aef48ec9b
msgid "Chapter 3"
msgstr ""

#: ../../source/typedd/typedd.rst:46 075519f027724f9eb5bca3af6f17d628
msgid ""
"Unbound implicits have multiplicity 0, so we can't match on them at run-"
"time. Therefore, in ``Matrix.idr``, we need to change the type of "
"``createEmpties`` and ``transposeMat`` so that the length of the inner "
"vector is available to match on:"
msgstr ""

#: ../../source/typedd/typedd.rst:57 9906fbe54b9c4584af28d27a9eb982fc
msgid "Chapter 4"
msgstr ""

#: ../../source/typedd/typedd.rst:59 7884bf6d8af1452db2fd850c29ef1a87
msgid "For the reasons described above:"
msgstr ""

#: ../../source/typedd/typedd.rst:61 eda6b94131894459a0dca36694331f75
msgid ""
"In ``DataStore.idr``, add ``import System.REPL`` and ``import "
"Data.String``"
msgstr ""

#: ../../source/typedd/typedd.rst:62 f76d358599024f148f4cc34cb8f7724e
msgid "In ``SumInputs.idr``, add ``import System.REPL``"
msgstr ""

#: ../../source/typedd/typedd.rst:63 dfb3504ce64b4329819b844f72a8f3d7
msgid "In ``TryIndex.idr``, add an implicit argument:"
msgstr ""

#: ../../source/typedd/typedd.rst:69 25cbd0d5cb9b4e3ba084954c8916a363
msgid "In exercise 5 of 4.2, add an implicit argument:"
msgstr ""

#: ../../source/typedd/typedd.rst:76 2e656f6a600540f990bdc5006833dc35
msgid "Chapter 5"
msgstr ""

#: ../../source/typedd/typedd.rst:78 5d36763a433746869d869b808adf6d80
msgid ""
"There is no longer a ``Cast`` instance from ``String`` to ``Nat``, "
"because its behaviour of returing Z if the ``String`` wasn't numeric was "
"thought to be confusing and potentially error prone. Instead, there is "
"``stringToNatOrZ`` in ``Data.String`` which at least has a clearer name. "
"So:"
msgstr ""

#: ../../source/typedd/typedd.rst:83 29e8f4e20df1496e8ea15248bcfc31b6
msgid ""
"In ``Loops.idr`` and ``ReadNum.idr`` add ``import Data.String`` and "
"change ``cast`` to ``stringToNatOrZ``"
msgstr ""

#: ../../source/typedd/typedd.rst:86 b69c438b3d6f4e6cb4a9364bb892b55d
msgid ""
"In ``ReadNum.idr``, since functions must now be ``covering`` by default, "
"add a ``partial`` annotation to ``readNumber_v2``."
msgstr ""

#: ../../source/typedd/typedd.rst:90 2ec41ab52ff4434abed377d8d7e65b5c
msgid "Chapter 6"
msgstr ""

#: ../../source/typedd/typedd.rst:92 9397434ad2394da690749f6d9bc278b8
msgid ""
"In ``DataStore.idr`` and ``DataStoreHoles.idr``, add ``import "
"Data.String`` and ``import System.REPL``. Also in ``DataStore.idr``, the "
"``schema`` argument to ``display`` is required for matching, so change "
"the type to:"
msgstr ""

#: ../../source/typedd/typedd.rst:100 85dfb8061770423ab60ea6d6a5922733
msgid "In ``TypeFuns.idr`` add ``import Data.String``"
msgstr ""

#: ../../source/typedd/typedd.rst:103 6f1604900949499b9c27233fd91ae891
msgid "Chapter 7"
msgstr ""

#: ../../source/typedd/typedd.rst:105 62102bf961db407289903ff81090badd
msgid ""
"``Abs`` is now a separate interface from ``Neg``. So, change the type of "
"``eval`` to include ``Abs`` specifically:"
msgstr ""

#: ../../source/typedd/typedd.rst:112 0ff1de4fe8694dc5885f2ab4f0549186
msgid ""
"Also, take ``abs`` out of the ``Neg`` implementation for ``Expr`` and add"
" an implementation of ``Abs`` as follows:"
msgstr ""

#: ../../source/typedd/typedd.rst:121 a94caa148ca744b09db3fc9d6ef8e97a
msgid "Chapter 8"
msgstr ""

#: ../../source/typedd/typedd.rst:123 17050e53c0de45fe8c45cf84ac8bc696
msgid "In ``AppendVec.idr``, add ``import Data.Nat`` for the ``Nat`` proofs"
msgstr ""

#: ../../source/typedd/typedd.rst:125 4cf68b4edc9d4921b1548ec0a0dff729
msgid ""
"``cong`` now takes an explicit argument for the function to apply. So, in"
" ``CheckEqMaybe.idr`` change the last case to:"
msgstr ""

#: ../../source/typedd/typedd.rst:134 b42c4b4f0fce4cb8b9f732797b09a91c
msgid "A similar change is necessary in ``CheckEqDec.idr``."
msgstr ""

#: ../../source/typedd/typedd.rst:136 f1708db7103f43c49b5048119ca0da95
msgid ""
"In ``ExactLength.idr``, the ``m`` argument to ``exactLength`` is needed "
"at run time, so change its type to:"
msgstr ""

#: ../../source/typedd/typedd.rst:144 3e8bc0e0baeb44fea435eedaab9bb435
msgid ""
"A similar change is necessary in ``ExactLengthDec.idr``. Also, ``DecEq`` "
"is no longer part of the prelude, so add ``import Decidable.Equality``."
msgstr ""

#: ../../source/typedd/typedd.rst:147 ed4deaf6a787408186e23a463d4bfd2f
msgid "In ``ReverseVec.idr``, add ``import Data.Nat`` for the ``Nat`` proofs."
msgstr ""

#: ../../source/typedd/typedd.rst:149 90f1211e66794c2f90cdf79692ff51e8
msgid ""
"In ``Void.idr``, since functions must now be ``covering`` by default, add"
" a ``partial`` annotation to ``nohead`` and its helper function "
"``getHead``."
msgstr ""

#: ../../source/typedd/typedd.rst:152 80a1e97348a44b52ab677916064cf782
msgid ""
"In Exercise 2 of 8.2.5, the definition of ``reverse'`` should be changed "
"to ``reverse' : Vect k a -> Vect m a -> Vect (k + m) a``, because the "
"``n`` in ``reverse'`` is otherwise bound to the same value as the ``n`` "
"in the signature of ``myReverse``."
msgstr ""

#: ../../source/typedd/typedd.rst:157 2b89086daa294ef3ae75368634830338
msgid "Chapter 9"
msgstr ""

#: ../../source/typedd/typedd.rst:159 c0b8eea633bf4d3c9ffcb65fc54cce44
msgid "In ``ElemType.idr``, add ``import Decidable.Equality``"
msgstr ""

#: ../../source/typedd/typedd.rst:161 6d49bfe586654a09b746859955ec8598
msgid "In ``Elem.idr``, add ``import Data.Vect.Elem``"
msgstr ""

#: ../../source/typedd/typedd.rst:163 cbcebfbdaeb24fb48277024dfab358ba
msgid "In ``Hangman.idr``:"
msgstr ""

#: ../../source/typedd/typedd.rst:165 ab94d2926bff4aa790850846a26237a0
msgid ""
"Add ``import Data.String``, ``import Data.Vect.Elem`` and ``import "
"Decidable.Equality``"
msgstr ""

#: ../../source/typedd/typedd.rst:166 ../../source/typedd/typedd.rst:518
#: c9df27d5b5094fd0ac264ed763be3a3b f2263c11e24845aebe3f277d95606649
msgid ""
"``removeElem`` pattern matches on ``n``, so it needs to be written in its"
" type:"
msgstr ""

#: ../../source/typedd/typedd.rst:176 8fd9bde71e9f44c8a58002abd628e7f5
msgid ""
"``letters`` is used by ``processGuess``, because it's passed to "
"``removeElem``:"
msgstr ""

#: ../../source/typedd/typedd.rst:185 c9113cf610e2473e9db7b21dfe8fa3e6
msgid ""
"``guesses`` and ``letters`` are implicit arguments to ``game``, but are "
"used by the definition, so add them to its type:"
msgstr ""

#: ../../source/typedd/typedd.rst:193 96b0b48f87254ba2a50bf4cb0d288a30
msgid "In ``RemoveElem.idr``"
msgstr ""

#: ../../source/typedd/typedd.rst:195 ed6167963ba54693a8b573e11188cbc3
msgid "Add ``import Data.Vect.Elem``"
msgstr ""

#: ../../source/typedd/typedd.rst:196 8cfb58ea25cf41abb4154acb98f2947e
msgid "``removeElem`` needs to be updated as above."
msgstr ""

#: ../../source/typedd/typedd.rst:199 ddecc4247e00431ea8fbb657d9bf94ff
msgid "Chapter 10"
msgstr ""

#: ../../source/typedd/typedd.rst:201 e82d7b7045f540778494d2daf7621381
msgid ""
"Lots of changes necessary here, at least when constructing views, due to "
"Idris 2 having a better (that is, more precise and correct!) "
"implementation of unification, and the rules for recursive ``with`` "
"application being tightened up."
msgstr ""

#: ../../source/typedd/typedd.rst:205 aea383539b074d5da9036af7f01eb182
msgid "In ``MergeSort.idr``, add ``import Data.List``"
msgstr ""

#: ../../source/typedd/typedd.rst:207 23a68a2b660e46bdb407101d2a78e5a6
msgid ""
"In ``MergeSortView.idr``, add ``import Data.List``, and make the "
"arguments to the views explicit:"
msgstr ""

#: ../../source/typedd/typedd.rst:220 6c33ca1c8736494b88993b6260a9688d
msgid ""
"In the problem 1 of exercise 10-1, the ``rest`` argument of the data "
"constructor ``Exact`` of ``TakeN`` must be made explicit."
msgstr ""

#: ../../source/typedd/typedd.rst:229 04037d03bde94d2ca7263ac083591392
msgid ""
"In ``SnocList.idr``, in ``my_reverse``, the link between ``Snoc rec`` and"
" ``xs ++ [x]`` needs to be made explicit. Idris 1 would happily decide "
"that ``xs`` and ``x`` were the relevant implicit arguments to ``Snoc`` "
"but this was little more than a guess based on what would make it type "
"check, whereas Idris 2 is more precise in what it allows to unify. So, "
"``x`` and ``xs`` need to be explicit arguments to ``Snoc``:"
msgstr ""

#: ../../source/typedd/typedd.rst:242 e0b3e0a4b3d34586a8db68bbb6d8be4b
msgid "Correspondingly, they need to be explicit when matching. For example:"
msgstr ""

#: ../../source/typedd/typedd.rst:251 b2e334dde98845d8a5912e7aa9a9e706
msgid ""
"Similar changes are necessary in ``snocListHelp`` and "
"``my_reverse_help``. See tests/typedd-book/chapter10/SnocList.idr for the"
" full details."
msgstr ""

#: ../../source/typedd/typedd.rst:254 34cc9f7f015b48a4863b6c86e973c8ee
msgid ""
"Also, in ``snocListHelp``, ``input`` is used at run time so needs to be "
"bound in the type:"
msgstr ""

#: ../../source/typedd/typedd.rst:262 8da3e11bc95b4fe2b6236d95e8acbfd0
msgid ""
"It's no longer necessary to give ``{input}`` explicitly in the patterns "
"for ``snocListHelp``, although it's harmless to do so."
msgstr ""

#: ../../source/typedd/typedd.rst:265 2352024eff6f4f1bae56eb6127868ac5
msgid ""
"In ``IsSuffix.idr``, the matching has to be written slightly differently."
" The recursive with application in Idris 1 probably shouldn't have "
"allowed this! Note that the ``Snoc`` - ``Snoc`` case has to be written "
"first otherwise Idris generates a case tree splitting on ``input1`` and "
"``input2`` instead of the ``SnocList`` objects and this leads to a lot of"
" cases being detected as missing."
msgstr ""

#: ../../source/typedd/typedd.rst:280 d2ca08dc5978465d91e98265f4ee7a86
msgid ""
"This doesn't yet get past the totality checker, however, because it "
"doesn't know about looking inside pairs."
msgstr ""

#: ../../source/typedd/typedd.rst:283 38254de8dc734ad384ab517f19e9f3ff
msgid ""
"For the ``VList`` view in the exercise 4 after Chapter 10-2 ``import "
"Data.List.Views.Extra`` from ``contrib`` library."
msgstr ""

#: ../../source/typedd/typedd.rst:285 a69bdfe7d24f4135a75375c95a720ae3
msgid ""
"In ``DataStore.idr``: Well this is embarrassing - I've no idea how Idris "
"1 lets this through! I think perhaps it's too \"helpful\" when solving "
"unification problems. To fix it, add an extra parameter ``schema`` to "
"``StoreView``, and change the type of ``SNil`` to be explicit that the "
"``empty`` is the function defined in ``DataStore``. Also add ``entry`` "
"and ``store`` as explicit arguments to ``SAdd``:"
msgstr ""

#: ../../source/typedd/typedd.rst:298 9cf1ae6770574dbd9eaf4e15cfea9269
msgid ""
"Since ``size`` is as explicit argument in the ``DataStore`` record, it "
"also needs to be relevant in the type of ``storeViewHelp``:"
msgstr ""

#: ../../source/typedd/typedd.rst:307 f3566eac165f4e32987eae52a47df0b2
msgid "In ``TestStore.idr``:"
msgstr ""

#: ../../source/typedd/typedd.rst:309 9ac4aa3dd21444798fcaf950ed3640bf
msgid ""
"In ``listItems``, ``empty`` needs to be ``DataStore.empty`` to be "
"explicit that you mean the function"
msgstr ""

#: ../../source/typedd/typedd.rst:311 dd921fccf16145348f948a6e34372130
msgid ""
"In ``filterKeys``, there is an error in the ``SNil`` case, which wasn't "
"caught because of the type of ``SNil`` above. It should be:"
msgstr ""

#: ../../source/typedd/typedd.rst:319 8c604fceb8f74595bca0ddc23ff169ec
msgid "Chapter 11"
msgstr ""

#: ../../source/typedd/typedd.rst:321 6c8bc103f69d43d09f4d82f043335a95
msgid "In ``Streams.idr`` add ``import Data.Stream`` for ``iterate``."
msgstr ""

#: ../../source/typedd/typedd.rst:323 0a1908d18d0c459e933461c45ace5b4f
msgid ""
"In ``Arith.idr`` and ``ArithTotal.idr``, the ``Divides`` view now has "
"explicit arguments for the dividend and remainder, so they need to be "
"explicit in ``bound``:"
msgstr ""

#: ../../source/typedd/typedd.rst:333 5b3d45ef9f81461faed059b68b6dd2b8
msgid ""
"In addition,  ``import Data.Bits`` has to be added for ``shiftR``, which "
"now uses a safer type for the number of shifts:"
msgstr ""

#: ../../source/typedd/typedd.rst:343 e29b30957f314a539121a8438e31762c
msgid ""
"In ``ArithCmd.idr``, update ``DivBy``, ``randoms``, and ``import "
"Data.Bits`` as above. Also add ``import Data.String`` for "
"``String.toLower``."
msgstr ""

#: ../../source/typedd/typedd.rst:346 b8e80e4b30d3433c99ee0e13e2dea588
msgid ""
"In ``ArithCmd.idr``, update ``DivBy``, ``randoms``, ``import Data.Bits`` "
"and ``import Data.String`` as above.  Also, since export rules are per-"
"namespace now, rather than per-file, you need to export ``(>>=)`` from "
"the namespaces ``CommandDo`` and ``ConsoleDo``."
msgstr ""

#: ../../source/typedd/typedd.rst:351 50bb2d7e716440408eea8151cc9165e4
msgid ""
"In ``ArithCmdDo.idr``, since ``(>>=)`` is ``export``, ``Command`` and "
"``ConsoleIO`` also have to be ``export``. Also, update ``randoms`` and "
"``import Data.Bits`` as above."
msgstr ""

#: ../../source/typedd/typedd.rst:354 a08a9ecb29234bddbf3dcf92112d2263
msgid "In ``StreamFail.idr``, add a ``partial`` annotation to ``labelWith``."
msgstr ""

#: ../../source/typedd/typedd.rst:356 eff427e032c84258aef50dbe69a1b6ca
msgid ""
"In order to support ``do`` notation for custom types (like ``RunIO``), "
"you need to implement ``(>>=)`` for binding values in a ``do`` block and "
"``(>>)`` for sequencing computations without binding values. See  `tests "
"<https://github.com/idris-lang/Idris2/tree/master/tests/typedd-"
"book/chapter11>`_ for complete implementations."
msgstr ""

#: ../../source/typedd/typedd.rst:358 46224a21562d473a9600c4a58e90f413
msgid ""
"For instance, the following do block is desugared to ``foo >>= (\\x => "
"bar >>= (\\y => baz x y))``:"
msgstr ""

#: ../../source/typedd/typedd.rst:367 158c232cfea34048849c70c40cb516b4
msgid "while the following is converted to ``foo >> bar >> baz``:"
msgstr ""

#: ../../source/typedd/typedd.rst:377 a4c4ecdbd8b8442795dca91a1ed96905
msgid "Chapter 12"
msgstr ""

#: ../../source/typedd/typedd.rst:379 4b7d42d9ed024a6eb08c4fd915e2d22d
msgid ""
"For reasons described above: In ``ArithState.idr``, add ``import "
"Data.String`` and ``import Data.Bits`` and update ``randoms``.  Also the "
"``(>>=)`` operators need to be set as ``export`` since they are in their "
"own namespaces, and in ``getRandom``, ``DivBy`` needs to take additional "
"arguments ``div`` and ``rem``."
msgstr ""

#: ../../source/typedd/typedd.rst:385 d57aecf7be74415a968ed484f1f09570
msgid ""
"In ``ArithState.idr``, since ``(>>=)`` is ``export``, ``Command`` and "
"``ConsoleIO`` also have to be ``export``."
msgstr ""

#: ../../source/typedd/typedd.rst:388 1258c7d585d14c4db5508e76077fc960
msgid ""
"evalState from Control.Monad.State now takes the ``stateType`` argument "
"first."
msgstr ""

#: ../../source/typedd/typedd.rst:391 08a849fc0d48476c9a860814b94590a9
msgid "Chapter 13"
msgstr ""

#: ../../source/typedd/typedd.rst:393 63ec7742921148b2b94cd58ea19ec0b5
msgid "In ``StackIO.idr``:"
msgstr ""

#: ../../source/typedd/typedd.rst:395 2201159d1f2a4920b883106a70fbaf31
msgid ""
"``tryAdd`` pattern matches on ``height``, so it needs to be written in "
"its type:"
msgstr ""

#: ../../source/typedd/typedd.rst:402 64d09a06955e4a34a170d8181d849ec7
msgid ""
"``height`` is also an implicit argument to ``stackCalc``, but is used by "
"the definition, so add it to its type:"
msgstr ""

#: ../../source/typedd/typedd.rst:409 0d0ab7c6b1a147329cb154f0c29d1b55
msgid "In ``StackDo`` namespace, export ``(>>=)``:"
msgstr ""

#: ../../source/typedd/typedd.rst:419 fb836c2325a94d93b3215bb78f50de52
msgid "In ``Vending.idr``:"
msgstr ""

#: ../../source/typedd/typedd.rst:421 bf6be2b266ba4353ab77b33dd6d74a03
msgid ""
"Add ``import Data.String`` and change ``cast`` to ``stringToNatOrZ`` in "
"``strToInput``"
msgstr ""

#: ../../source/typedd/typedd.rst:422 00a74899532447a2b087e5b79cac90cd
msgid ""
"In ``MachineCmd`` type, add an implicit argument to ``(>>=)`` data "
"constructor:"
msgstr ""

#: ../../source/typedd/typedd.rst:431 882c88246c4d4a9a9982e348bf146321
msgid ""
"In ``MachineIO`` type, add an implicit argument to ``Do`` data "
"constructor:"
msgstr ""

#: ../../source/typedd/typedd.rst:440 34486a12ec8c4316840989c2078a4ecd
msgid ""
"``runMachine`` pattern matches on ``inState``, so it needs to be written "
"in its type:"
msgstr ""

#: ../../source/typedd/typedd.rst:447 c6201f8bbc154693b197ae1d4bcff802
msgid ""
"In ``MachineDo`` namespace, add an implicit argument to ``(>>=)`` and "
"export it:"
msgstr ""

#: ../../source/typedd/typedd.rst:458 d5e182584bd044efa0d1ed9ffbf46cc0
msgid ""
"``vend`` and ``refill`` pattern match on ``pounds`` and ``chocs``, so "
"they need to be written in their type:"
msgstr ""

#: ../../source/typedd/typedd.rst:466 ff5fd34ecd9c4bb8aa48fd04907a44ef
msgid ""
"``pounds`` and ``chocs`` are implicit arguments to ``machineLoop``, but "
"are used by the definition, so add them to its type:"
msgstr ""

#: ../../source/typedd/typedd.rst:474 442b057c56f349ea8a41dd7a480a71d4
msgid "Chapter 14"
msgstr ""

#: ../../source/typedd/typedd.rst:476 e5b1b32127ac407e84a7576d487fc245
msgid "In ``ATM.idr``:"
msgstr ""

#: ../../source/typedd/typedd.rst:478 69e0fbd85372457d9c6b534593a083fa
msgid ""
"Add ``import Data.String`` and change ``cast`` to ``stringToNatOrZ`` in "
"``runATM``"
msgstr ""

#: ../../source/typedd/typedd.rst:480 f852ccd3041041b7a85bf716fb8253c5
msgid "In ``Hangman.idr``, add:"
msgstr ""

#: ../../source/typedd/typedd.rst:488 3b6110233bbb41668fe972a5f7b879c1
msgid "In ``Loop`` namespace, export ``GameLoop`` type and its data constructors:"
msgstr ""

#: ../../source/typedd/typedd.rst:500 00d126b50f054644aae2a473c4c180e8
msgid ""
"``letters`` and ``guesses`` are used by ``gameLoop``, so they need to be "
"written in its type:"
msgstr ""

#: ../../source/typedd/typedd.rst:507 d785e84211b341e59e2cec6956ab52fc
msgid ""
"In ``Game`` type, add an implicit argument ``letters`` to ``InProgress`` "
"data constructor:"
msgstr ""

#: ../../source/typedd/typedd.rst:528 0e363f36d8284569875704c6da4f5a26
msgid "Chapter 15"
msgstr ""

#: ../../source/typedd/typedd.rst:530 c6183945707d44438d8cc5cfe52a695e
msgid "Todo"
msgstr ""

#: ../../source/typedd/typedd.rst:532 a1692ecb0df34c98ba925908b08fa65c
msgid "This chapter."
msgstr ""

