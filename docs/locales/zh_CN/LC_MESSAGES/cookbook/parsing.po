# SOME DESCRIPTIVE TITLE.
# Copyright (C) 2020, The Idris Community
# This file is distributed under the same license as the Idris2 package.
# FIRST AUTHOR <EMAIL@ADDRESS>, 2022.
#
#, fuzzy
msgid ""
msgstr ""
"Project-Id-Version: Idris2 0.0\n"
"Report-Msgid-Bugs-To: \n"
"POT-Creation-Date: 2022-07-12 09:10+0800\n"
"PO-Revision-Date: YEAR-MO-DA HO:MI+ZONE\n"
"Last-Translator: FULL NAME <EMAIL@ADDRESS>\n"
"Language-Team: LANGUAGE <LL@li.org>\n"
"MIME-Version: 1.0\n"
"Content-Type: text/plain; charset=utf-8\n"
"Content-Transfer-Encoding: 8bit\n"
"Generated-By: Babel 2.10.3\n"

#: ../../source/cookbook/parsing.rst:2 ce035aa7b8ef4883b8a12636d960b4eb
msgid "Parsing"
msgstr ""

#: ../../source/cookbook/parsing.rst:4 e99b85c5dcf243a9b89228e4a8281b46
msgid ""
"Idris 2 comes with a Lexing and a Parsing library built into the "
"``contrib`` package."
msgstr ""

#: ../../source/cookbook/parsing.rst:6 fc90a964d32541058c97f0c36d32974a
msgid ""
"For this cookbook, we will write a very simple parser for a lambda "
"calculus parser that will accept the following language:"
msgstr ""

#: ../../source/cookbook/parsing.rst:13 dcdb85294b3a424cb6681b8a36824555
msgid ""
"Once we write a lambda calculus parser, we will also see how we can take "
"advantage of a powerful built in expression parser in Idris 2 to write a "
"small calculator that should be smart enough to parse the following "
"expression:"
msgstr ""

#: ../../source/cookbook/parsing.rst:22 c19896601c5c4a9da4128d6398fe5c57
msgid "Lexer"
msgstr ""

#: ../../source/cookbook/parsing.rst:24 3e31b49053a241a7b405756278d3ce15
msgid ""
"The main lexer module is under ``Text.Lexer``. This module contains "
"``toTokenMap`` which is a function that converts a ``List (Lexer, k) -> "
"TokenMap (Token k)`` where ``k`` is a token kind. This function could be "
"used for simple lexer to token mappings. The module also includes high "
"level lexers for specifying quantity and common programming primitives "
"like ``alphas``, ``intLit``, ``lineComment`` and ``blockComment``."
msgstr ""

#: ../../source/cookbook/parsing.rst:30 9e7721c061b14a478925f886099aee70
msgid ""
"The ``Text.Lexer`` module also reexports ``Text.Lexer.Core``, "
"``Text.Quantity`` and ``Text.Token``."
msgstr ""

#: ../../source/cookbook/parsing.rst:32 3e836e194a0d4d3f89008fd8f84d3fd9
msgid ""
"``Text.Lexer.Core`` provides the building blocks of the lexer, including "
"a type called ``Recognise`` which is the underlying data type for the "
"lexer. The other important function that this module provides is a "
"``lex`` which takes in a lexer and returns the tokens."
msgstr ""

#: ../../source/cookbook/parsing.rst:36 a04d7628d67144c192308c67e06a3fed
msgid ""
"``Text.Quantity`` provides a data type ``Quantity`` which can be used "
"with certain lexers to specify how many times something is expected to "
"appear."
msgstr ""

#: ../../source/cookbook/parsing.rst:39 61baf5580d484bf891a0c8eb66c72c97
msgid ""
"``Text.Token`` provides a data type ``Token`` that represents a parsed "
"token, its kind and the text. This module also provides an important "
"interface called ``TokenKind`` which tells the lexer how to map token "
"kinds to Idris 2 types and how to convert each kind from a string to a "
"value."
msgstr ""

#: ../../source/cookbook/parsing.rst:44 c8bd50e01b0449ba843e2ab869712092
msgid "Parser"
msgstr ""

#: ../../source/cookbook/parsing.rst:46 4a6eda3d7ff84958a0010b5a66ca5c40
msgid ""
"The main parser module is under ``Text.Parser``. This module contains "
"different grammar parsers, the main one being ``match`` which takes a "
"``TokenKind`` and returns the value as defined in the ``TokenKind`` "
"interface. There are other grammar parsers as well, but for our example, "
"we will only be using ``match``."
msgstr ""

#: ../../source/cookbook/parsing.rst:50 66eca731bd454227a8ad710bdcc33c69
msgid ""
"The ``Text.Parser`` module reexports ``Text.Parser.Core``, "
"``Text.Quantity`` and ``Text.Token``."
msgstr ""

#: ../../source/cookbook/parsing.rst:52 d215b59170434bf39454b3e0a4c1b24d
msgid ""
"``Text.Parser.Core`` provides the building blocks of the parser, "
"including a type called ``Grammar`` which is the underlying data type for"
" the parser. The other important function that this module provides is "
"``parse`` which takes in a ``Grammar`` and returns the parsed expression."
msgstr ""

#: ../../source/cookbook/parsing.rst:56 287037a5286d489e8be22a29cbe7aeb2
msgid ""
"We covered ``Text.Quantity`` and ``Text.Token`` in the Lexer section so "
"we're not going to repeat what they do here."
msgstr ""

#: ../../source/cookbook/parsing.rst:60 9fee2ae4fc8243b4bbd5460977af83aa
msgid "Lambda Calculus Lexer & Parser"
msgstr ""

#: ../../source/cookbook/parsing.rst:62 f5ef2e5b54e94aad992800d38f34dbf2
msgid "LambdaCalculus.idr"
msgstr ""

#: ../../source/cookbook/parsing.rst:231 e08fad9a107c4eb1aaabe3f650a2858d
msgid "Testing out our parser gives us back the following output:"
msgstr ""

#: ../../source/cookbook/parsing.rst:240 85b91586fa9f419298ce3831a280ccb9
msgid "Expression Parser"
msgstr ""

#: ../../source/cookbook/parsing.rst:242 a41c5712bac64eb7afb4adfa1433e1b3
msgid ""
"Idris 2 also comes with a very convenient expression parser that is aware"
" of precedence and associativity in ``Text.Parser.Expression``."
msgstr ""

#: ../../source/cookbook/parsing.rst:245 c461e0bf13d94efc8a98961e69710f14
msgid ""
"The main function called ``buildExpressionParser`` takes in an "
"``OperatorTable`` and a ``Grammar`` that represents the terms, and "
"returns a parsed expression. The magic comes from the ``OperatorTable`` "
"since this table defines all the operators, the grammars for those "
"operators, the precedence, and the associativity."
msgstr ""

#: ../../source/cookbook/parsing.rst:250 9bd1ded552e64afb9e58129e3519258d
msgid ""
"An ``OperatorTable`` is a list of lists containing the ``Op`` type. The "
"``Op`` type allows you to specify ``Prefix``, ``Postfix``, and ``Infix`` "
"operators along with their grammars. ``Infix`` also contains the "
"associativity called ``Assoc`` which can specify left associativity or "
"``AssocLeft``, right associativity assoc or ``AssocRight`` and as being "
"non-associative or ``AssocNone``."
msgstr ""

#: ../../source/cookbook/parsing.rst:255 b31352c7ee424deb99be690df030ac98
msgid "An example of an operator table we'll be using for the calculator is:"
msgstr ""

#: ../../source/cookbook/parsing.rst:268 85c09002c4dc4a04b436b4a535bd0d7a
msgid ""
"This table defines 4 operators for mulitiplication, division, addition "
"and subtraction. Mulitiplication and division show up in the first table "
"because they have higher precedence than addition and subtraction, which "
"show up in the second table. We're also defining them as infix operators,"
" with a specific grammar and all being left associative via "
"``AssocLeft``."
msgstr ""

#: ../../source/cookbook/parsing.rst:274 f3b0234d3b9741038834edd8bcecfdda
msgid "Building a Calculator"
msgstr ""

#: ../../source/cookbook/parsing.rst:276 d910b4fee84540eda3b9fe23b7d3f11a
msgid "Calculator.idr"
msgstr ""

#: ../../source/cookbook/parsing.rst:388 8342379b57e64e7b86a2205a70ff4369
msgid "Testing out our calculator gives us back the following output:"
msgstr ""

