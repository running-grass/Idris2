# SOME DESCRIPTIVE TITLE.
# Copyright (C) 2020, The Idris Community
# This file is distributed under the same license as the Idris2 package.
# FIRST AUTHOR <EMAIL@ADDRESS>, 2022.
#
#, fuzzy
msgid ""
msgstr ""
"Project-Id-Version: Idris2 0.0\n"
"Report-Msgid-Bugs-To: \n"
"POT-Creation-Date: 2022-07-12 09:08+0800\n"
"PO-Revision-Date: YEAR-MO-DA HO:MI+ZONE\n"
"Last-Translator: FULL NAME <EMAIL@ADDRESS>\n"
"Language-Team: LANGUAGE <LL@li.org>\n"
"MIME-Version: 1.0\n"
"Content-Type: text/plain; charset=utf-8\n"
"Content-Transfer-Encoding: 8bit\n"
"Generated-By: Babel 2.10.3\n"

#: ../../source/updates/updates.rst:5
msgid "Changes since Idris 1"
msgstr ""

#: ../../source/updates/updates.rst:7
msgid ""
"Idris 2 is mostly backwards compatible with Idris 1, with some minor "
"exceptions. This document describes the changes, approximately in order "
"of likelihood of encountering them in practice. New features are "
"described at the end, in Section :ref:`sect-new-features`."
msgstr ""

#: ../../source/updates/updates.rst:12
msgid ""
"The Section :ref:`typedd-index` describes how these changes affect the "
"code in the book `Type-Driven Development with Idris "
"<https://www.manning.com/books/type-driven-development-with-idris>`_ by "
"Edwin Brady, available from `Manning <https://www.manning.com>`_."
msgstr ""

#: ../../source/updates/updates.rst:17
msgid ""
"The documentation for Idris has been published under the Creative Commons"
" CC0 License. As such to the extent possible under law, *The Idris "
"Community* has waived all copyright and related or neighboring rights to "
"Documentation for Idris."
msgstr ""

#: ../../source/updates/updates.rst:22
msgid ""
"More information concerning the CC0 can be found online at: "
"http://creativecommons.org/publicdomain/zero/1.0/"
msgstr ""

#: ../../source/updates/updates.rst:25
msgid "New Core Language: Quantities in Types"
msgstr ""

#: ../../source/updates/updates.rst:27
msgid ""
"Idris 2 is based on `Quantitative Type Theory (QTT) <https://bentnib.org"
"/quantitative-type-theory.html>`_, a core language developed by Bob Atkey"
" and Conor McBride. In practice, this means that every variable in Idris "
"2 has a *quantity* associated with it. A quantity is one of:"
msgstr ""

#: ../../source/updates/updates.rst:32
msgid "``0``, meaning that the variable is *erased* at run time"
msgstr ""

#: ../../source/updates/updates.rst:33
msgid "``1``, meaning that the variable is used *exactly once* at run time"
msgstr ""

#: ../../source/updates/updates.rst:34
msgid "*Unrestricted*, which is the same behaviour as Idris 1"
msgstr ""

#: ../../source/updates/updates.rst:36
msgid ""
"For more details on this, see Section :ref:`sect-multiplicities`. In "
"practice, this might cause some Idris 1 programs not to type check in "
"Idris 2 due to attempting to use an argument which is erased at run time."
msgstr ""

#: ../../source/updates/updates.rst:41
msgid "Erasure"
msgstr ""

#: ../../source/updates/updates.rst:43
msgid ""
"In Idris, names which begin with a lower case letter are automatically "
"bound as implicit arguments in types, for example in the following "
"skeleton definition, ``n``, ``a`` and ``m`` are implicitly bound:"
msgstr ""

#: ../../source/updates/updates.rst:52
msgid ""
"One of the difficulties in compiling a dependently typed programming "
"language is deciding which arguments are used at run time and which can "
"safely be erased. More importantly, it's one of the difficulties when "
"programming: how can a programmer *know* when an argument will be erased?"
msgstr ""

#: ../../source/updates/updates.rst:57
msgid ""
"In Idris 2, a variable's quantity tells us whether it will be available "
"at run time or not. We can see the quantities of the variables in scope "
"in ``append_rhs`` by inspecting the hole at the REPL:"
msgstr ""

#: ../../source/updates/updates.rst:72
msgid ""
"The ``0`` next to ``m``, ``a`` and ``n`` mean that they are in scope, but"
" there will be ``0`` occurrences at run-time. That is, it is *guaranteed*"
" that they will be erased at run-time."
msgstr ""

#: ../../source/updates/updates.rst:76
msgid ""
"This does lead to some potential difficulties when converting Idris 1 "
"programs, if you are using implicit arguments at run time.  For example, "
"in Idris 1 you can get the length of a vector as follows:"
msgstr ""

#: ../../source/updates/updates.rst:85
msgid ""
"This might seem like a good idea, since it runs in constant time and "
"takes advantage of the type level information, but the trade off is that "
"``n`` has to be available at run time, so at run time we always need the "
"length of the vector to be available if we ever call ``vlen``. Idris 1 "
"can infer whether the length is needed, but there's no easy way for a "
"programmer to be sure."
msgstr ""

#: ../../source/updates/updates.rst:91
msgid "In Idris 2, we need to state explicitly that ``n`` is needed at run time"
msgstr ""

#: ../../source/updates/updates.rst:98
msgid ""
"(Incidentally, also note that in Idris 2, names bound in types are also "
"available in the definition without explicitly rebinding them.)"
msgstr ""

#: ../../source/updates/updates.rst:101
msgid ""
"This also means that when you call ``vlen``, you need the length "
"available. For example, this will give an error"
msgstr ""

#: ../../source/updates/updates.rst:109
msgid "Idris 2 reports::"
msgstr ""

#: ../../source/updates/updates.rst:114
msgid ""
"This means that it needs to use ``m`` as an argument to pass to ``vlen "
"xs``, where it needs to be available at run time, but ``m`` is not "
"available in ``sumLengths`` because it has multiplicity ``0``."
msgstr ""

#: ../../source/updates/updates.rst:118
msgid ""
"We can see this more clearly by replacing the right hand side of "
"``sumLengths`` with a hole..."
msgstr ""

#: ../../source/updates/updates.rst:126
msgid "...then checking the hole's type at the REPL::"
msgstr ""

#: ../../source/updates/updates.rst:137
msgid ""
"Instead, we need to give bindings for ``m`` and ``n`` with unrestricted "
"multiplicity"
msgstr ""

#: ../../source/updates/updates.rst:145
msgid ""
"Remember that giving no multiplicity on a binder, as with ``m`` and ``n``"
" here, means that the variable has unrestricted usage."
msgstr ""

#: ../../source/updates/updates.rst:148
msgid ""
"If you're converting Idris 1 programs to work with Idris 2, this is "
"probably the biggest thing you need to think about. It is important to "
"note, though, that if you have bound implicits, such as..."
msgstr ""

#: ../../source/updates/updates.rst:156
msgid ""
"...then it's a good idea to make sure ``t`` really is needed, or "
"performance might suffer due to the run time building the instance of "
"``t`` unnecessarily!"
msgstr ""

#: ../../source/updates/updates.rst:159
msgid ""
"One final note on erasure: it is an error to try to pattern match on an "
"argument with multiplicity ``0``, unless its value is inferrable from "
"elsewhere. So, the following definition is rejected"
msgstr ""

#: ../../source/updates/updates.rst:169
msgid "This is rejected with the error::"
msgstr ""

#: ../../source/updates/updates.rst:174
msgid ""
"The following, however, is fine, because in ``sNot``, even though we "
"appear to match on the erased argument ``x``, its value is uniquely "
"inferrable from the type of the second argument"
msgstr ""

#: ../../source/updates/updates.rst:188
msgid ""
"Experience with Idris 2 so far suggests that, most of the time, as long "
"as you're using unbound implicits in your Idris 1 programs, they will "
"work without much modification in Idris 2. The Idris 2 type checker will "
"point out where you require an unbound implicit argument at run time - "
"sometimes this is both surprising and enlightening!"
msgstr ""

#: ../../source/updates/updates.rst:196
msgid "Linearity"
msgstr ""

#: ../../source/updates/updates.rst:198
msgid ""
"Full details on linear arguments with multiplicity ``1`` are given in "
"Section :ref:`sect-multiplicities`. In brief, the intuition behind "
"multiplicity ``1`` is that if we have a function with a type of the "
"following form..."
msgstr ""

#: ../../source/updates/updates.rst:206
msgid ""
"...then the guarantee given by the type system is that *if* ``f x`` *is "
"used exactly once, then* ``x`` *is used exactly once* in the process."
msgstr ""

#: ../../source/updates/updates.rst:210
msgid "Prelude and ``base`` libraries"
msgstr ""

#: ../../source/updates/updates.rst:212
msgid ""
"The Prelude in Idris 1 contained a lot of definitions, many of them "
"rarely necessary. The philosophy in Idris 2 is different. The (rather "
"vaguely specified) rule of thumb is that it should contain the basic "
"functions required by almost any non-trivial program."
msgstr ""

#: ../../source/updates/updates.rst:217
msgid ""
"This is a vague specification since different programmers will consider "
"different things absolutely necessary, but the result is that it "
"contains:"
msgstr ""

#: ../../source/updates/updates.rst:220
msgid "Anything the elaborator can desugar to (e.g. tuples, ``()``, ``=``)"
msgstr ""

#: ../../source/updates/updates.rst:221
msgid ""
"Basic types ``Bool``, ``Nat``, ``List``, ``Stream``, ``Dec``, ``Maybe``, "
"``Either``"
msgstr ""

#: ../../source/updates/updates.rst:223
msgid "The most important utility functions: ``id``, ``the``, composition, etc"
msgstr ""

#: ../../source/updates/updates.rst:224
msgid ""
"Interfaces for arithmetic and implementations for the primitives and "
"basic types"
msgstr ""

#: ../../source/updates/updates.rst:226
msgid "Basic ``Char`` and ``String`` manipulation"
msgstr ""

#: ../../source/updates/updates.rst:227
msgid ""
"``Show``, ``Eq``, ``Ord``, and implementations for all types in the "
"prelude"
msgstr ""

#: ../../source/updates/updates.rst:228
msgid "Interfaces and functions for basic proof (``cong``, ``Uninhabited``, etc)"
msgstr ""

#: ../../source/updates/updates.rst:229
msgid "``Semigroup``, ``Monoid``"
msgstr ""

#: ../../source/updates/updates.rst:230
msgid "``Functor``, ``Applicative``, ``Monad`` and related functions"
msgstr ""

#: ../../source/updates/updates.rst:231
msgid "``Foldable``, ``Alternative`` and ``Traversable``"
msgstr ""

#: ../../source/updates/updates.rst:232
msgid "``Range``, for list range syntax"
msgstr ""

#: ../../source/updates/updates.rst:233
msgid "Console ``IO``"
msgstr ""

#: ../../source/updates/updates.rst:235
msgid ""
"Anything which doesn't fit in here has been moved to the ``base`` "
"libraries. Among other places, you can find some of the functions which "
"used to be in the prelude in:"
msgstr ""

#: ../../source/updates/updates.rst:239
msgid "``Data.List`` and ``Data.Nat``"
msgstr ""

#: ../../source/updates/updates.rst:240
msgid "``Data.Maybe`` and ``Data.Either``"
msgstr ""

#: ../../source/updates/updates.rst:241
msgid ""
"``System.File`` and ``System.Directory``, (file management was previously"
" part of the prelude)"
msgstr ""

#: ../../source/updates/updates.rst:243
msgid "``Decidable.Equality``"
msgstr ""

#: ../../source/updates/updates.rst:246
msgid "Smaller Changes"
msgstr ""

#: ../../source/updates/updates.rst:249
msgid "Ambiguous Name Resolution"
msgstr ""

#: ../../source/updates/updates.rst:251
msgid ""
"Idris 1 worked very hard to resolve ambiguous names, by type, even if "
"this involved some complicated interaction with interface resolution. "
"This could sometimes be the cause of long type checking times. Idris 2 "
"simplifies this, at the cost of sometimes requiring more programmer "
"annotations on ambiguous names."
msgstr ""

#: ../../source/updates/updates.rst:257
msgid ""
"As a general rule, Idris 2 will be able to disambiguate between names "
"which have different concrete return types (such as data constructors), "
"or which have different concrete argument types (such as record "
"projections). It may struggle to resolve ambiguities if one name requires"
" an interface to be resolved. It will postpone resolution if a name can't"
" be resolved immediately, but unlike Idris 1, it won't attempt "
"significant backtracking. If you have deeply nested ambiguous names "
"(beyond a small threshold, default 3) Idris 2 will report an error.  You "
"can change this threshold with a directive, for example:"
msgstr ""

#: ../../source/updates/updates.rst:270
msgid ""
"However, in such circumstances it is almost certainly a better idea to "
"disambiguate explicitly."
msgstr ""

#: ../../source/updates/updates.rst:273
msgid ""
"Indeed in general, if you get an ambiguous name error, the best approach "
"is to give the namespace explicitly. You can also rebind names locally:"
msgstr ""

#: ../../source/updates/updates.rst:281
msgid ""
"One difficulty which remains is resolving ambiguous names where one "
"possibility is an interface method, and another is a concrete top level "
"function. For example, we may have:"
msgstr ""

#: ../../source/updates/updates.rst:290
msgid ""
"As a pragmatic choice, if type checking in a context where the more "
"concrete name is valid (``LinearIO.(>>=)`` here, so if type checking an "
"expression known to have type ``IO t`` for some ``t``), the more concrete"
" name will be chosen."
msgstr ""

#: ../../source/updates/updates.rst:294
msgid "This is somehow unsatisfying, so we may revisit this in future!"
msgstr ""

#: ../../source/updates/updates.rst:297
msgid "Modules, namespaces and export"
msgstr ""

#: ../../source/updates/updates.rst:299
msgid ""
"The visibility rules, as controlled by the ``private``, ``export`` and "
"``public export`` modifiers, now refer to the visibility of names from "
"other *namespaces*, rather than other *files*."
msgstr ""

#: ../../source/updates/updates.rst:303
msgid "So if you have the following, all in the same file..."
msgstr ""

#: ../../source/updates/updates.rst:321
msgid "...then ``bVisible`` can access ``aVisible``, but not ``aHidden``."
msgstr ""

#: ../../source/updates/updates.rst:323
msgid ""
"Records are, as before, defined in their own namespace, but fields are "
"always visible from the parent namespace."
msgstr ""

#: ../../source/updates/updates.rst:326
msgid ""
"Also, module names must now match the filename in which they're defined, "
"with the exception of the module ``Main``, which can be defined in a file"
" with any name."
msgstr ""

#: ../../source/updates/updates.rst:331
msgid "``%language`` pragmas"
msgstr ""

#: ../../source/updates/updates.rst:333
msgid ""
"There are several ``%language`` pragmas in Idris 1, which define various "
"experimental extensions. None of these are available in Idris 2, although"
" extensions may be defined in the future."
msgstr ""

#: ../../source/updates/updates.rst:337
msgid ""
"Also removed was the ``%access`` pragma for default visibility, use "
"visibility modifiers on each declaration instead."
msgstr ""

#: ../../source/updates/updates.rst:341
msgid "``let`` bindings"
msgstr ""

#: ../../source/updates/updates.rst:343
msgid ""
"``let`` bindings, i.e. expressions of the form ``let x = val in e`` have "
"slightly different behaviour. Previously, you could rely on the "
"computational behaviour of ``x`` in the scope of ``e``, so type checking "
"could take into account that ``x`` reduces to ``val``. Unfortunately, "
"this leads to complications with ``case`` and ``with`` clauses: if we "
"want to preserve the computational behaviour, we would need to make "
"significant changes to the way ``case`` and ``with`` are elaborated."
msgstr ""

#: ../../source/updates/updates.rst:351
msgid ""
"So, for simplicity and consistency (and, realistically, because I don't "
"have enough time to resolve the problem for ``case`` and ``with``) the "
"above expression ``let x = val in e`` is equivalent to ``(\\x => e) "
"val``."
msgstr ""

#: ../../source/updates/updates.rst:355
msgid ""
"So, ``let`` now effectively generalises a complex subexpression. If you "
"do need the computational behaviour of a definition, it is now possible "
"using local function definitions instead - see Section :ref:`sect-local-"
"defs` below."
msgstr ""

#: ../../source/updates/updates.rst:360
msgid ""
"Also, an alternative syntax ``let x := val in e`` is available. See "
"Section :ref:`sect-let-bindings` for more info."
msgstr ""

#: ../../source/updates/updates.rst:364
msgid "``auto``-implicits and Interfaces"
msgstr ""

#: ../../source/updates/updates.rst:366
msgid ""
"Interfaces and ``auto``-implicit arguments are similar, in that they "
"invoke an expression search mechanism to find the value of an argument. "
"In Idris 1, they were implemented separately, but in Idris 2, they use "
"the same mechanism. Consider the following *total* definition of "
"``fromMaybe``:"
msgstr ""

#: ../../source/updates/updates.rst:379
msgid ""
"Since interface resolution and ``auto``-implicits are now the same thing,"
" the type of ``fromMaybe`` can be written as:"
msgstr ""

#: ../../source/updates/updates.rst:386
msgid ""
"So now, the constraint arrow ``=>`` means that the argument will be found"
" by ``auto``-implicit search."
msgstr ""

#: ../../source/updates/updates.rst:389
msgid ""
"When defining a ``data`` type, there are ways to control how "
"``auto``-implicit search will proceed, by giving options to the data "
"type. For example:"
msgstr ""

#: ../../source/updates/updates.rst:399
msgid ""
"The ``search x`` option means that ``auto``-implicit search for a value "
"of type ``Elem t ts`` will start as soon as the type checker has resolved"
" the value ``t``, even if ``ts`` is still unknown."
msgstr ""

#: ../../source/updates/updates.rst:403
msgid ""
"By default, ``auto``-implicit search uses the constructors of a data type"
" as search hints. The ``noHints`` option on a data type turns this "
"behaviour off."
msgstr ""

#: ../../source/updates/updates.rst:407
#, python-format
msgid ""
"You can add your own search hints with the ``%hint`` option on a "
"function. For example:"
msgstr ""

#: ../../source/updates/updates.rst:423
msgid ""
"In this case, searching for ``MyShow Bool`` will find ``showBool``, as we"
" can see if we try evaluating ``myShow True`` at the REPL:"
msgstr ""

#: ../../source/updates/updates.rst:431
#, python-format
msgid ""
"In fact, this is how interfaces are elaborated. However, ``%hint`` should"
" be used with care. Too many hints can lead to a large search space!"
msgstr ""

#: ../../source/updates/updates.rst:435
msgid "Record fields"
msgstr ""

#: ../../source/updates/updates.rst:437
msgid "Record fields can now be accessed via a ``.``. For example, if you have:"
msgstr ""

#: ../../source/updates/updates.rst:446
msgid ""
"and you have a record ``fred : Person``, then you can use "
"``fred.firstName`` to access the ``firstName`` field."
msgstr ""

#: ../../source/updates/updates.rst:450
msgid "Totality and Coverage"
msgstr ""

#: ../../source/updates/updates.rst:452
#, python-format
msgid ""
"``%default covering`` is now the default status, so all functions must "
"cover all their inputs unless stated otherwise with a ``partial`` "
"annotation, or switching to ``%default partial`` (which is not "
"recommended - use a ``partial`` annotation instead to have the smallest "
"possible place where functions are partial)."
msgstr ""

#: ../../source/updates/updates.rst:461
msgid "Build artefacts"
msgstr ""

#: ../../source/updates/updates.rst:463
msgid ""
"This is not really a language change, but a change in the way Idris saves"
" checked files, and still useful to know. All checked modules are now "
"saved in a directory ``build/ttc``, in the root of the source tree, with "
"the directory structure following the directory structure of the source."
"  Executables are placed in ``build/exec``."
msgstr ""

#: ../../source/updates/updates.rst:470
msgid "Packages"
msgstr ""

#: ../../source/updates/updates.rst:472
msgid ""
"Dependencies on other packages are now indicated with the ``depends`` "
"field, the ``pkgs`` field is no longer recognized. Also, fields with URLS"
" or other string data (other than module or package names), must be "
"enclosed in double quotes. For example:"
msgstr ""

#: ../../source/updates/updates.rst:500
msgid "New features"
msgstr ""

#: ../../source/updates/updates.rst:502
msgid ""
"As well as the change to the core language to use quantitative type "
"theory, described above, there are several other new features."
msgstr ""

#: ../../source/updates/updates.rst:508
msgid "Local function definitions"
msgstr ""

#: ../../source/updates/updates.rst:510
msgid ""
"Functions can now be defined locally, using a ``let`` block. For example,"
" ``greet`` in the following example, which is defined in the scope of a "
"local variable ``x``:"
msgstr ""

#: ../../source/updates/updates.rst:525
msgid ""
"These ``let`` blocks can be used anywhere (in the middle of ``do`` blocks"
" as above, but also in any function, or in type declarations). ``where`` "
"blocks are now elaborated by translation into a local ``let``."
msgstr ""

#: ../../source/updates/updates.rst:529
msgid ""
"However, Idris no longer attempts to infer types for functions defined in"
" ``where`` blocks, because this was fragile. This may be reinstated, if "
"we can come up with a good, predictable approach."
msgstr ""

#: ../../source/updates/updates.rst:534
msgid "Scope of implicit arguments"
msgstr ""

#: ../../source/updates/updates.rst:536
msgid ""
"Implicit arguments in a type are now in scope in the body of a "
"definition. We've already seen this above, where ``n`` is in scope "
"automatically in the body of ``vlen``:"
msgstr ""

#: ../../source/updates/updates.rst:545
msgid ""
"This is important to remember when using ``where`` blocks, or local "
"definitions, since the names in scope will also be in scope when "
"declaring the *type* of the local definition. For example, the following "
"definition, where we attempt to define our own version of ``Show`` for "
"``Vect``, will fail to type check:"
msgstr ""

#: ../../source/updates/updates.rst:560
msgid ""
"This fails because ``n`` is in scope already, from the type of "
"``showVect``, in the type declaration for ``showBody``, and so the first "
"clause ``showBody []`` will fail to type check because ``[]`` has length "
"``Z``, not ``n``. We can fix this by locally binding ``n``:"
msgstr ""

#: ../../source/updates/updates.rst:573
msgid "Or, alternatively, using a new name:"
msgstr ""

#: ../../source/updates/updates.rst:583
msgid ""
"Idris 1 took a different approach here: names which were parameters to "
"data types were in scope, other names were not. The Idris 2 approach is, "
"we hope, more consistent and easier to understand."
msgstr ""

#: ../../source/updates/updates.rst:590
msgid "Function application syntax additions"
msgstr ""

#: ../../source/updates/updates.rst:592
msgid "From now on you can utilise the new syntax of function applications:"
msgstr ""

#: ../../source/updates/updates.rst:598
msgid "There are three additions here:"
msgstr ""

#: ../../source/updates/updates.rst:600
msgid "More than one argument can be written in braces, separated with commas:"
msgstr ""

#: ../../source/updates/updates.rst:624
msgid ""
"Arguments in braces can now correspond to explicit, implicit and auto "
"implicit dependent function types (``Pi`` types), provided the domain "
"type is named:"
msgstr ""

#: ../../source/updates/updates.rst:635
msgid ""
"Order of the arguments doesn't matter as long as they are in braces and "
"the names are distinct. It is better to stick named arguments in braces "
"at the end of your argument list, because regular unnamed explicit "
"arguments are processed first and take priority:"
msgstr ""

#: ../../source/updates/updates.rst:647
msgid ""
"This snippet won't type check, because \"b\" in ``badCall`` is passed "
"first, although logically we want it to be second. Idris will tell you "
"that it couldn't find a spot for ``a = \"a\"`` (because \"b\" took its "
"place), so the application is ill-formed."
msgstr ""

#: ../../source/updates/updates.rst:652
msgid ""
"Thus if you want to use the new syntax, it is worth naming your ``Pi`` "
"types."
msgstr ""

#: ../../source/updates/updates.rst:654
msgid ""
"Multiple explicit arguments can be \"skipped\" more easily with the "
"following syntax:"
msgstr ""

#: ../../source/updates/updates.rst:660
msgid "or"
msgstr ""

#: ../../source/updates/updates.rst:666
msgid "in case none of the named arguments are wanted."
msgstr ""

#: ../../source/updates/updates.rst:668
msgid "Examples:"
msgstr ""

#: ../../source/updates/updates.rst:689
msgid ""
"Last rule worth noting is the case of named applications with repeated "
"argument names, e.g:"
msgstr ""

#: ../../source/updates/updates.rst:703
msgid ""
"In this example the name ``x`` is given repeatedly to the ``Pi`` types of"
" the data constructor ``MkWeirdPair``. In order to deconstruct the "
"``WeirdPair a b`` in ``weirdSnd``, while writing the left-hand side of "
"the pattern-matching clause in a named manner (via the new syntax), we "
"have to rename the first occurrence of ``x`` to any fresh name or the "
"``_`` as we did. Then the definition type checks normally."
msgstr ""

#: ../../source/updates/updates.rst:708
msgid ""
"In general, duplicate names are bound sequentially on the left-hand side "
"and must be renamed for the pattern expression to be valid."
msgstr ""

#: ../../source/updates/updates.rst:710
msgid ""
"The situation is similar on the right-hand side of pattern-matching "
"clauses:"
msgstr ""

#: ../../source/updates/updates.rst:727
msgid ""
"Named arguments should be passed sequentially in the order they were "
"defined in the ``Pi`` types, regardless of their (imp)explicitness."
msgstr ""

#: ../../source/updates/updates.rst:731
msgid "Better inference"
msgstr ""

#: ../../source/updates/updates.rst:733
msgid ""
"In Idris 1, holes (that is, unification variables arising from implicit "
"arguments) were local to an expression, and if they were not resolved "
"while checking the expression, they would not be resolved at all. In "
"Idris 2, they are global, so inference works better. For example, we can "
"now say:"
msgstr ""

#: ../../source/updates/updates.rst:746
msgid ""
"The ``?``, incidentally, differs from ``_`` in that ``_`` will be bound "
"as an implicit argument if unresolved after checking the type of "
"``test``, but ``?`` will be left as a hole to be resolved later. "
"Otherwise, they can be used interchangeably."
msgstr ""

#: ../../source/updates/updates.rst:752
msgid "Dependent case"
msgstr ""

#: ../../source/updates/updates.rst:754
msgid ""
"``case`` blocks were available in Idris 1, but with some restrictions. "
"Having better inference means that ``case`` blocks work more effectively "
"in Idris 2, and dependent case analysis is supported."
msgstr ""

#: ../../source/updates/updates.rst:766
msgid ""
"The implicit arguments and original values are still available in the "
"body of the ``case``. Somewhat contrived, but the following is valid:"
msgstr ""

#: ../../source/updates/updates.rst:779
msgid "Record updates"
msgstr ""

#: ../../source/updates/updates.rst:781
msgid ""
"Dependent record updates work, provided that all relevant fields are "
"updated at the same time. Dependent record update is implemented via "
"dependent ``case`` blocks rather than by generating a specific update "
"function for each field as in Idris 1, so you will no longer get "
"mystifying errors when trying to update dependent records!"
msgstr ""

#: ../../source/updates/updates.rst:787
msgid ""
"For example, we can wrap a vector in a record, with an explicit length "
"field:"
msgstr ""

#: ../../source/updates/updates.rst:798
msgid ""
"Then, we can safely update the ``content``, provided we update the "
"``length`` correspondingly:"
msgstr ""

#: ../../source/updates/updates.rst:807
msgid "Another novelty - new update syntax (previous one still functional):"
msgstr ""

#: ../../source/updates/updates.rst:821
msgid ""
"The ``record`` keyword has been discarded for brevity, symbol ``:=`` "
"replaces ``=`` in order to not introduce any ambiguity."
msgstr ""

#: ../../source/updates/updates.rst:825
msgid "Generate definition"
msgstr ""

#: ../../source/updates/updates.rst:827
msgid ""
"A new feature of the IDE protocol supports generating complete "
"definitions from a type signature. You can try this at the REPL, for "
"example, given our favourite introductory example..."
msgstr ""

#: ../../source/updates/updates.rst:835
msgid ""
"...assuming this is defined on line 3, you can use the ``:gd`` command as"
" follows:"
msgstr ""

#: ../../source/updates/updates.rst:844
msgid ""
"This works by a fairly simple brute force search, which tries searching "
"for a valid right hand side, and case splitting on the left if that "
"fails, but is remarkably effective in a lot of situations. Some other "
"examples which work:"
msgstr ""

#: ../../source/updates/updates.rst:857
msgid "This is available in the IDE protocol via the ``generate-def`` command."
msgstr ""

#: ../../source/updates/updates.rst:860
msgid "Chez Scheme target"
msgstr ""

#: ../../source/updates/updates.rst:862
msgid ""
"The default code generator is, for the moment, `Chez Scheme "
"<https://www.scheme.com/>`_. Racket and Gambit code generators are also "
"available.  Like Idris 1, Idris 2 `supports plug-in code generation "
"<https://idris2.readthedocs.io/en/latest/backends/custom.html>`_ to allow"
" you to write a back end for the platform of your choice. To change the "
"code generator, you can use the ``:set cg`` command:"
msgstr ""

#: ../../source/updates/updates.rst:873
msgid ""
"Early experience shows that both are much faster than the Idris 1 C code "
"generator, in both compile time and execution time (but we haven't done "
"any formal study on this yet, so it's just anecdotal evidence)."
msgstr ""

