# SOME DESCRIPTIVE TITLE.
# Copyright (C) 2020, The Idris Community
# This file is distributed under the same license as the Idris2 package.
# FIRST AUTHOR <EMAIL@ADDRESS>, 2022.
#
#, fuzzy
msgid ""
msgstr ""
"Project-Id-Version: Idris2 0.0\n"
"Report-Msgid-Bugs-To: \n"
"POT-Creation-Date: 2022-08-28 21:56+0800\n"
"PO-Revision-Date: YEAR-MO-DA HO:MI+ZONE\n"
"Last-Translator: FULL NAME <EMAIL@ADDRESS>\n"
"Language-Team: LANGUAGE <LL@li.org>\n"
"MIME-Version: 1.0\n"
"Content-Type: text/plain; charset=utf-8\n"
"Content-Transfer-Encoding: 8bit\n"
"Generated-By: Babel 2.10.3\n"

#: ../source/updates/updates.rst:5 b5b6756a02a743859f74284e9b16ab9a
msgid "Changes since Idris 1"
msgstr ""

#: ../source/updates/updates.rst:7 8ad02cba97f342b8ad406aeb9f07c2ce
msgid ""
"Idris 2 is mostly backwards compatible with Idris 1, with some minor "
"exceptions. This document describes the changes, approximately in order "
"of likelihood of encountering them in practice. New features are "
"described at the end, in Section :ref:`sect-new-features`."
msgstr ""

#: ../source/updates/updates.rst:12 c013fc9acb6649708948334edbd4a228
msgid ""
"The Section :ref:`typedd-index` describes how these changes affect the "
"code in the book `Type-Driven Development with Idris "
"<https://www.manning.com/books/type-driven-development-with-idris>`_ by "
"Edwin Brady, available from `Manning <https://www.manning.com>`_."
msgstr ""

#: ../source/updates/updates.rst:17 9797be60e9ec4b0e817edbae1b575033
msgid ""
"The documentation for Idris has been published under the Creative Commons"
" CC0 License. As such to the extent possible under law, *The Idris "
"Community* has waived all copyright and related or neighboring rights to "
"Documentation for Idris."
msgstr ""

#: ../source/updates/updates.rst:22 389139ae705942618d82e1214356b378
msgid ""
"More information concerning the CC0 can be found online at: "
"http://creativecommons.org/publicdomain/zero/1.0/"
msgstr ""

#: ../source/updates/updates.rst:25 647eb8dbba364aacac278d2d127afa8d
msgid "New Core Language: Quantities in Types"
msgstr ""

#: ../source/updates/updates.rst:27 5932902c68774a60a5d9187be18a0a59
msgid ""
"Idris 2 is based on `Quantitative Type Theory (QTT) <https://bentnib.org"
"/quantitative-type-theory.html>`_, a core language developed by Bob Atkey"
" and Conor McBride. In practice, this means that every variable in Idris "
"2 has a *quantity* associated with it. A quantity is one of:"
msgstr ""

#: ../source/updates/updates.rst:32 91abe3ea96044cdba719b07ec00dd183
msgid "``0``, meaning that the variable is *erased* at run time"
msgstr ""

#: ../source/updates/updates.rst:33 37d77a2390ee48abb1ba2b0ff12824d4
msgid "``1``, meaning that the variable is used *exactly once* at run time"
msgstr ""

#: ../source/updates/updates.rst:34 909f36e87e764fee98e8ca4f3a7ec323
msgid "*Unrestricted*, which is the same behaviour as Idris 1"
msgstr ""

#: ../source/updates/updates.rst:36 21d37d36acba486eb526b32f5560ca38
msgid ""
"For more details on this, see Section :ref:`sect-multiplicities`. In "
"practice, this might cause some Idris 1 programs not to type check in "
"Idris 2 due to attempting to use an argument which is erased at run time."
msgstr ""

#: ../source/updates/updates.rst:41 2c77f4a5c2d940b78f301ecebbd40569
msgid "Erasure"
msgstr ""

#: ../source/updates/updates.rst:43 9af1ffed893748ce9d073ab272e5f2f9
msgid ""
"In Idris, names which begin with a lower case letter are automatically "
"bound as implicit arguments in types, for example in the following "
"skeleton definition, ``n``, ``a`` and ``m`` are implicitly bound:"
msgstr ""

#: ../source/updates/updates.rst:52 2fdad3489c184d56ad5da3c737a26043
msgid ""
"One of the difficulties in compiling a dependently typed programming "
"language is deciding which arguments are used at run time and which can "
"safely be erased. More importantly, it's one of the difficulties when "
"programming: how can a programmer *know* when an argument will be erased?"
msgstr ""

#: ../source/updates/updates.rst:57 53e2e7780ff84fd3be79cb203b20b8e9
msgid ""
"In Idris 2, a variable's quantity tells us whether it will be available "
"at run time or not. We can see the quantities of the variables in scope "
"in ``append_rhs`` by inspecting the hole at the REPL:"
msgstr ""

#: ../source/updates/updates.rst:72 ee33b7fe57a24d26915f7db8d11fce18
msgid ""
"The ``0`` next to ``m``, ``a`` and ``n`` mean that they are in scope, but"
" there will be ``0`` occurrences at run-time. That is, it is *guaranteed*"
" that they will be erased at run-time."
msgstr ""

#: ../source/updates/updates.rst:76 042ed2ada46049909ada26557f6134b8
msgid ""
"This does lead to some potential difficulties when converting Idris 1 "
"programs, if you are using implicit arguments at run time.  For example, "
"in Idris 1 you can get the length of a vector as follows:"
msgstr ""

#: ../source/updates/updates.rst:85 087b6d1c79544b02a68c5507fca44186
msgid ""
"This might seem like a good idea, since it runs in constant time and "
"takes advantage of the type level information, but the trade off is that "
"``n`` has to be available at run time, so at run time we always need the "
"length of the vector to be available if we ever call ``vlen``. Idris 1 "
"can infer whether the length is needed, but there's no easy way for a "
"programmer to be sure."
msgstr ""

#: ../source/updates/updates.rst:91 bc64694568be464da07458a1edd6a1df
msgid "In Idris 2, we need to state explicitly that ``n`` is needed at run time"
msgstr ""

#: ../source/updates/updates.rst:98 6d9b6f635fba46d08c87f3fe73ebfb5c
msgid ""
"(Incidentally, also note that in Idris 2, names bound in types are also "
"available in the definition without explicitly rebinding them.)"
msgstr ""

#: ../source/updates/updates.rst:101 1db5c933d3e849b385bfef66c7082e47
msgid ""
"This also means that when you call ``vlen``, you need the length "
"available. For example, this will give an error"
msgstr ""

#: ../source/updates/updates.rst:109 cb78f34c06b24c7986805a9de214a6b1
msgid "Idris 2 reports::"
msgstr ""

#: ../source/updates/updates.rst:114 b0ab661fdc2246e19e761a80e9e6d8d8
msgid ""
"This means that it needs to use ``m`` as an argument to pass to ``vlen "
"xs``, where it needs to be available at run time, but ``m`` is not "
"available in ``sumLengths`` because it has multiplicity ``0``."
msgstr ""

#: ../source/updates/updates.rst:118 f9503ead845d4b69858d80cd5be87b4f
msgid ""
"We can see this more clearly by replacing the right hand side of "
"``sumLengths`` with a hole..."
msgstr ""

#: ../source/updates/updates.rst:126 27084282dcdb4bf68e326a4e0dffa4df
msgid "...then checking the hole's type at the REPL::"
msgstr ""

#: ../source/updates/updates.rst:137 c8f9607276be4792a71f707686873e1e
msgid ""
"Instead, we need to give bindings for ``m`` and ``n`` with unrestricted "
"multiplicity"
msgstr ""

#: ../source/updates/updates.rst:145 7214b570bcfc44a79deb4a13b7d6a572
msgid ""
"Remember that giving no multiplicity on a binder, as with ``m`` and ``n``"
" here, means that the variable has unrestricted usage."
msgstr ""

#: ../source/updates/updates.rst:148 33510357cf3f45558860997ceec1bc47
msgid ""
"If you're converting Idris 1 programs to work with Idris 2, this is "
"probably the biggest thing you need to think about. It is important to "
"note, though, that if you have bound implicits, such as..."
msgstr ""

#: ../source/updates/updates.rst:156 1fbbea570e7045ee935a23bb9d7f67c9
msgid ""
"...then it's a good idea to make sure ``t`` really is needed, or "
"performance might suffer due to the run time building the instance of "
"``t`` unnecessarily!"
msgstr ""

#: ../source/updates/updates.rst:159 16400f38406d40eebe446c50599e2fc8
msgid ""
"One final note on erasure: it is an error to try to pattern match on an "
"argument with multiplicity ``0``, unless its value is inferrable from "
"elsewhere. So, the following definition is rejected"
msgstr ""

#: ../source/updates/updates.rst:169 5e06c76d7d8b4b7599da245d04b1c49c
msgid "This is rejected with the error::"
msgstr ""

#: ../source/updates/updates.rst:174 5c8f79ca5b504ef08258e8ef51af6767
msgid ""
"The following, however, is fine, because in ``sNot``, even though we "
"appear to match on the erased argument ``x``, its value is uniquely "
"inferrable from the type of the second argument"
msgstr ""

#: ../source/updates/updates.rst:188 525d5e84782045a8a3794d55a90f45fa
msgid ""
"Experience with Idris 2 so far suggests that, most of the time, as long "
"as you're using unbound implicits in your Idris 1 programs, they will "
"work without much modification in Idris 2. The Idris 2 type checker will "
"point out where you require an unbound implicit argument at run time - "
"sometimes this is both surprising and enlightening!"
msgstr ""

#: ../source/updates/updates.rst:196 e684981df30b43ff9aad103f811d50b5
msgid "Linearity"
msgstr ""

#: ../source/updates/updates.rst:198 c98dc703316f45409c1a621850eb012c
msgid ""
"Full details on linear arguments with multiplicity ``1`` are given in "
"Section :ref:`sect-multiplicities`. In brief, the intuition behind "
"multiplicity ``1`` is that if we have a function with a type of the "
"following form..."
msgstr ""

#: ../source/updates/updates.rst:206 e0e70532d7374b9c9369264ee22fd453
msgid ""
"...then the guarantee given by the type system is that *if* ``f x`` *is "
"used exactly once, then* ``x`` *is used exactly once* in the process."
msgstr ""

#: ../source/updates/updates.rst:210 a5943f80dfef448dae47b4ef181b05d8
msgid "Prelude and ``base`` libraries"
msgstr ""

#: ../source/updates/updates.rst:212 5d1d19949d304df9b9e0f2e2520e764f
msgid ""
"The Prelude in Idris 1 contained a lot of definitions, many of them "
"rarely necessary. The philosophy in Idris 2 is different. The (rather "
"vaguely specified) rule of thumb is that it should contain the basic "
"functions required by almost any non-trivial program."
msgstr ""

#: ../source/updates/updates.rst:217 9a9ca4778eb94d53acaa365718080ced
msgid ""
"This is a vague specification since different programmers will consider "
"different things absolutely necessary, but the result is that it "
"contains:"
msgstr ""

#: ../source/updates/updates.rst:220 679d21011b764950852ab1e2e254d16b
msgid "Anything the elaborator can desugar to (e.g. tuples, ``()``, ``=``)"
msgstr ""

#: ../source/updates/updates.rst:221 f46cc71c2ffd4c35833a70ddb8accec5
msgid ""
"Basic types ``Bool``, ``Nat``, ``List``, ``Stream``, ``Dec``, ``Maybe``, "
"``Either``"
msgstr ""

#: ../source/updates/updates.rst:223 c0b077d8198748db88536771f3499e42
msgid "The most important utility functions: ``id``, ``the``, composition, etc"
msgstr ""

#: ../source/updates/updates.rst:224 3ea3923fb9d14c7495885e0bcac595d4
msgid ""
"Interfaces for arithmetic and implementations for the primitives and "
"basic types"
msgstr ""

#: ../source/updates/updates.rst:226 5d20787323cd4e2eb769e84ab3dd8d84
msgid "Basic ``Char`` and ``String`` manipulation"
msgstr ""

#: ../source/updates/updates.rst:227 4f0f514415ad4c7d860b5faf53be36b9
msgid ""
"``Show``, ``Eq``, ``Ord``, and implementations for all types in the "
"prelude"
msgstr ""

#: ../source/updates/updates.rst:228 6da7ded4dc204c1c981948762109badb
msgid "Interfaces and functions for basic proof (``cong``, ``Uninhabited``, etc)"
msgstr ""

#: ../source/updates/updates.rst:229 a40380550c2448a5a77fe9f6e0bed2df
msgid "``Semigroup``, ``Monoid``"
msgstr ""

#: ../source/updates/updates.rst:230 69967cfbeeb24211a61c45c8622af0ec
msgid "``Functor``, ``Applicative``, ``Monad`` and related functions"
msgstr ""

#: ../source/updates/updates.rst:231 5d1d8e16900742439cbd4990e5de4eaf
msgid "``Foldable``, ``Alternative`` and ``Traversable``"
msgstr ""

#: ../source/updates/updates.rst:232 a67e1a0d05a9489288c13f54430b5bc9
msgid "``Range``, for list range syntax"
msgstr ""

#: ../source/updates/updates.rst:233 6b50b068dd714d6f9d12b43227e6b30e
msgid "Console ``IO``"
msgstr ""

#: ../source/updates/updates.rst:235 649698927eb04322a506c51c458a9a61
msgid ""
"Anything which doesn't fit in here has been moved to the ``base`` "
"libraries. Among other places, you can find some of the functions which "
"used to be in the prelude in:"
msgstr ""

#: ../source/updates/updates.rst:239 d7c560ee1c774decb61d26c597fedb59
msgid "``Data.List`` and ``Data.Nat``"
msgstr ""

#: ../source/updates/updates.rst:240 865443b9cf194fd88de68380d797e029
msgid "``Data.Maybe`` and ``Data.Either``"
msgstr ""

#: ../source/updates/updates.rst:241 0397ece2c499467e815379b53e24d31e
msgid ""
"``System.File`` and ``System.Directory``, (file management was previously"
" part of the prelude)"
msgstr ""

#: ../source/updates/updates.rst:243 865e9e35a9944f849c8ea8fc7780c229
msgid "``Decidable.Equality``"
msgstr ""

#: ../source/updates/updates.rst:246 f38548904a584ee3aa90949d9762d9bc
msgid "Smaller Changes"
msgstr ""

#: ../source/updates/updates.rst:249 5f78e39d16374585a39f78f0ac5eca00
msgid "Ambiguous Name Resolution"
msgstr ""

#: ../source/updates/updates.rst:251 3fc21bfa7fc948829f10bbf63b55d154
msgid ""
"Idris 1 worked very hard to resolve ambiguous names, by type, even if "
"this involved some complicated interaction with interface resolution. "
"This could sometimes be the cause of long type checking times. Idris 2 "
"simplifies this, at the cost of sometimes requiring more programmer "
"annotations on ambiguous names."
msgstr ""

#: ../source/updates/updates.rst:257 e812dfab072e473fab52b5fa83350dcb
msgid ""
"As a general rule, Idris 2 will be able to disambiguate between names "
"which have different concrete return types (such as data constructors), "
"or which have different concrete argument types (such as record "
"projections). It may struggle to resolve ambiguities if one name requires"
" an interface to be resolved. It will postpone resolution if a name can't"
" be resolved immediately, but unlike Idris 1, it won't attempt "
"significant backtracking. If you have deeply nested ambiguous names "
"(beyond a small threshold, default 3) Idris 2 will report an error.  You "
"can change this threshold with a directive, for example:"
msgstr ""

#: ../source/updates/updates.rst:270 9a15a0cfc3904fae85401ada4aef1002
msgid ""
"However, in such circumstances it is almost certainly a better idea to "
"disambiguate explicitly."
msgstr ""

#: ../source/updates/updates.rst:273 c2c76fd091a84b08b1abc7007c313f46
msgid ""
"Indeed in general, if you get an ambiguous name error, the best approach "
"is to give the namespace explicitly. You can also rebind names locally:"
msgstr ""

#: ../source/updates/updates.rst:281 ca706cde597c4697808dd70680ca6c74
msgid ""
"One difficulty which remains is resolving ambiguous names where one "
"possibility is an interface method, and another is a concrete top level "
"function. For example, we may have:"
msgstr ""

#: ../source/updates/updates.rst:290 b837b59fffd84a91a9f77f3500d74179
msgid ""
"As a pragmatic choice, if type checking in a context where the more "
"concrete name is valid (``LinearIO.(>>=)`` here, so if type checking an "
"expression known to have type ``IO t`` for some ``t``), the more concrete"
" name will be chosen."
msgstr ""

#: ../source/updates/updates.rst:294 ae3823bd0bea4f76b7be8c778252800f
msgid "This is somehow unsatisfying, so we may revisit this in future!"
msgstr ""

#: ../source/updates/updates.rst:297 4ff1fc5971644c73b5254559177098a3
msgid "Modules, namespaces and export"
msgstr ""

#: ../source/updates/updates.rst:299 54bcf6a05924400aaa141fd502d9a589
msgid ""
"The visibility rules, as controlled by the ``private``, ``export`` and "
"``public export`` modifiers, now refer to the visibility of names from "
"other *namespaces*, rather than other *files*."
msgstr ""

#: ../source/updates/updates.rst:303 eeb0bfd2bb0f44c49a2dc2c88ddf7b42
msgid "So if you have the following, all in the same file..."
msgstr ""

#: ../source/updates/updates.rst:321 bd284fcef8b645c5a587044c107d90a4
msgid "...then ``bVisible`` can access ``aVisible``, but not ``aHidden``."
msgstr ""

#: ../source/updates/updates.rst:323 1818d75b855d4fc48f0a2ecb78f17b0d
msgid ""
"Records are, as before, defined in their own namespace, but fields are "
"always visible from the parent namespace."
msgstr ""

#: ../source/updates/updates.rst:326 6f8b4f36d143496db893b9a14b2cf0b5
msgid ""
"Also, module names must now match the filename in which they're defined, "
"with the exception of the module ``Main``, which can be defined in a file"
" with any name."
msgstr ""

#: ../source/updates/updates.rst:331 27dfcbd4a67849eab61077a6983dd1d3
msgid "``%language`` pragmas"
msgstr ""

#: ../source/updates/updates.rst:333 b9f419d8b061428cae1624b8c042e152
msgid ""
"There are several ``%language`` pragmas in Idris 1, which define various "
"experimental extensions. None of these are available in Idris 2, although"
" extensions may be defined in the future."
msgstr ""

#: ../source/updates/updates.rst:337 1884affa3c1e428483174311878437e2
msgid ""
"Also removed was the ``%access`` pragma for default visibility, use "
"visibility modifiers on each declaration instead."
msgstr ""

#: ../source/updates/updates.rst:341 8880f305bd7f40f8b93a7d72ce487cdc
msgid "``let`` bindings"
msgstr ""

#: ../source/updates/updates.rst:343 cc6db6db67fe477ebab771b6cc3af678
msgid ""
"``let`` bindings, i.e. expressions of the form ``let x = val in e`` have "
"slightly different behaviour. Previously, you could rely on the "
"computational behaviour of ``x`` in the scope of ``e``, so type checking "
"could take into account that ``x`` reduces to ``val``. Unfortunately, "
"this leads to complications with ``case`` and ``with`` clauses: if we "
"want to preserve the computational behaviour, we would need to make "
"significant changes to the way ``case`` and ``with`` are elaborated."
msgstr ""

#: ../source/updates/updates.rst:351 e43dd405b7aa4dfda68128f5f0b0c125
msgid ""
"So, for simplicity and consistency (and, realistically, because I don't "
"have enough time to resolve the problem for ``case`` and ``with``) the "
"above expression ``let x = val in e`` is equivalent to ``(\\x => e) "
"val``."
msgstr ""

#: ../source/updates/updates.rst:355 1381ed5eb6104ef6b40dd3e8d16083e0
msgid ""
"So, ``let`` now effectively generalises a complex subexpression. If you "
"do need the computational behaviour of a definition, it is now possible "
"using local function definitions instead - see Section :ref:`sect-local-"
"defs` below."
msgstr ""

#: ../source/updates/updates.rst:360 0e5b918931b7490b900affd6ade2fe8c
msgid ""
"Also, an alternative syntax ``let x := val in e`` is available. See "
"Section :ref:`sect-let-bindings` for more info."
msgstr ""

#: ../source/updates/updates.rst:364 59279eaf9de9405eb38ee9fb45e097aa
msgid "``auto``-implicits and Interfaces"
msgstr ""

#: ../source/updates/updates.rst:366 cb4955738d11487c946470b4aa76363a
msgid ""
"Interfaces and ``auto``-implicit arguments are similar, in that they "
"invoke an expression search mechanism to find the value of an argument. "
"In Idris 1, they were implemented separately, but in Idris 2, they use "
"the same mechanism. Consider the following *total* definition of "
"``fromMaybe``:"
msgstr ""

#: ../source/updates/updates.rst:379 7b13a39f53c04f05842ccf037d0f57f4
msgid ""
"Since interface resolution and ``auto``-implicits are now the same thing,"
" the type of ``fromMaybe`` can be written as:"
msgstr ""

#: ../source/updates/updates.rst:386 7aed18b2585d4cba9185ff48d6bbb71b
msgid ""
"So now, the constraint arrow ``=>`` means that the argument will be found"
" by ``auto``-implicit search."
msgstr ""

#: ../source/updates/updates.rst:389 e61664bafcab490e80712aa97e9bc293
msgid ""
"When defining a ``data`` type, there are ways to control how "
"``auto``-implicit search will proceed, by giving options to the data "
"type. For example:"
msgstr ""

#: ../source/updates/updates.rst:399 20977460bc594d53acb00c437a0ada72
msgid ""
"The ``search x`` option means that ``auto``-implicit search for a value "
"of type ``Elem t ts`` will start as soon as the type checker has resolved"
" the value ``t``, even if ``ts`` is still unknown."
msgstr ""

#: ../source/updates/updates.rst:403 ec7ebb8c8c4b45e28786c362cf8c374d
msgid ""
"By default, ``auto``-implicit search uses the constructors of a data type"
" as search hints. The ``noHints`` option on a data type turns this "
"behaviour off."
msgstr ""

#: ../source/updates/updates.rst:407 05903a0d2d654713a01ceb64fc068c09
#, python-format
msgid ""
"You can add your own search hints with the ``%hint`` option on a "
"function. For example:"
msgstr ""

#: ../source/updates/updates.rst:423 b5bd9c27fedb4c6e96e0b169855fc314
msgid ""
"In this case, searching for ``MyShow Bool`` will find ``showBool``, as we"
" can see if we try evaluating ``myShow True`` at the REPL:"
msgstr ""

#: ../source/updates/updates.rst:431 dc47b61455984dc2af2d6603628d5c3e
#, python-format
msgid ""
"In fact, this is how interfaces are elaborated. However, ``%hint`` should"
" be used with care. Too many hints can lead to a large search space!"
msgstr ""

#: ../source/updates/updates.rst:435 1b99b0d9a8ad47b1b459fa126779c4aa
msgid "Record fields"
msgstr ""

#: ../source/updates/updates.rst:437 5dac84e934ad46d095f89b6f4ae7f31b
msgid "Record fields can now be accessed via a ``.``. For example, if you have:"
msgstr ""

#: ../source/updates/updates.rst:446 d4236eaf623347be8a09bd3f2386753f
msgid ""
"and you have a record ``fred : Person``, then you can use "
"``fred.firstName`` to access the ``firstName`` field."
msgstr ""

#: ../source/updates/updates.rst:450 a64aa8dc7e0a4b6bb3164f8fab70f5ff
msgid "Totality and Coverage"
msgstr ""

#: ../source/updates/updates.rst:452 219318eebbd04d069f9b5cb3279b0f88
#, python-format
msgid ""
"``%default covering`` is now the default status, so all functions must "
"cover all their inputs unless stated otherwise with a ``partial`` "
"annotation, or switching to ``%default partial`` (which is not "
"recommended - use a ``partial`` annotation instead to have the smallest "
"possible place where functions are partial)."
msgstr ""

#: ../source/updates/updates.rst:461 8e648fec52f2439786adcaf07cf2964e
msgid "Build artefacts"
msgstr ""

#: ../source/updates/updates.rst:463 bdfe166241e4456a92d4f02208938c35
msgid ""
"This is not really a language change, but a change in the way Idris saves"
" checked files, and still useful to know. All checked modules are now "
"saved in a directory ``build/ttc``, in the root of the source tree, with "
"the directory structure following the directory structure of the source."
"  Executables are placed in ``build/exec``."
msgstr ""

#: ../source/updates/updates.rst:470 eb369bef2162471789133d295301c732
msgid "Packages"
msgstr ""

#: ../source/updates/updates.rst:472 0388a64663b545a3bb42e7ed0f3f4ad4
msgid ""
"Dependencies on other packages are now indicated with the ``depends`` "
"field, the ``pkgs`` field is no longer recognized. Also, fields with URLS"
" or other string data (other than module or package names), must be "
"enclosed in double quotes. For example:"
msgstr ""

#: ../source/updates/updates.rst:500 6ea4ddcd07a3482c8a0f2e150ba22d35
msgid "New features"
msgstr ""

#: ../source/updates/updates.rst:502 a0d2b39a99f044ce8282c0d1f8b7c3d8
msgid ""
"As well as the change to the core language to use quantitative type "
"theory, described above, there are several other new features."
msgstr ""

#: ../source/updates/updates.rst:508 7ccd7d452a8d4feda0aa993df67723e5
msgid "Local function definitions"
msgstr ""

#: ../source/updates/updates.rst:510 e059e0101e584d03b7d0d8897c04f3eb
msgid ""
"Functions can now be defined locally, using a ``let`` block. For example,"
" ``greet`` in the following example, which is defined in the scope of a "
"local variable ``x``:"
msgstr ""

#: ../source/updates/updates.rst:525 a7349baa4feb47659a3f54356760c69a
msgid ""
"These ``let`` blocks can be used anywhere (in the middle of ``do`` blocks"
" as above, but also in any function, or in type declarations). ``where`` "
"blocks are now elaborated by translation into a local ``let``."
msgstr ""

#: ../source/updates/updates.rst:529 375b182a22254a3fbd2067d81b942579
msgid ""
"However, Idris no longer attempts to infer types for functions defined in"
" ``where`` blocks, because this was fragile. This may be reinstated, if "
"we can come up with a good, predictable approach."
msgstr ""

#: ../source/updates/updates.rst:534 60349e74224a4d969f2e22fdaf2ec6ce
msgid "Scope of implicit arguments"
msgstr ""

#: ../source/updates/updates.rst:536 0245132b96724add90005d129d03cc72
msgid ""
"Implicit arguments in a type are now in scope in the body of a "
"definition. We've already seen this above, where ``n`` is in scope "
"automatically in the body of ``vlen``:"
msgstr ""

#: ../source/updates/updates.rst:545 3431b32536d14feda32aa68ee66bb124
msgid ""
"This is important to remember when using ``where`` blocks, or local "
"definitions, since the names in scope will also be in scope when "
"declaring the *type* of the local definition. For example, the following "
"definition, where we attempt to define our own version of ``Show`` for "
"``Vect``, will fail to type check:"
msgstr ""

#: ../source/updates/updates.rst:560 b669f5c4bfd94768914d6f1716bd7c1a
msgid ""
"This fails because ``n`` is in scope already, from the type of "
"``showVect``, in the type declaration for ``showBody``, and so the first "
"clause ``showBody []`` will fail to type check because ``[]`` has length "
"``Z``, not ``n``. We can fix this by locally binding ``n``:"
msgstr ""

#: ../source/updates/updates.rst:573 390d4eea0d9d4af1b809236d65220fda
msgid "Or, alternatively, using a new name:"
msgstr ""

#: ../source/updates/updates.rst:583 e53443f56fd94afc84d44d55ee15a3b0
msgid ""
"Idris 1 took a different approach here: names which were parameters to "
"data types were in scope, other names were not. The Idris 2 approach is, "
"we hope, more consistent and easier to understand."
msgstr ""

#: ../source/updates/updates.rst:590 bf823a4b3c9e4b28a69f3ef7ce17a668
msgid "Function application syntax additions"
msgstr ""

#: ../source/updates/updates.rst:592 aad640f7eb57465b9c3169f58a6eba76
msgid "From now on you can utilise the new syntax of function applications:"
msgstr ""

#: ../source/updates/updates.rst:598 7f116f93541043a4b75541aaa7df5d36
msgid "There are three additions here:"
msgstr ""

#: ../source/updates/updates.rst:600 0c45ee3902e649e2b8f8922dd0f8a812
msgid "More than one argument can be written in braces, separated with commas:"
msgstr ""

#: ../source/updates/updates.rst:624 49ff02fb0b4f4d45bb8b9893d9915925
msgid ""
"Arguments in braces can now correspond to explicit, implicit and auto "
"implicit dependent function types (``Pi`` types), provided the domain "
"type is named:"
msgstr ""

#: ../source/updates/updates.rst:635 7d175ba1bac14af8a6df136fdbe01a10
msgid ""
"Order of the arguments doesn't matter as long as they are in braces and "
"the names are distinct. It is better to stick named arguments in braces "
"at the end of your argument list, because regular unnamed explicit "
"arguments are processed first and take priority:"
msgstr ""

#: ../source/updates/updates.rst:647 e83c379901ea45a5b11f89d0ac33f244
msgid ""
"This snippet won't type check, because \"b\" in ``badCall`` is passed "
"first, although logically we want it to be second. Idris will tell you "
"that it couldn't find a spot for ``a = \"a\"`` (because \"b\" took its "
"place), so the application is ill-formed."
msgstr ""

#: ../source/updates/updates.rst:652 47e423d65e5a4bf0a9b46dc26e222fb0
msgid ""
"Thus if you want to use the new syntax, it is worth naming your ``Pi`` "
"types."
msgstr ""

#: ../source/updates/updates.rst:654 3bdbb8cbb78248ef80d7795baf93c964
msgid ""
"Multiple explicit arguments can be \"skipped\" more easily with the "
"following syntax:"
msgstr ""

#: ../source/updates/updates.rst:660 4069c92ae82a45a98803f4afcbe2aca5
msgid "or"
msgstr ""

#: ../source/updates/updates.rst:666 b5637389b2b649c68eb1636ed145bd30
msgid "in case none of the named arguments are wanted."
msgstr ""

#: ../source/updates/updates.rst:668 2f398b873dc1427a87cefd0a15ec8af4
msgid "Examples:"
msgstr ""

#: ../source/updates/updates.rst:689 f6d2a4187eb3452e94fc363ef8b58c46
msgid ""
"Last rule worth noting is the case of named applications with repeated "
"argument names, e.g:"
msgstr ""

#: ../source/updates/updates.rst:703 8cbf85b3f41a4abebb48a82c749a5eef
msgid ""
"In this example the name ``x`` is given repeatedly to the ``Pi`` types of"
" the data constructor ``MkWeirdPair``. In order to deconstruct the "
"``WeirdPair a b`` in ``weirdSnd``, while writing the left-hand side of "
"the pattern-matching clause in a named manner (via the new syntax), we "
"have to rename the first occurrence of ``x`` to any fresh name or the "
"``_`` as we did. Then the definition type checks normally."
msgstr ""

#: ../source/updates/updates.rst:708 0b008544f38c4f47922865174c7c58e7
msgid ""
"In general, duplicate names are bound sequentially on the left-hand side "
"and must be renamed for the pattern expression to be valid."
msgstr ""

#: ../source/updates/updates.rst:710 eefb4ed4df3d4833b06ab10c0c687c57
msgid ""
"The situation is similar on the right-hand side of pattern-matching "
"clauses:"
msgstr ""

#: ../source/updates/updates.rst:727 03854fa82f6d437aa73c49b4edc22925
msgid ""
"Named arguments should be passed sequentially in the order they were "
"defined in the ``Pi`` types, regardless of their (imp)explicitness."
msgstr ""

#: ../source/updates/updates.rst:731 3e7ff4da6d744d48aa91831a32b82bda
msgid "Better inference"
msgstr ""

#: ../source/updates/updates.rst:733 6e89d04f5ea54cab8133108c024b317c
msgid ""
"In Idris 1, holes (that is, unification variables arising from implicit "
"arguments) were local to an expression, and if they were not resolved "
"while checking the expression, they would not be resolved at all. In "
"Idris 2, they are global, so inference works better. For example, we can "
"now say:"
msgstr ""

#: ../source/updates/updates.rst:746 42dcf381c1674db3b5e954c4c7e3ec4c
msgid ""
"The ``?``, incidentally, differs from ``_`` in that ``_`` will be bound "
"as an implicit argument if unresolved after checking the type of "
"``test``, but ``?`` will be left as a hole to be resolved later. "
"Otherwise, they can be used interchangeably."
msgstr ""

#: ../source/updates/updates.rst:752 9d02f3e6068f4cf6b43f3a95c622a810
msgid "Dependent case"
msgstr ""

#: ../source/updates/updates.rst:754 66881f399ea4423fb33c28806a60d86a
msgid ""
"``case`` blocks were available in Idris 1, but with some restrictions. "
"Having better inference means that ``case`` blocks work more effectively "
"in Idris 2, and dependent case analysis is supported."
msgstr ""

#: ../source/updates/updates.rst:766 a51ed334627142ea8595e37f482d4ec7
msgid ""
"The implicit arguments and original values are still available in the "
"body of the ``case``. Somewhat contrived, but the following is valid:"
msgstr ""

#: ../source/updates/updates.rst:779 a673a301bfcb4b7e8bdac38f6353488c
msgid "Record updates"
msgstr ""

#: ../source/updates/updates.rst:781 da3fd8211e6247d49adbcd31b95fc503
msgid ""
"Dependent record updates work, provided that all relevant fields are "
"updated at the same time. Dependent record update is implemented via "
"dependent ``case`` blocks rather than by generating a specific update "
"function for each field as in Idris 1, so you will no longer get "
"mystifying errors when trying to update dependent records!"
msgstr ""

#: ../source/updates/updates.rst:787 90ea5f73124f4720a97be6ec26c96814
msgid ""
"For example, we can wrap a vector in a record, with an explicit length "
"field:"
msgstr ""

#: ../source/updates/updates.rst:798 891ac26ac20247ab95d6a2928ff8833f
msgid ""
"Then, we can safely update the ``content``, provided we update the "
"``length`` correspondingly:"
msgstr ""

#: ../source/updates/updates.rst:807 e7d0f26d6ee14b6898c51b1311e863ec
msgid "Another novelty - new update syntax (previous one still functional):"
msgstr ""

#: ../source/updates/updates.rst:821 c45827e21e1c44dfb7775cf63cdbb4fc
msgid ""
"The ``record`` keyword has been discarded for brevity, symbol ``:=`` "
"replaces ``=`` in order to not introduce any ambiguity."
msgstr ""

#: ../source/updates/updates.rst:825 cca77dcf60b74018883fb463e9e2c26e
msgid "Generate definition"
msgstr ""

#: ../source/updates/updates.rst:827 4aee7e729d014dbd83c377f9644b19e2
msgid ""
"A new feature of the IDE protocol supports generating complete "
"definitions from a type signature. You can try this at the REPL, for "
"example, given our favourite introductory example..."
msgstr ""

#: ../source/updates/updates.rst:835 1ae34d60f8164cd0bcab8be2a2e77df0
msgid ""
"...assuming this is defined on line 3, you can use the ``:gd`` command as"
" follows:"
msgstr ""

#: ../source/updates/updates.rst:844 24748a7ac4184924bed8df7f06095936
msgid ""
"This works by a fairly simple brute force search, which tries searching "
"for a valid right hand side, and case splitting on the left if that "
"fails, but is remarkably effective in a lot of situations. Some other "
"examples which work:"
msgstr ""

#: ../source/updates/updates.rst:857 15c54ff28df84b77a8a8421acb30e4b8
msgid "This is available in the IDE protocol via the ``generate-def`` command."
msgstr ""

#: ../source/updates/updates.rst:860 4d50b859683d418480d8d8f1ffc48d2b
msgid "Chez Scheme target"
msgstr ""

#: ../source/updates/updates.rst:862 d9c361b3e7964ef4992e1b7c5597e636
msgid ""
"The default code generator is, for the moment, `Chez Scheme "
"<https://www.scheme.com/>`_. Racket and Gambit code generators are also "
"available.  Like Idris 1, Idris 2 `supports plug-in code generation "
"<https://idris2.readthedocs.io/en/latest/backends/custom.html>`_ to allow"
" you to write a back end for the platform of your choice. To change the "
"code generator, you can use the ``:set cg`` command:"
msgstr ""

#: ../source/updates/updates.rst:873 617a7ae0a3e64da8a2d9280d306b55cf
msgid ""
"Early experience shows that both are much faster than the Idris 1 C code "
"generator, in both compile time and execution time (but we haven't done "
"any formal study on this yet, so it's just anecdotal evidence)."
msgstr ""

