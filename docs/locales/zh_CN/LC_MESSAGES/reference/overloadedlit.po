# SOME DESCRIPTIVE TITLE.
# Copyright (C) 2020, The Idris Community
# This file is distributed under the same license as the Idris2 package.
# FIRST AUTHOR <EMAIL@ADDRESS>, 2022.
#
#, fuzzy
msgid ""
msgstr ""
"Project-Id-Version: Idris2 0.0\n"
"Report-Msgid-Bugs-To: \n"
"POT-Creation-Date: 2022-07-12 11:10+0800\n"
"PO-Revision-Date: YEAR-MO-DA HO:MI+ZONE\n"
"Last-Translator: FULL NAME <EMAIL@ADDRESS>\n"
"Language-Team: LANGUAGE <LL@li.org>\n"
"MIME-Version: 1.0\n"
"Content-Type: text/plain; charset=utf-8\n"
"Content-Transfer-Encoding: 8bit\n"
"Generated-By: Babel 2.10.3\n"

#: ../../source/reference/overloadedlit.rst:2 f23f66fa6bd2415394adfb1c13b8d866
msgid "Overloaded literals"
msgstr ""

#: ../../source/reference/overloadedlit.rst:7 f5ccee24e772439dbb27716dd629554e
#, python-format
msgid ""
"The compiler provides directives for literals overloading, respectively "
"``%stringLit <fun>`` and ``%integerLit <fun>`` for string and integer "
"literals. During elaboration, the given function is applied to the "
"corresponding literal. In the Prelude these functions are set to "
"``fromString`` and ``fromInteger``."
msgstr ""

#: ../../source/reference/overloadedlit.rst:12 60aeba8237244472a3b9e14227f301eb
msgid ""
"The interface ``FromString ty`` provides the ``fromString : String -> "
"ty`` function, while the ``Num ty`` interface provides the ``fromInteger "
": Integer -> ty`` function for all numerical types."
msgstr ""

#: ../../source/reference/overloadedlit.rst:17 ce2a74bc1e764d939719bd30f1adac5b
msgid "Restricted overloads"
msgstr ""

#: ../../source/reference/overloadedlit.rst:18 f9e4589535a74c639a953a2c7a49e33b
msgid ""
"Although the overloading of literals can be achieved by implementing the "
"interfaces described above, in principle only a function with the correct"
" signature and name is enough to achieve the desired behaviour. This can "
"be exploited to obtain more restrictive overloading such as converting "
"literals to ``Fin n`` values, where integer literals greater or equal to "
"n are not constructible values for the type. Additional implicit "
"arguments can be added to the function signature, in particular auto "
"implicit arguments for searching proofs. As an example, this is the "
"implementation of ``fromInteger``Â for ``Fin n``."
msgstr ""

#: ../../source/reference/overloadedlit.rst:36 038a8895bb074b539daccf5a203b3519
msgid ""
"The ``prf`` auto implicit is an automatically constructed proof (if "
"possible) that the literal is suitable for the ``Fin n`` type. The "
"restricted behaviour can be observed in the REPL, where the failure to "
"construct a valid proof is caught during the type-checking phase and not "
"at runtime:"
msgstr ""

