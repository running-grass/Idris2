# SOME DESCRIPTIVE TITLE.
# Copyright (C) 2020, The Idris Community
# This file is distributed under the same license as the Idris2 package.
# FIRST AUTHOR <EMAIL@ADDRESS>, 2022.
#
#, fuzzy
msgid ""
msgstr ""
"Project-Id-Version: Idris2 0.0\n"
"Report-Msgid-Bugs-To: \n"
"POT-Creation-Date: 2022-07-12 09:10+0800\n"
"PO-Revision-Date: YEAR-MO-DA HO:MI+ZONE\n"
"Last-Translator: FULL NAME <EMAIL@ADDRESS>\n"
"Language-Team: LANGUAGE <LL@li.org>\n"
"MIME-Version: 1.0\n"
"Content-Type: text/plain; charset=utf-8\n"
"Content-Transfer-Encoding: 8bit\n"
"Generated-By: Babel 2.10.3\n"

#: ../../source/proofs/propositional.rst:1 e1ebcc7805a1457db3def1cd710ab5de
msgid ""
"This page attempts to explain some of the techniques used in Idris to "
"prove propositional equalities."
msgstr ""

#: ../../source/proofs/propositional.rst:5 461c08d697d941c6b90d58c70b1e9e06
msgid "Proving Propositional Equality"
msgstr ""

#: ../../source/proofs/propositional.rst:7 b0345fe96f2b4b60b6dec55c299bd9f3
msgid ""
"We have seen that definitional equalities can be proved using ``Refl`` "
"since they always normalise to values that can be compared directly."
msgstr ""

#: ../../source/proofs/propositional.rst:10 d105c3684e1847318abc7ff72e0e1c85
msgid ""
"However with propositional equalities we are using symbolic variables, "
"which do not always normalise."
msgstr ""

#: ../../source/proofs/propositional.rst:13 51098aaf623147b1bcba0f36f93a13fe
msgid "So to take the previous example:"
msgstr ""

#: ../../source/proofs/propositional.rst:19 4b558e5c6de842da869196bc8c773ccc
msgid ""
"In this case ``plus n Z`` does not normalise to n. Even though both sides"
" of the equality are provably equal we cannot claim ``Refl`` as a proof."
msgstr ""

#: ../../source/proofs/propositional.rst:22 bd1755f11a0543bb9c8100296bfc9842
msgid ""
"If the pattern match cannot match for all ``n`` then we need to match all"
" possible values of ``n``. In this case"
msgstr ""

#: ../../source/proofs/propositional.rst:33 bb2530895514444791e8060fcd9df617
msgid ""
"we can't use ``Refl`` to prove ``plus n 0 = n`` for all ``n``. Instead, "
"we call it for each case separately.  So, in the second line for example,"
" the type checker substitutes ``Z`` for ``n`` in the type being matched, "
"and reduces the type accordingly."
msgstr ""

#: ../../source/proofs/propositional.rst:39 e134c6f6559d4624b8643d736c7be7ed
msgid "Replace"
msgstr ""

#: ../../source/proofs/propositional.rst:41 7849cba75e9e436b981cbdcb73570eba
msgid ""
"This implements the 'indiscernability of identicals' principle, if two "
"terms are equal then they have the same properties. In other words, if "
"``x=y``, then we can substitute y for x in any expression. In our proofs "
"we can express this as:"
msgstr ""

#: ../../source/proofs/propositional.rst:45 af598ae4515744a782e8b75e92c9805a
msgid "if x=y then prop x = prop y"
msgstr ""

#: ../../source/proofs/propositional.rst:48 40eb021faf484955aec4303cdfd72a2d
msgid ""
"where prop is a pure function representing the property. In the examples "
"below prop is an expression in some variable with a type like this: "
"``prop: n -> Type``"
msgstr ""

#: ../../source/proofs/propositional.rst:51 453d8baf92264a56ab3a7fa18747b708
msgid ""
"So if ``n`` is a natural number variable then ``prop`` could be something"
" like ``\\n => 2*n + 3``."
msgstr ""

#: ../../source/proofs/propositional.rst:54 90e1721dc0d84f7b989432f964f7a73c
msgid "To use this in our proofs there is the following function in the prelude:"
msgstr ""

#: ../../source/proofs/propositional.rst:62 3a199143d4c24aa59d44988301fa9de5
msgid ""
"If we supply an equality (x=y) and a proof of a property of x (``prop "
"x``) then we get a proof of a property of y (``prop y``). So, in the "
"following example, if we supply ``p1 x`` which is a proof that ``x=2`` "
"and the equality ``x=y`` then we get a proof that ``y=2``."
msgstr ""

#: ../../source/proofs/propositional.rst:76 7fa7d1f7d72d49e39b69cc2eb6c08c47
msgid "Rewrite"
msgstr ""

#: ../../source/proofs/propositional.rst:78 1d00bc954f224666b49e53d6d6f449c2
msgid ""
"In practice, ``replace`` can be a little tricky to use because in general"
" the implicit argument ``prop`` can be hard to infer for the machine, so "
"Idris provides a high level syntax which calculates the property and "
"applies ``replace``."
msgstr ""

#: ../../source/proofs/propositional.rst:83 1d4a0fdaef614b448be9f5a6ca6c07d7
msgid ""
"Example: again we supply ``p1 x`` which is a proof that ``x=2`` and the "
"equality ``y=x`` then we get a proof that ``y=2``."
msgstr ""

#: ../../source/proofs/propositional.rst:94 2ca334dff28a48e3b1f2ff80ad9bba88
msgid "We can think of ``rewrite`` as working in this way:"
msgstr ""

#: ../../source/proofs/propositional.rst:96 f8828e1c438f4c808171d81f6867536a
msgid "Start with a equation ``x=y`` and a property ``prop : x -> Type``"
msgstr ""

#: ../../source/proofs/propositional.rst:97 c6442af58e8b421e8a8ff6d4c6343391
msgid "Search for ``x`` in ``prop``"
msgstr ""

#: ../../source/proofs/propositional.rst:98 38a255cc76b84d20be0869a5d1e64247
msgid "Replaces all occurrences of ``x`` with ``y`` in ``prop``."
msgstr ""

#: ../../source/proofs/propositional.rst:100 05e217330d4747f7ba17c71b717ce019
msgid "That is, we are doing a substitution."
msgstr ""

#: ../../source/proofs/propositional.rst:102 f6cf2a46556d44ae976aab45ed443fb5
msgid ""
"Notice that here we need to supply reverse equality, i.e. ``y=x`` instead"
" of ``x=y``. This is because ``rewrite`` performs the substitution of "
"left part of equality to the right part and this substitution is done in "
"the *return type*. Thus, here in the return type ``y=2`` we need to apply"
" ``y=x`` in order to match the type of the argument ``x=2``."
msgstr ""

#: ../../source/proofs/propositional.rst:108 f0104aa885524ec1a4a877bc7860677d
msgid "Symmetry and Transitivity"
msgstr ""

#: ../../source/proofs/propositional.rst:110 feae3d55ec894f7881fbd421253acf0b
msgid ""
"In addition to 'reflexivity' equality also obeys 'symmetry' and "
"'transitivity' and these are also included in the prelude:"
msgstr ""

#: ../../source/proofs/propositional.rst:124 1b9d19ed9a6b490fa3fbebcc00036b9d
msgid "Heterogeneous Equality"
msgstr ""

#: ../../source/proofs/propositional.rst:126 2a417bd737ca48c989e4cf1383be50ec
msgid "Also included in the prelude:"
msgstr ""

