# SOME DESCRIPTIVE TITLE.
# Copyright (C) 2020, The Idris Community
# This file is distributed under the same license as the Idris2 package.
# FIRST AUTHOR <EMAIL@ADDRESS>, 2022.
#
#, fuzzy
msgid ""
msgstr ""
"Project-Id-Version: Idris2 0.0\n"
"Report-Msgid-Bugs-To: \n"
"POT-Creation-Date: 2022-07-12 11:10+0800\n"
"PO-Revision-Date: YEAR-MO-DA HO:MI+ZONE\n"
"Last-Translator: FULL NAME <EMAIL@ADDRESS>\n"
"Language-Team: LANGUAGE <LL@li.org>\n"
"MIME-Version: 1.0\n"
"Content-Type: text/plain; charset=utf-8\n"
"Content-Transfer-Encoding: 8bit\n"
"Generated-By: Babel 2.10.3\n"

#: ../../source/proofs/inductive.rst:5 29b4855a6900432694723dd55f62b2ae
msgid "Inductive Proofs"
msgstr ""

#: ../../source/proofs/inductive.rst:7 41c30213c73542c1a9c002c4520fd2db
msgid ""
"Before embarking on proving ``plus_commutes`` in Idris itself, let us "
"consider the overall structure of a proof of some property of natural "
"numbers. Recall that they are defined recursively, as follows:"
msgstr ""

#: ../../source/proofs/inductive.rst:17 4fd4e3e57833497aaeea4622565d91ff
msgid ""
"A *total* function over natural numbers must both terminate, and cover "
"all possible inputs. Idris checks functions for totality by checking that"
" all inputs are covered, and that all recursive calls are on "
"*structurally smaller* values (so recursion will always reach a base "
"case). Recalling ``plus``:"
msgstr ""

#: ../../source/proofs/inductive.rst:29 9ae1b609831c4e82a1e7ed125e2dbb19
msgid ""
"This is total because it covers all possible inputs (the first argument "
"can only be ``Z`` or ``S k`` for some ``k``, and the second argument "
"``m`` covers all possible ``Nat``) and in the recursive call, ``k`` is "
"structurally smaller than ``S k`` so the first argument will always reach"
" the base case ``Z`` in any sequence of recursive calls."
msgstr ""

#: ../../source/proofs/inductive.rst:35 9f3679a63e05471383a75e66a7446c95
msgid ""
"In some sense, this resembles a mathematical proof by induction (and this"
" is no coincidence!). For some property ``P`` of a natural number ``x``, "
"we can show that ``P`` holds for all ``x`` if:"
msgstr ""

#: ../../source/proofs/inductive.rst:39 171f5973349d45be8fe2c492b5a8a95d
msgid "``P`` holds for zero (the base case)."
msgstr ""

#: ../../source/proofs/inductive.rst:41 1f28628183bc41e080f332229c314169
msgid ""
"Assuming that ``P`` holds for ``k``, we can show ``P`` also holds for ``S"
" k`` (the inductive step)."
msgstr ""

#: ../../source/proofs/inductive.rst:44 bd777086d7704e3d852679fd332a4359
msgid ""
"In ``plus``, the property we are trying to show is somewhat trivial (for "
"all natural numbers ``x``, there is a ``Nat`` which need not have any "
"relation to ``x``). However, it still takes the form of a base case and "
"an inductive step. In the base case, we show that there is a ``Nat`` "
"arising from ``plus n m`` when ``n = Z``, and in the inductive step we "
"show that there is a ``Nat`` arising when ``n = S k`` and we know we can "
"get a ``Nat`` inductively from ``plus k m``. We could even write a "
"function capturing all such inductive definitions:"
msgstr ""

#: ../../source/proofs/inductive.rst:64 76837da8502a43d5a0ac9fb23ccd0a23
msgid ""
"Using ``nat_induction``, we can implement an equivalent inductive version"
" of ``plus``:"
msgstr ""

#: ../../source/proofs/inductive.rst:77 10693ea9c74f4cdb9252f409a43aa86b
msgid ""
"To prove that ``plus n m = plus m n`` for all natural numbers ``n`` and "
"``m``, we can also use induction. Either we can fix ``m`` and perform "
"induction on ``n``, or vice versa. We can sketch an outline of a proof; "
"performing induction on ``n``, we have:"
msgstr ""

#: ../../source/proofs/inductive.rst:82 6fcf363f7cd948f5bc7be9b0c8f4daca
msgid "Property ``prop`` is ``\\x => plus x m = plus m x``."
msgstr ""

#: ../../source/proofs/inductive.rst:84 ba34f0ed0abe47768e09de803c7ddccc
msgid "Show that ``prop`` holds in the base case and inductive step:"
msgstr ""

#: ../../source/proofs/inductive.rst b31c52bc18464af49cbcb4f23b735dbc
msgid "Base case: ``prop Z``, i.e."
msgstr ""

#: ../../source/proofs/inductive.rst 790ddb58e9d640f5aa10e7e0f4d5d838
msgid "``plus Z m = plus m Z``, which reduces to"
msgstr ""

#: ../../source/proofs/inductive.rst 3ad45a525e944719a85c4d1a5afa83a7
msgid "``m = plus m Z`` due to the definition of ``plus``."
msgstr ""

#: ../../source/proofs/inductive.rst 96ebfec255f64229b60021b58914b2e8
msgid ""
"Inductive step: Inductively, we know that ``prop k`` holds for a "
"specific, fixed ``k``, i.e."
msgstr ""

#: ../../source/proofs/inductive.rst 05dd724b18594c57a0d5ade53c37b6c3
msgid ""
"``plus k m = plus m k`` (the induction hypothesis). Given this, show "
"``prop (S k)``, i.e."
msgstr ""

#: ../../source/proofs/inductive.rst ff3fd93f91a24b3ea7016fe79d57154d
msgid "``plus (S k) m = plus m (S k)``, which reduces to"
msgstr ""

#: ../../source/proofs/inductive.rst cbf377088e33405eb7f9ad5caff07980
msgid ""
"``S (plus k m) = plus m (S k)``. From the induction hypothesis, we can "
"rewrite this to"
msgstr ""

#: ../../source/proofs/inductive.rst 41eba47e6b6b4401ac403cf4bf8e2d4d
msgid "``S (plus m k) = plus m (S k)``."
msgstr ""

#: ../../source/proofs/inductive.rst:96 066e9680648a4bae8fdab62e0b5909dc
msgid ""
"To complete the proof we therefore need to show that ``m = plus m Z`` for"
" all natural numbers ``m``, and that ``S (plus m k) = plus m (S k)`` for "
"all natural numbers ``m`` and ``k``. Each of these can also be proved by "
"induction, this time on ``m``."
msgstr ""

#: ../../source/proofs/inductive.rst:101 f6575b19afcd4e509e8a985107143102
msgid ""
"We are now ready to embark on a proof of commutativity of ``plus`` "
"formally in Idris."
msgstr ""

