# SOME DESCRIPTIVE TITLE.
# Copyright (C) 2020, The Idris Community
# This file is distributed under the same license as the Idris2 package.
# FIRST AUTHOR <EMAIL@ADDRESS>, 2022.
#
msgid ""
msgstr ""
"Project-Id-Version: Idris2 0.0\n"
"Report-Msgid-Bugs-To: 467195537@qq.com\n"
"POT-Creation-Date: 2022-07-12 11:10+0800\n"
"PO-Revision-Date: 2022-07-12 05:11+0000\n"
"Last-Translator: Leo Liu <leo19920823@gmail.com>\n"
"Language-Team: Chinese (Simplified) <https://hosted.weblate.org/projects/"
"idris2/tutorialintroduction/zh_Hans/>\n"
"Language: zh_CN\n"
"MIME-Version: 1.0\n"
"Content-Type: text/plain; charset=utf-8\n"
"Content-Transfer-Encoding: 8bit\n"
"Plural-Forms: nplurals=1; plural=0;\n"
"X-Generator: Weblate 4.14-dev\n"
"Generated-By: Babel 2.10.3\n"

#: ../../source/tutorial/introduction.rst:5 5702ba2615e04e0bb8e7b7b131976084
msgid "Introduction"
msgstr "简介"

#: ../../source/tutorial/introduction.rst:7 9192669ece764e44994c384b5bdf7cb3
msgid ""
"In conventional programming languages, there is a clear distinction "
"between *types* and *values*. For example, in `Haskell "
"<https://www.haskell.org>`_, the following are types, representing "
"integers, characters, lists of characters, and lists of any value "
"respectively:"
msgstr ""
"在传统的编程语言中，*类型* 和*值* "
"之间有明显的区别。例如，在`Haskell<https://www.haskell.org>`_ "
"，以下是类型，分别代表整数、字符、字符列表和任意值的列表："

#: ../../source/tutorial/introduction.rst:13 91042eafb2434b19bbd4092702c8d9dc
msgid "``Int``, ``Char``, ``[Char]``, ``[a]``"
msgstr "``Int``, ``Char``, ``[Char]``, ``[a]``"

#: ../../source/tutorial/introduction.rst:15 d6c659cdef7f40e49557ef72444050de
msgid ""
"Correspondingly, the following values are examples of inhabitants of "
"those types:"
msgstr "相应地，以下值是这些类型的成员的示例："

#: ../../source/tutorial/introduction.rst:18 efc04a7f8d764901b53396694510a8e6
msgid "``42``, ``’a’``, ``\"Hello world!\"``, ``[2,3,4,5,6]``"
msgstr "``42``, ``’a’``, ``\"Hello world!\"``, ``[2,3,4,5,6]``"

#: ../../source/tutorial/introduction.rst:20 559d7948a0bd4b10bcbab8caa81920c9
msgid ""
"In a language with *dependent types*, however, the distinction is less "
"clear. Dependent types allow types to “depend” on values — in other "
"words, types are a *first class* language construct and can be "
"manipulated like any other value. The standard example is the type of "
"lists of a given length [#fn1]_, ``Vect n a``, where ``a`` is the element"
" type and ``n`` is the length of the list and can be an arbitrary term."
msgstr ""
"然而，在具有*依赖类型*的语言中，它们的区别不太明显。依赖类型允许类型“依赖”值—"
"—换句话说，类型是*一等*语言结构，可以像任何其他值一样被操作。"
"标准示例是给定长度的列表类型 [#fn1]_， ``Vect n a`` ，其中 ``a`` 是元素类型，"
" ``n`` 是列表的长度，且可以任意长。"

#: ../../source/tutorial/introduction.rst:27 c8f53a8a42a94c5aadb021ee98eaddbf
msgid ""
"When types can contain values, and where those values describe "
"properties, for example the length of a list, the type of a function can "
"begin to describe its own properties. Take for example the concatenation "
"of two lists. This operation has the property that the resulting list's "
"length is the sum of the lengths of the two input lists. We can therefore"
" give the following type to the ``app`` function, which concatenates "
"vectors:"
msgstr ""
"当类型可以包含值，并且这些值描述属性时，例如一个列表的长度，函数的类型就可以"
"开始描述它自己的属性。以两个列表的连接为例。这个操作的属性是：结果列表的长度"
"是两个输入列表的长度之和。因此，我们可以给 ``app`` "
"函数提供以下类型，它用于连接向量："

#: ../../source/tutorial/introduction.rst:39 9b6bec8e37774cb0b8e0f4e30c1335c7
msgid ""
"This tutorial introduces Idris, a general purpose functional programming "
"language with dependent types. The goal of the Idris project is to build "
"a dependently typed language suitable for verifiable general purpose "
"programming. To this end, Idris is a compiled language which aims to "
"generate efficient executable code. It also has a lightweight foreign "
"function interface which allows easy interaction with external libraries."
msgstr ""
"本教程介绍了Idris，一种具有依赖类型的通用函数式编程语言。Idris "
"项目的目标是建立一个适用于可验证的通用编程的依赖类型语言。为此，Idris 被设计"
"为一种编译语言，旨在生成高效的可执行代码。同时它还有一个轻量级的外部函数接口"
"，允许与外部库轻松互动。"

#: ../../source/tutorial/introduction.rst:48 4d3fc6bb232845429b981a01b123d66d
msgid "Intended Audience"
msgstr "目标受众"

#: ../../source/tutorial/introduction.rst:50 50f15d30c52f4f32983c21af483989bb
msgid ""
"This tutorial is intended as a brief introduction to the language, and is"
" aimed at readers already familiar with a functional language such as "
"`Haskell <https://www.haskell.org>`_ or `OCaml <https://ocaml.org>`_. In "
"particular, a certain amount of familiarity with Haskell syntax is "
"assumed, although most concepts will at least be explained briefly. The "
"reader is also assumed to have some interest in using dependent types for"
" writing and verifying software."
msgstr ""
"本教程旨在作为该语言的简要介绍，并针对已经熟悉函数式语言的读者，如 "
"`Haskell<https://www.haskell.org>`_ 或 `OCaml<https://ocaml.org>`_ 。"
"特别是假设对 Haskell 语法有一定程度的熟悉，尽管大多数概念至少会被简单地解释。"
"同时还假设读者对使用依赖类型来编写和验证软件有一定的兴趣。"

#: ../../source/tutorial/introduction.rst:58 338d8d6a8141458d8d5669ddfffe12c6
msgid ""
"For a more in-depth introduction to Idris, which proceeds at a much "
"slower pace, covering interactive program development, with many more "
"examples, see `Type-Driven Development with Idris "
"<https://www.manning.com/books/type-driven-development-with-idris>`_ by "
"Edwin Brady, available from `Manning <https://www.manning.com>`_."
msgstr ""
"关于Idris的更深入的介绍，它以更慢的速度进行，涵盖了交互式程序开发，也有更多的"
"示例，见 `Type-Driven Development with Idris<https://www.manning.com/books/"
"type-driven-development-with-idris>`_ ，作者 Edwin Brady ，本书可从 "
"`Manning<https://www.manning.com>`_ 获取。"

#: ../../source/tutorial/introduction.rst:64 c078d9f200c845f6ab2a1d51f1fa7f7e
msgid "Example Code"
msgstr "示例代码"

#: ../../source/tutorial/introduction.rst:66 97c04fa36cf540a086b256eadcbb5741
msgid ""
"This tutorial includes some example code, which has been tested against "
"Idris 2. These files are available with the Idris 2 distribution, so that"
" you can try them out easily. They can be found under ``samples``. It is,"
" however, strongly recommended that you type them in yourself, rather "
"than simply loading and reading them."
msgstr ""
"本教程包括一些示例代码，这些代码已经针对Idris 2进行了测试。这些文件与Idris "
"2发行版一起提供，所以你可以很容易地使用它们。它们可以在 ``samples`` "
"目录下找到。然而，强烈建议你自己输入它们，而不是简单地加载然后阅读。"

#: ../../source/tutorial/introduction.rst:73 b2b8199b5337428d9adedd78117d87a5
msgid "Footnotes"
msgstr "脚注"

#: ../../source/tutorial/introduction.rst:74 d42d0120d86443b7b1e6e0090c7289c2
msgid ""
"Typically, and perhaps confusingly, referred to in the dependently typed "
"programming literature as \"vectors\"."
msgstr "通常，并且可能令人困惑的是，在依赖类型编程文献中称为“向量”。"
