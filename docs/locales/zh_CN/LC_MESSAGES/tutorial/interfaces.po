# SOME DESCRIPTIVE TITLE.
# Copyright (C) 2020, The Idris Community
# This file is distributed under the same license as the Idris2 package.
# FIRST AUTHOR <EMAIL@ADDRESS>, 2022.
#
#, fuzzy
msgid ""
msgstr ""
"Project-Id-Version: Idris2 0.0\n"
"Report-Msgid-Bugs-To: \n"
"POT-Creation-Date: 2022-07-12 09:10+0800\n"
"PO-Revision-Date: YEAR-MO-DA HO:MI+ZONE\n"
"Last-Translator: FULL NAME <EMAIL@ADDRESS>\n"
"Language-Team: LANGUAGE <LL@li.org>\n"
"MIME-Version: 1.0\n"
"Content-Type: text/plain; charset=utf-8\n"
"Content-Transfer-Encoding: 8bit\n"
"Generated-By: Babel 2.10.3\n"

#: ../../source/tutorial/interfaces.rst:5 c03d120820884f7b928f5d80a9af5221
msgid "Interfaces"
msgstr ""

#: ../../source/tutorial/interfaces.rst:7 3b21d2330943485e8562297c5f271c68
msgid ""
"We often want to define functions which work across several different "
"data types. For example, we would like arithmetic operators to work on "
"``Int``, ``Integer`` and ``Double`` at the very least. We would like "
"``==`` to work on the majority of data types. We would like to be able to"
" display different types in a uniform way."
msgstr ""

#: ../../source/tutorial/interfaces.rst:13 0b3c77ef797e436bb5065d502dcf8633
msgid ""
"To achieve this, we use *interfaces*, which are similar to type classes "
"in Haskell or traits in Rust. To define an interface, we provide a "
"collection of overloadable functions. A simple example is the ``Show`` "
"interface, which is defined in the prelude and provides an interface for "
"converting values to ``String``:"
msgstr ""

#: ../../source/tutorial/interfaces.rst:24 f7a93c64e24b4d8caf69dedef96c43f1
msgid ""
"This generates a function of the following type (which we call a *method*"
" of the ``Show`` interface):"
msgstr ""

#: ../../source/tutorial/interfaces.rst:31 42f04f5331514de8b352324ba843bc88
msgid ""
"We can read this as: “under the constraint that ``a`` has an "
"implementation of ``Show``, take an input ``a`` and return a ``String``.”"
" An implementation of an interface is defined by giving definitions of "
"the methods of the interface. For example, the ``Show`` implementation "
"for ``Nat`` could be defined as:"
msgstr ""

#: ../../source/tutorial/interfaces.rst:47 fe07962b293f4950b3208e005625dc56
msgid ""
"Only one implementation of an interface can be given for a type — "
"implementations may not overlap. Implementation declarations can "
"themselves have constraints. To help with resolution, the arguments of an"
" implementation must be constructors (either data or type constructors) "
"or variables (i.e. you cannot give an implementation for a function). For"
" example, to define a ``Show`` implementation for vectors, we need to "
"know that there is a ``Show`` implementation for the element type, "
"because we are going to use it to convert each element to a ``String``:"
msgstr ""

#: ../../source/tutorial/interfaces.rst:65 4036048591854e26af2d0ebf1170c7d6
msgid ""
"Note that we need the explicit ``forall n .`` in the ``show'`` function "
"because otherwise the ``n`` is already in scope, and fixed to the value "
"of the top level ``n``."
msgstr ""

#: ../../source/tutorial/interfaces.rst:70 1dcecbf1beef4c6992acf60d55fdf896
msgid "Default Definitions"
msgstr ""

#: ../../source/tutorial/interfaces.rst:72 d0ad9c9f933043aa99846c476f779847
msgid ""
"The Prelude defines an ``Eq`` interface which provides methods for "
"comparing values for equality or inequality, with implementations for all"
" of the built-in types:"
msgstr ""

#: ../../source/tutorial/interfaces.rst:82 33eb347a650248d1825d49b9d5e53ee6
msgid ""
"To declare an implementation for a type, we have to give definitions of "
"all of the methods. For example, for an implementation of ``Eq`` for "
"``Nat``:"
msgstr ""

#: ../../source/tutorial/interfaces.rst:95 e9d6c50997ae4f29884e318df7b1548b
msgid ""
"It is hard to imagine many cases where the ``/=`` method will be anything"
" other than the negation of the result of applying the ``==`` method. It "
"is therefore convenient to give a default definition for each method in "
"the interface declaration, in terms of the other method:"
msgstr ""

#: ../../source/tutorial/interfaces.rst:109 e041ee4f9d64474bb0d475b0cc4229a3
msgid ""
"A minimal complete implementation of ``Eq`` requires either ``==`` or "
"``/=`` to be defined, but does not require both. If a method definition "
"is missing, and there is a default definition for it, then the default is"
" used instead."
msgstr ""

#: ../../source/tutorial/interfaces.rst:115 1e82f74e48544bb18ee6586946d2993a
msgid "Extending Interfaces"
msgstr ""

#: ../../source/tutorial/interfaces.rst:117 b6c4579fc479417a87a6b7b9f932cb20
msgid ""
"Interfaces can also be extended. A logical next step from an equality "
"relation ``Eq`` is to define an ordering relation ``Ord``. We can define "
"an ``Ord`` interface which inherits methods from ``Eq`` as well as "
"defining some of its own:"
msgstr ""

#: ../../source/tutorial/interfaces.rst:138 d01dd0219f7245e18c508ae7dd8b82e3
msgid ""
"The ``Ord`` interface allows us to compare two values and determine their"
" ordering. Only the ``compare`` method is required; every other method "
"has a default definition. Using this we can write functions such as "
"``sort``, a function which sorts a list into increasing order, provided "
"that the element type of the list is in the ``Ord`` interface. We give "
"the constraints on the type variables left of the fat arrow ``=>``, and "
"the function type to the right of the fat arrow:"
msgstr ""

#: ../../source/tutorial/interfaces.rst:150 4f3d6773f09a4211b722aa1f570cec80
msgid ""
"Functions, interfaces and implementations can have multiple constraints. "
"Multiple constraints are written in brackets in a comma separated list, "
"for example:"
msgstr ""

#: ../../source/tutorial/interfaces.rst:159 fef3d15932374e3fa65e9b7982d9757d
msgid ""
"Constraints are, like types, first class objects in the language. You can"
" see this at the REPL:"
msgstr ""

#: ../../source/tutorial/interfaces.rst:167 a08d93e8f71d4a0f9c54bab7dba79846
msgid ""
"So, ``(Ord a, Show a)`` is an ordinary pair of ``Types``, with two "
"constraints as the first and second element of the pair."
msgstr ""

#: ../../source/tutorial/interfaces.rst:171 74d9bf040ca54fc1aa1f73ea4d940f20
msgid "Note: Interfaces and ``mutual`` blocks"
msgstr ""

#: ../../source/tutorial/interfaces.rst:173 e9274d5194c546c3a24bdf92961eec7a
msgid ""
"Idris is strictly \"define before use\", except in ``mutual`` blocks. In "
"a ``mutual`` block, Idris elaborates in two passes: types on the first "
"pass and definitions on the second. When the mutual block contains an "
"interface declaration, it elaborates the interface header but none of the"
" method types on the first pass, and elaborates the method types and any "
"default definitions on the second pass."
msgstr ""

#: ../../source/tutorial/interfaces.rst:181 e19e564778a942d586687055e0d669bb
msgid "Quantities for Parameters"
msgstr ""

#: ../../source/tutorial/interfaces.rst:183 0d847f76f98d499ea1af0dead3317ee0
msgid ""
"By default parameters that are not explicitly ascribed a type in an "
"``interface`` declaration are assigned the quantity ``0``. This means "
"that the parameter is not available to use at runtime in the methods' "
"definitions."
msgstr ""

#: ../../source/tutorial/interfaces.rst:187 cd9d9b471c6148ba828827243cb5e39a
msgid ""
"For instance, ``Show a`` gives rise to a ``0``-quantified type variable "
"``a`` in the type of the ``show`` method:"
msgstr ""

#: ../../source/tutorial/interfaces.rst:196 da637494ca244595b71bbde724208a24
msgid ""
"However some use cases require that some of the parameters are available "
"at runtime. We may for instance want to declare an interface for "
"``Storable`` types. The constraint ``Storable a size`` means that we can "
"store values of type ``a`` in a ``Buffer`` in exactly ``size`` bytes."
msgstr ""

#: ../../source/tutorial/interfaces.rst:201 2094bfa1f5824756a5e00764f45a1c84
msgid ""
"If the user provides a method to read a value for such a type ``a`` at a "
"given offset, then we can read the ``k`` th element stored in the buffer "
"by computing the appropriate offset from ``k`` and ``size``. This is "
"demonstrated by providing a default implementation for the method "
"``peekElementOff`` implemented in terms of ``peekByteOff`` and the "
"parameter ``size``."
msgstr ""

#: ../../source/tutorial/interfaces.rst:219 df2bd973ae6040698d4090aeb722ec9a
msgid ""
"Note that ``a`` is explicitly marked as runtime irrelevant so that it is "
"erased by the compiler. Equivalently we could have written ``interface "
"Storable a (size : Nat)``. The meaning of ``| a`` is explained in "
":ref:`DeterminingParameters`."
msgstr ""

#: ../../source/tutorial/interfaces.rst:225 89a046d2391649faa72db9d8a3d03f2d
msgid "Functors and Applicatives"
msgstr ""

#: ../../source/tutorial/interfaces.rst:227 7045e4655b1345f7892c1f8edc59fa13
msgid ""
"So far, we have seen single parameter interfaces, where the parameter is "
"of type ``Type``. In general, there can be any number of parameters (even"
" zero), and the parameters can have *any* type. If the type of the "
"parameter is not ``Type``, we need to give an explicit type declaration. "
"For example, the ``Functor`` interface is defined in the prelude:"
msgstr ""

#: ../../source/tutorial/interfaces.rst:240 841013a750d44170923868aaa06c9d16
msgid ""
"A functor allows a function to be applied across a structure, for example"
" to apply a function to every element in a ``List``:"
msgstr ""

#: ../../source/tutorial/interfaces.rst:254 fcea4512050d4412a9e3a680e30bf6ad
msgid ""
"Having defined ``Functor``, we can define ``Applicative`` which abstracts"
" the notion of function application:"
msgstr ""

#: ../../source/tutorial/interfaces.rst:268 672c33127205413ca615e7593fafafa3
msgid "Monads and ``do``-notation"
msgstr ""

#: ../../source/tutorial/interfaces.rst:270 b41610bb50994a8eafa74cd99d5492ed
msgid ""
"The ``Monad`` interface allows us to encapsulate binding and computation,"
" and is the basis of ``do``-notation introduced in Section :ref:`sect-"
"do`. It extends ``Applicative`` as defined above, and is defined as "
"follows:"
msgstr ""

#: ../../source/tutorial/interfaces.rst:280 714c3b2ff6744499afa20f0435b84b47
msgid "There is also a non-binding sequencing operator, defined for ``Monad`` as:"
msgstr ""

#: ../../source/tutorial/interfaces.rst:286 823f7440c315456e9226b66852847858
msgid ""
"Inside a ``do`` block, the following syntactic transformations are "
"applied:"
msgstr ""

#: ../../source/tutorial/interfaces.rst:289 4ea85b0a168c438c9bfc7d25baae362c
msgid "``x <- v; e`` becomes ``v >>= (\\x => e)``"
msgstr ""

#: ../../source/tutorial/interfaces.rst:291 738b68553e024fffab45d6a027560c46
msgid "``v; e`` becomes ``v >> e``"
msgstr ""

#: ../../source/tutorial/interfaces.rst:293 164f4c6862584a90bb3bf5d2f753a2c8
msgid "``let x = v; e`` becomes ``let x = v in e``"
msgstr ""

#: ../../source/tutorial/interfaces.rst:295 ce4ff388ada8427c9815552336dab346
msgid ""
"``IO`` has an implementation of ``Monad``, defined using primitive "
"functions. We can also define an implementation for ``Maybe``, as "
"follows:"
msgstr ""

#: ../../source/tutorial/interfaces.rst:304 f737c60cc6f14cbb910fde4c081226e5
msgid ""
"Using this we can, for example, define a function which adds two ``Maybe "
"Int``, using the monad to encapsulate the error handling:"
msgstr ""

#: ../../source/tutorial/interfaces.rst:314 dc9f1ea6c4814d58aa2f4d927ac91b53
msgid ""
"This function will extract the values from ``x`` and ``y``, if they are "
"both available, or return ``Nothing`` if one or both are not (\"fail "
"fast\"). Managing the ``Nothing`` cases is achieved by the ``>>=`` "
"operator, hidden by the ``do`` notation."
msgstr ""

#: ../../source/tutorial/interfaces.rst:326 d982511622214334a8c8f837f98949c3
msgid ""
"The translation of ``do`` notation is entirely syntactic, so there is no "
"need for the ``(>>=)`` and ``(>>)`` operators to be the operator defined "
"in the ``Monad`` interface. Idris will, in general, try to disambiguate "
"which operators you mean by type, but you can explicitly choose with "
"qualified do notation, for example:"
msgstr ""

#: ../../source/tutorial/interfaces.rst:340 d429e5d066d84136aeb1e7ebe20aa34e
msgid ""
"The ``Prelude.do`` means that Idris will use the ``(>>=)`` and ``(>>)`` "
"operators defined in the ``Prelude``."
msgstr ""

#: ../../source/tutorial/interfaces.rst:344 f5e6a0b5b64a422c831f9d2ba27b7b60
msgid "Pattern Matching Bind"
msgstr ""

#: ../../source/tutorial/interfaces.rst:346 6f3e67fbb3fc45589bc3933c8648b6e0
msgid ""
"Sometimes we want to pattern match immediately on the result of a "
"function in ``do`` notation. For example, let's say we have a function "
"``readNumber`` which reads a number from the console, returning a value "
"of the form ``Just x`` if the number is valid, or ``Nothing`` otherwise:"
msgstr ""

#: ../../source/tutorial/interfaces.rst:362 6e160be0590147208ba9468997155bd1
msgid ""
"If we then use it to write a function to read two numbers, returning "
"``Nothing`` if neither are valid, then we would like to pattern match on "
"the result of ``readNumber``:"
msgstr ""

#: ../../source/tutorial/interfaces.rst:378 548447297bf64b05a38c56b1fe6bf464
msgid ""
"If there's a lot of error handling, this could get deeply nested very "
"quickly! So instead, we can combine the bind and the pattern match in one"
" line. For example, we could try pattern matching on values of the form "
"``Just x_ok``:"
msgstr ""

#: ../../source/tutorial/interfaces.rst:390 22f620039edb4b01bf1787f9bf1c2837
msgid ""
"There is still a problem, however, because we've now omitted the case for"
" ``Nothing`` so ``readNumbers`` is no longer total! We can add the "
"``Nothing`` case back as follows:"
msgstr ""

#: ../../source/tutorial/interfaces.rst:404 c3b186a407ab47f6a9747c782f95e1b6
msgid ""
"The effect of this version of ``readNumbers`` is identical to the first "
"(in fact, it is syntactic sugar for it and directly translated back into "
"that form). The first part of each statement (``Just x_ok <-`` and ``Just"
" y_ok <-``) gives the preferred binding - if this matches, execution will"
" continue with the rest of the ``do`` block. The second part gives the "
"alternative bindings, of which there may be more than one."
msgstr ""

#: ../../source/tutorial/interfaces.rst:412 4a537dc92f6141869415da69d4b0f102
msgid "``!``-notation"
msgstr ""

#: ../../source/tutorial/interfaces.rst:414 dde8cf4d956344ceb4961c6848b9f546
msgid ""
"In many cases, using ``do``-notation can make programs unnecessarily "
"verbose, particularly in cases such as ``m_add`` above where the value "
"bound is used once, immediately. In these cases, we can use a shorthand "
"version, as follows:"
msgstr ""

#: ../../source/tutorial/interfaces.rst:424 6453065789284b0ca92b0170d8fb97c5
msgid ""
"The notation ``!expr`` means that the expression ``expr`` should be "
"evaluated and then implicitly bound. Conceptually, we can think of ``!`` "
"as being a prefix function with the following type:"
msgstr ""

#: ../../source/tutorial/interfaces.rst:432 40876ae5e67649ef83e3f6abde99a861
msgid ""
"Note, however, that it is not really a function, merely syntax! In "
"practice, a subexpression ``!expr`` will lift ``expr`` as high as "
"possible within its current scope, bind it to a fresh name ``x``, and "
"replace ``!expr`` with ``x``. Expressions are lifted depth first, left to"
" right. In practice, ``!``-notation allows us to program in a more direct"
" style, while still giving a notational clue as to which expressions are "
"monadic."
msgstr ""

#: ../../source/tutorial/interfaces.rst:440 1e884719d0a14e559eefb945f4f7ee62
msgid "For example, the expression:"
msgstr ""

#: ../../source/tutorial/interfaces.rst:446 6c97fc1e880545349fce1a071ba42c9a
msgid "is lifted to:"
msgstr ""

#: ../../source/tutorial/interfaces.rst:456 c22f5d270146408c9fec4bbd670e85b6
msgid "Monad comprehensions"
msgstr ""

#: ../../source/tutorial/interfaces.rst:458 3521a9310a764e32b35caa2b9c949b51
msgid ""
"The list comprehension notation we saw in Section :ref:`sect-more-expr` "
"is more general, and applies to anything which has an implementation of "
"both ``Monad`` and ``Alternative``:"
msgstr ""

#: ../../source/tutorial/interfaces.rst:468 394046e43d6a418bae222f8c5270b294
msgid ""
"In general, a comprehension takes the form ``[ exp | qual1, qual2, …, "
"qualn ]`` where ``quali`` can be one of:"
msgstr ""

#: ../../source/tutorial/interfaces.rst:471 2dd6ae5d89924b748f1b95592ef29c72
msgid "A generator ``x <- e``"
msgstr ""

#: ../../source/tutorial/interfaces.rst:473 efd4d478168741ae8ab7c1da27bff977
msgid "A *guard*, which is an expression of type ``Bool``"
msgstr ""

#: ../../source/tutorial/interfaces.rst:475 8588344c84a64bd081f1f510b6b31b02
msgid "A let binding ``let x = e``"
msgstr ""

#: ../../source/tutorial/interfaces.rst:477 733d13ac9b3b433b97eeb30ed15fe1ab
msgid ""
"To translate a comprehension ``[exp | qual1, qual2, …, qualn]``, first "
"any qualifier ``qual`` which is a *guard* is translated to ``guard "
"qual``, using the following function:"
msgstr ""

#: ../../source/tutorial/interfaces.rst:485 682a7955088241488a61efaf71160854
msgid "Then the comprehension is converted to ``do`` notation:"
msgstr ""

#: ../../source/tutorial/interfaces.rst:491 46e31a7e7d6f45c192305bd7e300ad9a
msgid ""
"Using monad comprehensions, an alternative definition for ``m_add`` would"
" be:"
msgstr ""

#: ../../source/tutorial/interfaces.rst:500 8bc2c76a5e2e454ab271fc398be39107
msgid "Interfaces and IO"
msgstr ""

#: ../../source/tutorial/interfaces.rst:502 cb0df6ea532148bc9adcdf870ec8c71d
msgid ""
"In general, ``IO`` operations in the libraries aren't written using "
"``IO`` directly, but rather via the ``HasIO`` interface:"
msgstr ""

#: ../../source/tutorial/interfaces.rst:510 7079584589ac4d6a849585cb59510b0b
msgid ""
"``HasIO`` explains, via ``liftIO``, how to convert a primitive ``IO`` "
"operation to an operation in some underlying type, as long as that type "
"has a ``Monad`` implementation.  These interface allows a programmer to "
"define some more expressive notion of interactive program, while still "
"giving direct access to ``IO`` primitives."
msgstr ""

#: ../../source/tutorial/interfaces.rst:517 273d6970fe2843a9829b7f2df7ab6c5f
msgid "Idiom brackets"
msgstr ""

#: ../../source/tutorial/interfaces.rst:519 a61e5d669322401a8b8b77b2e0b6bc47
msgid ""
"While ``do`` notation gives an alternative meaning to sequencing, idioms "
"give an alternative meaning to *application*. The notation and larger "
"example in this section is inspired by Conor McBride and Ross Paterson’s "
"paper “Applicative Programming with Effects” [#ConorRoss]_."
msgstr ""

#: ../../source/tutorial/interfaces.rst:524 aaf9870af1284bd0bac6a493e19921d4
msgid ""
"First, let us revisit ``m_add`` above. All it is really doing is applying"
" an operator to two values extracted from ``Maybe Int``. We could "
"abstract out the application:"
msgstr ""

#: ../../source/tutorial/interfaces.rst:534 7a0cca9433524e10a3bf48aee278da30
msgid ""
"Using this, we can write an alternative ``m_add`` which uses this "
"alternative notion of function application, with explicit calls to "
"``m_app``:"
msgstr ""

#: ../../source/tutorial/interfaces.rst:543 94b5dbf30b854ff9afb8c53995eb6b7b
msgid ""
"Rather than having to insert ``m_app`` everywhere there is an "
"application, we can use idiom brackets to do the job for us. To do this, "
"we can give ``Maybe`` an implementation of ``Applicative`` as follows, "
"where ``<*>`` is defined in the same way as ``m_app`` above (this is "
"defined in the Idris library):"
msgstr ""

#: ../../source/tutorial/interfaces.rst:557 386434db5a2e4a3091c07ed53d5d3e76
msgid ""
"Using ``<*>`` we can use this implementation as follows, where a function"
" application ``[| f a1 …an |]`` is translated into ``pure f <*> a1 <*> … "
"<*> an``:"
msgstr ""

#: ../../source/tutorial/interfaces.rst:567 486a7132aa8f42639c860f683133fa18
msgid "An error-handling interpreter"
msgstr ""

#: ../../source/tutorial/interfaces.rst:569 c9735cee3e10451f925d3f5bc2b405a1
msgid ""
"Idiom notation is commonly useful when defining evaluators. McBride and "
"Paterson describe such an evaluator [#ConorRoss]_, for a language similar"
" to the following:"
msgstr ""

#: ../../source/tutorial/interfaces.rst:579 23a9774dd78c4f9d89f7e1a48dbd43a7
msgid ""
"Evaluation will take place relative to a context mapping variables "
"(represented as ``String``\\s) to ``Int`` values, and can possibly fail. "
"We define a data type ``Eval`` to wrap an evaluator:"
msgstr ""

#: ../../source/tutorial/interfaces.rst:588 b8644b9953f74ea0838d53389ced1f16
msgid ""
"Wrapping the evaluator in a data type means we will be able to provide "
"implementations of interfaces for it later. We begin by defining a "
"function to retrieve values from the context during evaluation:"
msgstr ""

#: ../../source/tutorial/interfaces.rst:602 df42638305a6453ca92e8051e6c47373
msgid ""
"When defining an evaluator for the language, we will be applying "
"functions in the context of an ``Eval``, so it is natural to give "
"``Eval`` an implementation of ``Applicative``. Before ``Eval`` can have "
"an implementation of ``Applicative`` it is necessary for ``Eval`` to have"
" an implementation of ``Functor``:"
msgstr ""

#: ../../source/tutorial/interfaces.rst:621 b75f75e74596415b942c75ec5619a628
msgid ""
"Evaluating an expression can now make use of the idiomatic application to"
" handle errors:"
msgstr ""

#: ../../source/tutorial/interfaces.rst:635 f92823f01ec14f138b25350729906d99
msgid "For example:"
msgstr ""

#: ../../source/tutorial/interfaces.rst:645 b7c238d97e59449ca6a94cb2039ac1e5
msgid "Named Implementations"
msgstr ""

#: ../../source/tutorial/interfaces.rst:647 61817e4287f64299b788f2d2d96fb6cd
msgid ""
"It can be desirable to have multiple implementations of an interface for "
"the same type, for example to provide alternative methods for sorting or "
"printing values. To achieve this, implementations can be *named* as "
"follows:"
msgstr ""

#: ../../source/tutorial/interfaces.rst:659 08d20463be1a4d14801952e8759269a3
msgid ""
"This declares an implementation as normal, but with an explicit name, "
"``myord``. The syntax ``compare @{myord}`` gives an explicit "
"implementation to ``compare``, otherwise it would use the default "
"implementation for ``Nat``. We can use this, for example, to sort a list "
"of ``Nat`` in reverse. Given the following list:"
msgstr ""

#: ../../source/tutorial/interfaces.rst:670 26ef776a277443868a7e4225148aaaa2
msgid ""
"We can sort it using the default ``Ord`` implementation, by using the "
"``sort`` function available with ``import Data.List``, then we can try "
"with the named implementation ``myord`` as follows, at the Idris prompt:"
msgstr ""

#: ../../source/tutorial/interfaces.rst:681 98eb13b714054f8881fe7798a37a3a62
msgid ""
"Sometimes, we also need access to a named parent implementation. For "
"example, the prelude defines the following ``Semigroup`` interface:"
msgstr ""

#: ../../source/tutorial/interfaces.rst:689 94c060f9681f4a71b334740cc54fa264
msgid ""
"Then it defines ``Monoid``, which extends ``Semigroup`` with a “neutral” "
"value:"
msgstr ""

#: ../../source/tutorial/interfaces.rst:697 ef0faca0799f491e9c709f656196a80b
msgid ""
"We can define two different implementations of ``Semigroup`` and "
"``Monoid`` for ``Nat``, one based on addition and one on multiplication:"
msgstr ""

#: ../../source/tutorial/interfaces.rst:708 4d72ace481954f048f0e76914c7c9051
msgid ""
"The neutral value for addition is ``0``, but the neutral value for "
"multiplication is ``1``. It's important, therefore, that when we define "
"implementations of ``Monoid`` they extend the correct ``Semigroup`` "
"implementation. We can do this with a ``using`` clause in the "
"implementation as follows:"
msgstr ""

#: ../../source/tutorial/interfaces.rst:721 65d68970113340c2bf29d23e158a5041
msgid ""
"The ``using PlusNatSemi`` clause indicates that ``PlusNatMonoid`` should "
"extend ``PlusNatSemi`` specifically."
msgstr ""

#: ../../source/tutorial/interfaces.rst:727 3cee4bd095ab4f67a8c8ccdcacaaae07
msgid "Interface Constructors"
msgstr ""

#: ../../source/tutorial/interfaces.rst:729 7025b69344ad4d25965f82f8a4f52bb6
msgid ""
"Interfaces, just like records, can be declared with a user-defined "
"constructor."
msgstr ""

#: ../../source/tutorial/interfaces.rst:741 5e9ebe7c89654c71b849617b0f6e9eff
msgid "Then ``MkB : A t => t -> B t``."
msgstr ""

#: ../../source/tutorial/interfaces.rst:746 e0b8a3794d83455cbf86620f8cabb884
msgid "Determining Parameters"
msgstr ""

#: ../../source/tutorial/interfaces.rst:748 0f5be02ae850491a927b22652c21c7b0
msgid ""
"When an interface has more than one parameter, it can help resolution if "
"the parameters used to find an implementation are restricted. For "
"example:"
msgstr ""

#: ../../source/tutorial/interfaces.rst:757 16dff1cc5e5140c48cdc34f1d8145673
msgid ""
"In this interface, only ``m`` needs to be known to find an implementation"
" of this interface, and ``s`` can then be determined from the "
"implementation. This is declared with the ``| m`` after the interface "
"declaration. We call ``m`` a *determining parameter* of the "
"``MonadState`` interface, because it is the parameter used to find an "
"implementation. This is similar to the concept of *functional "
"dependencies* `in Haskell "
"<https://wiki.haskell.org/Functional_dependencies>`_."
msgstr ""

#: ../../source/tutorial/interfaces.rst:764 f26756c1201945e79c843ae2e1d432d2
msgid ""
"Conor McBride and Ross Paterson. 2008. Applicative programming with "
"effects. J. Funct. Program. 18, 1 (January 2008), 1-13. "
"DOI=10.1017/S0956796807006326 "
"https://dx.doi.org/10.1017/S0956796807006326"
msgstr ""

