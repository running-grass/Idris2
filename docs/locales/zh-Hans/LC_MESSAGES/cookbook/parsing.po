# SOME DESCRIPTIVE TITLE.
# Copyright (C) 2020, The Idris Community
# This file is distributed under the same license as the Idris2 package.
# FIRST AUTHOR <EMAIL@ADDRESS>, YEAR.
# 
#, fuzzy
msgid ""
msgstr ""
"Project-Id-Version: Idris2 0.0\n"
"Report-Msgid-Bugs-To: \n"
"POT-Creation-Date: 2022-07-12 11:10+0800\n"
"PO-Revision-Date: 2022-07-13 15:23+0000\n"
"Language-Team: Chinese Simplified (https://www.transifex.com/idriszhong-wen/teams/140912/zh-Hans/)\n"
"MIME-Version: 1.0\n"
"Content-Type: text/plain; charset=UTF-8\n"
"Content-Transfer-Encoding: 8bit\n"
"Language: zh-Hans\n"
"Plural-Forms: nplurals=1; plural=0;\n"

#: ../../source/cookbook/parsing.rst:2 87dbf5c419424138957bc4c8c2967f2f
msgid "Parsing"
msgstr ""

#: ../../source/cookbook/parsing.rst:4 8fea0944fea04fc98a4c7890b5451f1b
msgid ""
"Idris 2 comes with a Lexing and a Parsing library built into the ``contrib``"
" package."
msgstr ""

#: ../../source/cookbook/parsing.rst:6 f52d389ed3a4424da8e371edeeacfa13
msgid ""
"For this cookbook, we will write a very simple parser for a lambda calculus "
"parser that will accept the following language:"
msgstr ""

#: ../../source/cookbook/parsing.rst:13 dbb7d82b692945059bd1dbfcf011b763
msgid ""
"Once we write a lambda calculus parser, we will also see how we can take "
"advantage of a powerful built in expression parser in Idris 2 to write a "
"small calculator that should be smart enough to parse the following "
"expression:"
msgstr ""

#: ../../source/cookbook/parsing.rst:22 df3af786b87f4fa8821e3ae5261b7046
msgid "Lexer"
msgstr ""

#: ../../source/cookbook/parsing.rst:24 de406a0c0d8e4fe4af551eab21d6bfbc
msgid ""
"The main lexer module is under ``Text.Lexer``. This module contains "
"``toTokenMap`` which is a function that converts a ``List (Lexer, k) -> "
"TokenMap (Token k)`` where ``k`` is a token kind. This function could be "
"used for simple lexer to token mappings. The module also includes high level"
" lexers for specifying quantity and common programming primitives like "
"``alphas``, ``intLit``, ``lineComment`` and ``blockComment``."
msgstr ""

#: ../../source/cookbook/parsing.rst:30 19327f1a741941b5bef8f1d6cd21f503
msgid ""
"The ``Text.Lexer`` module also reexports ``Text.Lexer.Core``, "
"``Text.Quantity`` and ``Text.Token``."
msgstr ""

#: ../../source/cookbook/parsing.rst:32 6777ab649fd74820b24dd3ecdea5c68e
msgid ""
"``Text.Lexer.Core`` provides the building blocks of the lexer, including a "
"type called ``Recognise`` which is the underlying data type for the lexer. "
"The other important function that this module provides is a ``lex`` which "
"takes in a lexer and returns the tokens."
msgstr ""

#: ../../source/cookbook/parsing.rst:36 7a7e212aae7a4459b39e8fcccf790239
msgid ""
"``Text.Quantity`` provides a data type ``Quantity`` which can be used with "
"certain lexers to specify how many times something is expected to appear."
msgstr ""

#: ../../source/cookbook/parsing.rst:39 fd1c3a0dd7114b6cad709d4492fd527c
msgid ""
"``Text.Token`` provides a data type ``Token`` that represents a parsed "
"token, its kind and the text. This module also provides an important "
"interface called ``TokenKind`` which tells the lexer how to map token kinds "
"to Idris 2 types and how to convert each kind from a string to a value."
msgstr ""

#: ../../source/cookbook/parsing.rst:44 fe65ace636dd4ba9b5194d221f464a02
msgid "Parser"
msgstr ""

#: ../../source/cookbook/parsing.rst:46 4c0aa1035a8a414c82313187af2f0d7c
msgid ""
"The main parser module is under ``Text.Parser``. This module contains "
"different grammar parsers, the main one being ``match`` which takes a "
"``TokenKind`` and returns the value as defined in the ``TokenKind`` "
"interface. There are other grammar parsers as well, but for our example, we "
"will only be using ``match``."
msgstr ""

#: ../../source/cookbook/parsing.rst:50 b43d7d9dc97c4a1c8114d7e56d4047c2
msgid ""
"The ``Text.Parser`` module reexports ``Text.Parser.Core``, ``Text.Quantity``"
" and ``Text.Token``."
msgstr ""

#: ../../source/cookbook/parsing.rst:52 4ae8ca4b8c9744e2be40c2aa12ba38e5
msgid ""
"``Text.Parser.Core`` provides the building blocks of the parser, including a"
" type called ``Grammar`` which is the underlying data type for the parser. "
"The other important function that this module provides is ``parse`` which "
"takes in a ``Grammar`` and returns the parsed expression."
msgstr ""

#: ../../source/cookbook/parsing.rst:56 be85bf8a8ed147b7b57a7190f71dac9c
msgid ""
"We covered ``Text.Quantity`` and ``Text.Token`` in the Lexer section so "
"we're not going to repeat what they do here."
msgstr ""

#: ../../source/cookbook/parsing.rst:60 1bba6428a6a54fa2ba708f8631888784
msgid "Lambda Calculus Lexer & Parser"
msgstr ""

#: ../../source/cookbook/parsing.rst:62 4025d13075ad422a90fc8376db3eafe4
msgid "LambdaCalculus.idr"
msgstr ""

#: ../../source/cookbook/parsing.rst:231 f3ffa5ef7f1a4a9a92db2b0071758a8d
msgid "Testing out our parser gives us back the following output:"
msgstr ""

#: ../../source/cookbook/parsing.rst:240 2036059fbe6d458481fa18a66cd8ec1e
msgid "Expression Parser"
msgstr ""

#: ../../source/cookbook/parsing.rst:242 1792edb69d814b429c3f89df5731a4c3
msgid ""
"Idris 2 also comes with a very convenient expression parser that is aware of"
" precedence and associativity in ``Text.Parser.Expression``."
msgstr ""

#: ../../source/cookbook/parsing.rst:245 cb11729c8b454462b2bbea6198380b6d
msgid ""
"The main function called ``buildExpressionParser`` takes in an "
"``OperatorTable`` and a ``Grammar`` that represents the terms, and returns a"
" parsed expression. The magic comes from the ``OperatorTable`` since this "
"table defines all the operators, the grammars for those operators, the "
"precedence, and the associativity."
msgstr ""

#: ../../source/cookbook/parsing.rst:250 5723defd1b2c425d8107dfab71abe832
msgid ""
"An ``OperatorTable`` is a list of lists containing the ``Op`` type. The "
"``Op`` type allows you to specify ``Prefix``, ``Postfix``, and ``Infix`` "
"operators along with their grammars. ``Infix`` also contains the "
"associativity called ``Assoc`` which can specify left associativity or "
"``AssocLeft``, right associativity assoc or ``AssocRight`` and as being non-"
"associative or ``AssocNone``."
msgstr ""

#: ../../source/cookbook/parsing.rst:255 097b4a7d186145da9b1ab4756712070b
msgid "An example of an operator table we'll be using for the calculator is:"
msgstr ""

#: ../../source/cookbook/parsing.rst:268 9fab47d3ef76496fa13507254c3a7535
msgid ""
"This table defines 4 operators for mulitiplication, division, addition and "
"subtraction. Mulitiplication and division show up in the first table because"
" they have higher precedence than addition and subtraction, which show up in"
" the second table. We're also defining them as infix operators, with a "
"specific grammar and all being left associative via ``AssocLeft``."
msgstr ""

#: ../../source/cookbook/parsing.rst:274 87f2a83e2df64e118f2865cddcc5576b
msgid "Building a Calculator"
msgstr ""

#: ../../source/cookbook/parsing.rst:276 71fdc0b0cd4a405ebd47db62f9c061a9
msgid "Calculator.idr"
msgstr ""

#: ../../source/cookbook/parsing.rst:388 7f40e8eb00844a4d84a6ec90a903fe53
msgid "Testing out our calculator gives us back the following output:"
msgstr ""
