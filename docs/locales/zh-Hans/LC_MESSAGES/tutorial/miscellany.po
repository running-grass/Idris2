# SOME DESCRIPTIVE TITLE.
# Copyright (C) 2020, The Idris Community
# This file is distributed under the same license as the Idris2 package.
# FIRST AUTHOR <EMAIL@ADDRESS>, YEAR.
# 
#, fuzzy
msgid ""
msgstr ""
"Project-Id-Version: Idris2 0.0\n"
"Report-Msgid-Bugs-To: \n"
"POT-Creation-Date: 2022-07-12 11:10+0800\n"
"PO-Revision-Date: 2022-07-13 15:22+0000\n"
"Language-Team: Chinese Simplified (https://www.transifex.com/idriszhong-wen/teams/140912/zh-Hans/)\n"
"MIME-Version: 1.0\n"
"Content-Type: text/plain; charset=UTF-8\n"
"Content-Transfer-Encoding: 8bit\n"
"Language: zh-Hans\n"
"Plural-Forms: nplurals=1; plural=0;\n"

#: ../../source/tutorial/miscellany.rst:5 97410e26a99b4ca6a0c84f8f871b6208
msgid "Miscellany"
msgstr ""

#: ../../source/tutorial/miscellany.rst:7 73c9d82b04324fd28117f2dd95168f32
msgid "In this section we discuss a variety of additional features:"
msgstr ""

#: ../../source/tutorial/miscellany.rst:9 687653550b4041c68ce67a7a68063603
msgid "auto, implicit, and default arguments;"
msgstr ""

#: ../../source/tutorial/miscellany.rst:10 b776e8b082074bd19e8a582168c82b1d
msgid "literate programming; and"
msgstr ""

#: ../../source/tutorial/miscellany.rst:11 e2e9cb35e51741a5ac3a4a3fad2cb8c6
msgid "the universe hierarchy."
msgstr ""

#: ../../source/tutorial/miscellany.rst:14 2221c06a0d3e4fdf8aeb0f062d2049eb
msgid "Implicit arguments"
msgstr ""

#: ../../source/tutorial/miscellany.rst:16 b65e31c8d446451ba7c87cf4f6ac0623
msgid ""
"We have already seen implicit arguments, which allows arguments to be "
"omitted when they can be inferred by the type checker [#IdrisType]_, e.g."
msgstr ""

#: ../../source/tutorial/miscellany.rst:24 006ead52bd1c4c45a334c4179d455a55
msgid "Auto implicit arguments"
msgstr ""

#: ../../source/tutorial/miscellany.rst:26 0721e78cf012492ba1d2592604dded20
msgid ""
"In other situations, it may be possible to infer arguments not by type "
"checking but by searching the context for an appropriate value, or "
"constructing a proof. For example, the following definition of ``head`` "
"which requires a proof that the list is non-empty:"
msgstr ""

#: ../../source/tutorial/miscellany.rst:40 c08e27b201a3498eb95a950a352b28cb
msgid ""
"If the list is statically known to be non-empty, either because its value is"
" known or because a proof already exists in the context, the proof can be "
"constructed automatically. Auto implicit arguments allow this to happen "
"silently. We define ``head`` as follows:"
msgstr ""

#: ../../source/tutorial/miscellany.rst:50 299a8237bee84aeca44dd7ef13231e0a
msgid ""
"The ``auto`` annotation on the implicit argument means that Idris will "
"attempt to fill in the implicit argument by searching for a value of the "
"appropriate type. In fact, internally, this is exactly how interface "
"resolution works. It will try the following, in order:"
msgstr ""

#: ../../source/tutorial/miscellany.rst:55 e98d9e71a80b44edb71bdd8579b20929
msgid ""
"Local variables, i.e. names bound in pattern matches or ``let`` bindings, "
"with exactly the right type."
msgstr ""

#: ../../source/tutorial/miscellany.rst:57 eb2d55035f4d4dcbb72b0d4992c3ede0
msgid ""
"The constructors of the required type. If they have arguments, it will "
"search recursively up to a maximum depth of 100."
msgstr ""

#: ../../source/tutorial/miscellany.rst:59 82cbec32ae5a4d56bc0adcc5954fdf63
msgid ""
"Local variables with function types, searching recursively for the "
"arguments."
msgstr ""

#: ../../source/tutorial/miscellany.rst:61 1ddfdb4178bb453fbaf7589935f9da9b
msgid ""
"Any function with the appropriate return type which is marked with the "
"``%hint`` annotation."
msgstr ""

#: ../../source/tutorial/miscellany.rst:64 cf47d5de211a4a7fbd7187209f07a583
msgid ""
"In the case that a proof is not found, it can be provided explicitly as "
"normal:"
msgstr ""

#: ../../source/tutorial/miscellany.rst:71 ed226effa3f54a889a5a45c4b370b361
msgid "Default implicit arguments"
msgstr ""

#: ../../source/tutorial/miscellany.rst:73 b0a0d793015844248755819e4724ceed
msgid ""
"Besides having Idris automatically find a value of a given type, sometimes "
"we want to have an implicit argument with a specific default value. In "
"Idris, we can do this using the ``default`` annotation. While this is "
"primarily intended to assist in automatically constructing a proof where "
"auto fails, or finds an unhelpful value, it might be easier to first "
"consider a simpler case, not involving proofs."
msgstr ""

#: ../../source/tutorial/miscellany.rst:79 ebc6603e4d0e498984830a551099e539
msgid ""
"If we want to compute the n'th fibonacci number (and defining the 0th "
"fibonacci number as 0), we could write:"
msgstr ""

#: ../../source/tutorial/miscellany.rst:88 58ea9b8039624652b83c1d7b3483b535
msgid ""
"After this definition, ``fibonacci 5`` is equivalent to ``fibonacci {lag=0} "
"{lead=1} 5``, and will return the 5th fibonacci number. Note that while this"
" works, this is not the intended use of the ``default`` annotation. It is "
"included here for illustrative purposes only. Usually, ``default`` is used "
"to provide things like a custom proof search script."
msgstr ""

#: ../../source/tutorial/miscellany.rst:94 fc403c0ea5764f32bfc261e0323967f1
msgid "Literate programming"
msgstr ""

#: ../../source/tutorial/miscellany.rst:96 cb9199419e8e48b2a06c684834dbdc8b
msgid ""
"Like Haskell, Idris supports *literate* programming. If a file has an "
"extension of ``.lidr`` then it is assumed to be a literate file. In literate"
" programs, everything is assumed to be a comment unless the line begins with"
" a greater than sign ``>``, for example:"
msgstr ""

#: ../../source/tutorial/miscellany.rst:110 184d662a8fb5441fac8fc28a9623c869
msgid ""
"An additional restriction is that there must be a blank line between a "
"program line (beginning with ``>``) and a comment line (beginning with any "
"other character)."
msgstr ""

#: ../../source/tutorial/miscellany.rst:115 2e803ed5811944c5a6fb3f7086a3aa9c
msgid "Cumulativity"
msgstr ""

#: ../../source/tutorial/miscellany.rst:119 589699e2301242dea74c5b58923d2073
msgid "NOT YET IN IDRIS 2"
msgstr ""

#: ../../source/tutorial/miscellany.rst:121 cf2ca7f7b13b4c0f94761180bdd7d113
msgid ""
"Since values can appear in types and *vice versa*, it is natural that types "
"themselves have types. For example:"
msgstr ""

#: ../../source/tutorial/miscellany.rst:131 2d4b328798dc42978c3c8138838c9948
msgid "But what about the type of ``Type``? If we ask Idris it reports:"
msgstr ""

#: ../../source/tutorial/miscellany.rst:138 257da2032c5c4f9688e16b418050cf77
msgid ""
"If ``Type`` were its own type, it would lead to an inconsistency due to "
"`Girard’s paradox "
"<https://www.cs.cmu.edu/afs/cs.cmu.edu/user/kw/www/scans/girard72thesis.pdf>`_,"
" so internally there is a *hierarchy* of types (or *universes*):"
msgstr ""

#: ../../source/tutorial/miscellany.rst:146 f2ba29778a874cef887d56660044449a
msgid ""
"Universes are *cumulative*, that is, if ``x : Type n`` we can also have that"
" ``x : Type m``, as long as ``n < m``. The typechecker generates such "
"universe constraints and reports an error if any inconsistencies are found. "
"Ordinarily, a programmer does not need to worry about this, but it does "
"prevent (contrived) programs such as the following:"
msgstr ""

#: ../../source/tutorial/miscellany.rst:160 97989bb34b414f28892fb7dfa332ddcc
msgid ""
"The application of ``myid`` to itself leads to a cycle in the universe "
"hierarchy — ``myid``\\ ’s first argument is a ``Type``, which cannot be at a"
" lower level than required if it is applied to itself."
msgstr ""

#: ../../source/tutorial/miscellany.rst:164 0b5976f77aa94f21bda33f53f3008439
msgid "https://github.com/david-christiansen/idris-type-providers"
msgstr ""
