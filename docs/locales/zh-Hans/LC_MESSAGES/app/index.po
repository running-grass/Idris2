# SOME DESCRIPTIVE TITLE.
# Copyright (C) 2020, The Idris Community
# This file is distributed under the same license as the Idris2 package.
# FIRST AUTHOR <EMAIL@ADDRESS>, YEAR.
# 
#, fuzzy
msgid ""
msgstr ""
"Project-Id-Version: Idris2 0.0\n"
"Report-Msgid-Bugs-To: \n"
"POT-Creation-Date: 2022-07-12 11:10+0800\n"
"PO-Revision-Date: 2022-07-13 15:22+0000\n"
"Language-Team: Chinese Simplified (https://www.transifex.com/idriszhong-wen/teams/140912/zh-Hans/)\n"
"MIME-Version: 1.0\n"
"Content-Type: text/plain; charset=UTF-8\n"
"Content-Transfer-Encoding: 8bit\n"
"Language: zh-Hans\n"
"Plural-Forms: nplurals=1; plural=0;\n"

#: ../../source/app/index.rst:5 9e4c56c8c08946cdbbd92c46e6b5e3e8
msgid "Structuring Idris 2 Applications"
msgstr ""

#: ../../source/app/index.rst:7 fceb30e9ca4f4cc1abd55a6692c9992a
msgid "A tutorial on structuring Idris 2 applications using ``Control.App``."
msgstr ""

#: ../../source/app/index.rst:11 ae1d663796cb4d399e8ef1bca8e9b791
msgid ""
"The documentation for Idris has been published under the Creative Commons "
"CC0 License. As such to the extent possible under law, *The Idris Community*"
" has waived all copyright and related or neighboring rights to Documentation"
" for Idris."
msgstr ""

#: ../../source/app/index.rst:16 adc376ce3cdc4ef6a87baaaa29666305
msgid ""
"More information concerning the CC0 can be found online at: "
"http://creativecommons.org/publicdomain/zero/1.0/"
msgstr ""

#: ../../source/app/index.rst:21 545d84435c6c4229a5976b486984de31
msgid ""
"Idris applications have ``main : IO ()`` as an entry point.  A type ``IO a``"
" is a description of interactive actions which produce a value of type "
"``a``. This is fine for primitives, but ``IO`` does not support exceptions "
"so we have to be explicit about how an operation handles failure. Also, if "
"we do want to support exceptions, we also want to explain how exceptions and"
" linearity (see Section :ref:`sect-multiplicities`) interact."
msgstr ""

#: ../../source/app/index.rst:28 28a0fd20b6794aa9b0c4eb9cddc704cb
msgid ""
"In this tutorial, we describe a parameterised type ``App`` and a related "
"parameterised type ``App1``, which together allow us to structure larger "
"applications, taking into account both exceptions and linearity. The aims of"
" ``App`` and ``App1`` are that they should:"
msgstr ""

#: ../../source/app/index.rst:33 7ac35f2cff9943068359d5ac149481f5
msgid ""
"make it possible to express what interactions a function does, in its type, "
"without too much notational overhead."
msgstr ""

#: ../../source/app/index.rst:35 a08a8790dadc42eab439b00378c09bfa
msgid "have little or no performance overhead compared to writing in *IO*."
msgstr ""

#: ../../source/app/index.rst:36 2f8c0fa27a7344dca3662b599351d353
msgid ""
"be compatible with other libraries and techniques for describing effects, "
"such as algebraic effects or monad transformers."
msgstr ""

#: ../../source/app/index.rst:38 420f3c3b7b7d47feb7b2b6cf68825430
msgid ""
"be sufficiently easy to use and performant that it can be the basis of *all*"
" libraries that make foreign function calls, much as *IO* is in Idris 1 and "
"Haskell"
msgstr ""

#: ../../source/app/index.rst:41 68cde26a719b4cc3ac8ad28ea48c5359
msgid ""
"be compatible with linear types, meaning that they should express whether a "
"section of code is linear (guaranteed to execute exactly once without "
"throwing an exception) or whether it might throw an exception."
msgstr ""

#: ../../source/app/index.rst:45 068545c4f9164efc874d0614e13474ca
msgid ""
"We begin by introducing ``App``, with some small example programs, then show"
" how to extend it with exceptions, state, and other interfaces."
msgstr ""
