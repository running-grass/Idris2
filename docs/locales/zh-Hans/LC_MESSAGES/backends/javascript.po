# SOME DESCRIPTIVE TITLE.
# Copyright (C) 2020, The Idris Community
# This file is distributed under the same license as the Idris2 package.
# FIRST AUTHOR <EMAIL@ADDRESS>, YEAR.
# 
#, fuzzy
msgid ""
msgstr ""
"Project-Id-Version: Idris2 0.0\n"
"Report-Msgid-Bugs-To: \n"
"POT-Creation-Date: 2022-07-12 11:10+0800\n"
"PO-Revision-Date: 2022-07-13 15:23+0000\n"
"Language-Team: Chinese Simplified (https://www.transifex.com/idriszhong-wen/teams/140912/zh-Hans/)\n"
"MIME-Version: 1.0\n"
"Content-Type: text/plain; charset=UTF-8\n"
"Content-Transfer-Encoding: 8bit\n"
"Language: zh-Hans\n"
"Plural-Forms: nplurals=1; plural=0;\n"

#: ../../source/backends/javascript.rst:3 ce954af6f7ed474490fb9a75771fe7c3
msgid "Javascript and Node Code Generators"
msgstr ""

#: ../../source/backends/javascript.rst:5 3bb72ccfd0404601b45ba46f0e852557
msgid ""
"There are two javascript code generators, ``node`` and ``javascript``. There"
" are two differences between the two: the ``javascript`` code generator when"
" called to output an HTML file will also generate a basic HTML document with"
" the generated code inside a ``<script>`` tag; the other distinction is on "
"the ffi that will be explained below."
msgstr ""

#: ../../source/backends/javascript.rst:13 90f10dbc0e674cf48b7270ccfb9f17bf
msgid "Javascript FFI Specifiers"
msgstr ""

#: ../../source/backends/javascript.rst:15 b9dfdb2122f64841b572eb0844da94ce
msgid ""
"There are three main kinds of javascript ffi specifiers ``javascript``, "
"``node`` and ``browser``. ``javascript`` is for foreigns that are available "
"on node and the browser, ``node`` for foreigns that are only available on "
"node and ``browser`` for browser only foreigns."
msgstr ""

#: ../../source/backends/javascript.rst:20 a9df4a09ad844f61a65de2b1e4dbcee1
msgid "For ``node`` there are two ways of defining a foreign:"
msgstr ""

#: ../../source/backends/javascript.rst:27 809ec3a9366d44328cde3028f253389a
msgid ""
"here ``lambda`` means that we are providing the definition as a lambda "
"expression."
msgstr ""

#: ../../source/backends/javascript.rst:36 6072c30af3f64126b572e75b5ea3ea17
msgid "``require`` can be used to import javascript modules."
msgstr ""

#: ../../source/backends/javascript.rst:38 63d35f9775a84eff825dc5531e476391
msgid ""
"For completion below an example of a foreign available only with ``browser``"
" codegen:"
msgstr ""

#: ../../source/backends/javascript.rst:47 e47adccf94b6471fa5dee94eb73232a5
msgid "Short Example"
msgstr ""

#: ../../source/backends/javascript.rst:49 07f1bfc18d1448839b7f75db87e0f473
msgid ""
"An interesting example is creating a foreign for the setTimeout function:"
msgstr ""

#: ../../source/backends/javascript.rst:59 a791bbf1df824dcfbd1563b3f499e15c
msgid ""
"Note: Previous versions of the javascript backends treated ``Int`` as a 64 "
"bit signed integer represented by ``BigInt`` in javascript land. This is no "
"longer the case: ``Int`` is now treated as a 32 bit signed integer "
"represented by ``Number``. This should facilitate interop between Idris2 and"
" the backend."
msgstr ""

#: ../../source/backends/javascript.rst:64 d1624f46c634479185ecba372aafd059
msgid ""
"However, unless you have good reasons to do otherwise, consider using one of"
" the other fixed precision integral types. They are supposed to behave the "
"same across all backends. All signed and unsigned integrals of up to 32 bit "
"precision (``Int8``, ``Int16``, ``Int32``, ``Bits8``, ``Bits16``, and "
"``Bits32``) are represented by ``Number`` while ``Int64``, ``Bits64``, and "
"``Integer`` are represented by ``BigInt``. The example above could therefore"
" be improved by using ``Int32`` instad of ``Int``:"
msgstr ""

#: ../../source/backends/javascript.rst:81 00d47b0d56f84f16ba2d0917c82023f6
msgid "Browser Example"
msgstr ""

#: ../../source/backends/javascript.rst:83 0238794fae7348e1b9a918bf802e6d33
msgid ""
"To build JavaScript aimed to use in the browser, the code must be compiled "
"with the javascript codegen option. The compiler produces a JavaScript or an"
" HTML file. The browser needs an HTML file to load. This HTML file can be "
"created in two ways"
msgstr ""

#: ../../source/backends/javascript.rst:87 ed5f8472f749458d8f66b0636f8771ed
msgid ""
"If the ``.html`` suffix is given to the output file the compiler generates "
"an HTML file which includes a wrapping around the generated JavaScript."
msgstr ""

#: ../../source/backends/javascript.rst:89 6c28d9455b0248ff8a90967c155d0cd8
msgid ""
"If *no* ``.html`` suffix is given, the generated file only contains the "
"JavaScript code. In this case manual wrapping is needed."
msgstr ""

#: ../../source/backends/javascript.rst:92 dc691213083a40199d0e0444cb7a99d8
msgid "Example of the wrapper HTML:"
msgstr ""

#: ../../source/backends/javascript.rst:105 46e017f0f65a47a4b2b5dcefca0738e7
msgid ""
"As our intention is to develop something that runs in the browser questions "
"naturally arise:"
msgstr ""

#: ../../source/backends/javascript.rst:107 01afd85f07484b15b5c379679df50d23
msgid "How to interact with HTML elements?"
msgstr ""

#: ../../source/backends/javascript.rst:108 c194223e9fa742fc980e88cdd6320d5f
msgid "More importantly, when does the generated Idris code start?"
msgstr ""

#: ../../source/backends/javascript.rst:111 29455ddc9aaf4f94bbc7faf949c6fc77
msgid "Starting point of the Idris generated code"
msgstr ""

#: ../../source/backends/javascript.rst:113 41b45494a8eb4be6b4aaa4a40fbe1aa0
msgid ""
"The generated JavaScript for your program contains an entry point. The "
"``main`` function is compiled to a JavaScript top-level expression, which "
"will be evaluated during the loading of the ``script`` tag and that is the "
"entry point for Idris generated program starting in the browser."
msgstr ""

#: ../../source/backends/javascript.rst:118 de69beec7058408da8736c051ae56ceb
msgid "Interaction with HTML elements"
msgstr ""

#: ../../source/backends/javascript.rst:120 5bf1abe05e434eab91f185c667bff5b8
msgid ""
"As sketched in the Short Example section, the FFI must be used when "
"interaction happens between Idris generated code and the rest of the "
"Browser/JS ecosystem. Information handled by the FFI is separated into two "
"categories. Primitive types in Idris FFI, such as Int, and everything else. "
"The everything else part is accessed via AnyPtr. The ``%foreign`` "
"construction should be used to give implementation on the JavaScript side. "
"And an Idris function declaration  to give ``Type`` declaration on the Idris"
" side. The syntax is ``%foreign \"browser:lambda:js-lambda-expression\"`` . "
"On the Idris side, primitive types and ``PrimIO t`` types should be used as "
"parameters, when defining ``%foreign``. This declaration is a helper "
"function which needs to be called behind the ``primIO`` function. More on "
"this can be found in the FFI chapter."
msgstr ""

#: ../../source/backends/javascript.rst:131 55e295d1511d4608ae645347fb9e16b7
msgid "Examples for JavaScript FFI"
msgstr ""

#: ../../source/backends/javascript.rst:134 93b0b11f385d4d5d9aebfd2197991b5d
msgid "console.log"
msgstr ""

#: ../../source/backends/javascript.rst:144 2992fcf397634ac3a43d0de83a1e6005
msgid ""
"String is a primitive type in Idris and it is represented as a JavaScript "
"String. There is no need for any conversion between the Idris and the "
"JavaScript."
msgstr ""

#: ../../source/backends/javascript.rst:148 f95a26050d8f4866a2b565e91dbafd0f
msgid "setInterval"
msgstr ""

#: ../../source/backends/javascript.rst:158 c351da01d8b14cce81583f808c241644
msgid ""
"The ``setInterval`` JavaScript function executes the given function in every"
" ``x`` millisecond. We can use Idris generated functions in the callback as "
"far as they have the type ``IO ()`` ."
msgstr ""

#: ../../source/backends/javascript.rst:162 2f978c9361dc4d02884f50cae8690655
msgid "HTML Dom elements"
msgstr ""

#: ../../source/backends/javascript.rst:164 05deb40b8d9d4dc594eec5ad8b14d3ce
msgid ""
"Lets turn our attention to the Dom elements and events. As said above, "
"anything that is not a primitive type should be handled via the ``AnyPtr`` "
"type in the FFI. Anything complex that is returned by a JavaScript function "
"should be captured in an ``AnyPtr`` value. It is advisory to separate the "
"``AnyPtr`` values into categories."
msgstr ""

#: ../../source/backends/javascript.rst:179 13065caa717c44a9addafee8e16b2d26
msgid ""
"We create a ``DomNode`` type which holds an ``AnyPtr``. The ``prim__body`` "
"function wraps a lambda function with no parameters. In the Idris function "
"``body`` we pass an extra ``()`` parameter and the we wrap the result in the"
" ``DomNode`` type using the ``MkNode`` data constructor."
msgstr ""

#: ../../source/backends/javascript.rst:184 9ab25c2e03334929bfb280a4d7c5b512
msgid "Primitive values originated in JavaScript"
msgstr ""

#: ../../source/backends/javascript.rst:186 d854c254a37d4a57afbaa0d96cd1076d
msgid ""
"As a countinuation of the previous example, the ``width`` attribute of a DOM"
" element can be retrieved via the FFI."
msgstr ""

#: ../../source/backends/javascript.rst:198 16e35ecae8904ca18ed7630d5d8cb9f7
msgid "Handling JavaScript events"
msgstr ""

#: ../../source/backends/javascript.rst:212 12d0d9963a9a468aaf4ce39461f48fb9
msgid ""
"In this example shows how to attach an event handler to a particular DOM "
"element. Values of events are also associated with ``AnyPtr`` on the Idris "
"side. To seperate ``DomNode`` form ``DomEvent`` we create two different "
"types. Also it demonstrates how a simple callback function defined in Idris "
"can be used on the JavaScript side."
msgstr ""

#: ../../source/backends/javascript.rst:218 21720dea12834da3a9800aa94e7a5231
msgid "Directives"
msgstr ""

#: ../../source/backends/javascript.rst:220 d23eb03a3d2d454b8dea32823fca450b
msgid ""
"The javascript code generators accepts three different directives about how "
"compact and obfusacted the generated code should be. The following examples "
"show the code generated for the ``putStr`` function from the prelude for "
"each of the three directives. (``--cg node`` is used in the examples below, "
"but the behavior is the same when generating code to be run in browsers with"
" ``--cg javascript``)."
msgstr ""

#: ../../source/backends/javascript.rst:227 1458d545de8f46099bda73fc1af31298
msgid ""
"With ``idris2 --cg node --directive pretty`` (the default, if no directive "
"is given), a basic pretty printer is used to generate properly indented "
"javascript code."
msgstr ""

#: ../../source/backends/javascript.rst:237 ac38a92d6cd4485f8725fef2110f2482
msgid ""
"With ``idris2 --cg node --directive compact``, every toplevel function is "
"declared on a single line, and unneeded spaces are removed:"
msgstr ""

#: ../../source/backends/javascript.rst:244 01908fecfc544862a6d8e08e9a7921b5
msgid ""
"Finally, with ``idris2 --cg node --directive minimal``, toplevel function "
"names are (with a few exceptions like the ones from the static preamble) "
"obfuscated to reduce the size of the generated javascript file:"
msgstr ""
