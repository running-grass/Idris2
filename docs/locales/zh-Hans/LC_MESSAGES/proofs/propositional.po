# SOME DESCRIPTIVE TITLE.
# Copyright (C) 2020, The Idris Community
# This file is distributed under the same license as the Idris2 package.
# FIRST AUTHOR <EMAIL@ADDRESS>, YEAR.
# 
#, fuzzy
msgid ""
msgstr ""
"Project-Id-Version: Idris2 0.0\n"
"Report-Msgid-Bugs-To: \n"
"POT-Creation-Date: 2022-07-12 11:10+0800\n"
"PO-Revision-Date: 2022-07-13 15:23+0000\n"
"Language-Team: Chinese Simplified (https://www.transifex.com/idriszhong-wen/teams/140912/zh-Hans/)\n"
"MIME-Version: 1.0\n"
"Content-Type: text/plain; charset=UTF-8\n"
"Content-Transfer-Encoding: 8bit\n"
"Language: zh-Hans\n"
"Plural-Forms: nplurals=1; plural=0;\n"

#: ../../source/proofs/propositional.rst:1 8ef55db1664a469bbbe6b0c133f89b29
msgid ""
"This page attempts to explain some of the techniques used in Idris to prove "
"propositional equalities."
msgstr ""

#: ../../source/proofs/propositional.rst:5 3f9153cb60264a87b21a9fd3afc23f23
msgid "Proving Propositional Equality"
msgstr ""

#: ../../source/proofs/propositional.rst:7 9431e3a8daae4a20b19ead197f4bbe6b
msgid ""
"We have seen that definitional equalities can be proved using ``Refl`` since"
" they always normalise to values that can be compared directly."
msgstr ""

#: ../../source/proofs/propositional.rst:10 12fd0d12f9a746018221e2a8d8e72e18
msgid ""
"However with propositional equalities we are using symbolic variables, which"
" do not always normalise."
msgstr ""

#: ../../source/proofs/propositional.rst:13 88c8eaa9cbde4aad81183de76eabbedf
msgid "So to take the previous example:"
msgstr ""

#: ../../source/proofs/propositional.rst:19 0066fae9d18b40ab8bbb55cd43aeaa73
msgid ""
"In this case ``plus n Z`` does not normalise to n. Even though both sides of"
" the equality are provably equal we cannot claim ``Refl`` as a proof."
msgstr ""

#: ../../source/proofs/propositional.rst:22 2cd0db3895f447cba7acdbcb0d3a73a1
msgid ""
"If the pattern match cannot match for all ``n`` then we need to match all "
"possible values of ``n``. In this case"
msgstr ""

#: ../../source/proofs/propositional.rst:33 5b43dc10575249059d6c016e1f986c64
msgid ""
"we can't use ``Refl`` to prove ``plus n 0 = n`` for all ``n``. Instead, we "
"call it for each case separately.  So, in the second line for example, the "
"type checker substitutes ``Z`` for ``n`` in the type being matched, and "
"reduces the type accordingly."
msgstr ""

#: ../../source/proofs/propositional.rst:39 519798496cc6483fa297e7d891fe4aca
msgid "Replace"
msgstr ""

#: ../../source/proofs/propositional.rst:41 82d62a4012e541e0996a4e42807ebc63
msgid ""
"This implements the 'indiscernability of identicals' principle, if two terms"
" are equal then they have the same properties. In other words, if ``x=y``, "
"then we can substitute y for x in any expression. In our proofs we can "
"express this as:"
msgstr ""

#: ../../source/proofs/propositional.rst:45 8e3ab8e998d84af2b48a9831249a17b5
msgid "if x=y then prop x = prop y"
msgstr ""

#: ../../source/proofs/propositional.rst:48 ec82019c8ac64a229ea8932dc609be94
msgid ""
"where prop is a pure function representing the property. In the examples "
"below prop is an expression in some variable with a type like this: ``prop: "
"n -> Type``"
msgstr ""

#: ../../source/proofs/propositional.rst:51 10a6cae3afbf44988bf827fecb0b0f91
msgid ""
"So if ``n`` is a natural number variable then ``prop`` could be something "
"like ``\\n => 2*n + 3``."
msgstr ""

#: ../../source/proofs/propositional.rst:54 fd15be33b6cb4b209cc477ca15896833
msgid ""
"To use this in our proofs there is the following function in the prelude:"
msgstr ""

#: ../../source/proofs/propositional.rst:62 a61b16bea4e54ceb9b96d460ed8e866a
msgid ""
"If we supply an equality (x=y) and a proof of a property of x (``prop x``) "
"then we get a proof of a property of y (``prop y``). So, in the following "
"example, if we supply ``p1 x`` which is a proof that ``x=2`` and the "
"equality ``x=y`` then we get a proof that ``y=2``."
msgstr ""

#: ../../source/proofs/propositional.rst:76 f5ae783f006e4c24bd30a4a78d8031f8
msgid "Rewrite"
msgstr ""

#: ../../source/proofs/propositional.rst:78 82ece7e072004f9b9aceb29d3c4a777b
msgid ""
"In practice, ``replace`` can be a little tricky to use because in general "
"the implicit argument ``prop`` can be hard to infer for the machine, so "
"Idris provides a high level syntax which calculates the property and applies"
" ``replace``."
msgstr ""

#: ../../source/proofs/propositional.rst:83 574fb9eb687540559f18f741b1a4068c
msgid ""
"Example: again we supply ``p1 x`` which is a proof that ``x=2`` and the "
"equality ``y=x`` then we get a proof that ``y=2``."
msgstr ""

#: ../../source/proofs/propositional.rst:94 c04e8d1938cd45a1a797d9d479e02037
msgid "We can think of ``rewrite`` as working in this way:"
msgstr ""

#: ../../source/proofs/propositional.rst:96 0a352d97ad0d4e3985dcd1c08d08561f
msgid "Start with a equation ``x=y`` and a property ``prop : x -> Type``"
msgstr ""

#: ../../source/proofs/propositional.rst:97 f373e7653cab47a19f098568dca4b05f
msgid "Search for ``x`` in ``prop``"
msgstr ""

#: ../../source/proofs/propositional.rst:98 2d70f4d4dda747298af464c331593fcd
msgid "Replaces all occurrences of ``x`` with ``y`` in ``prop``."
msgstr ""

#: ../../source/proofs/propositional.rst:100 57b1afcc556f4a8c8f9672065517bd16
msgid "That is, we are doing a substitution."
msgstr ""

#: ../../source/proofs/propositional.rst:102 981c19bafa0d432d970bcbc3034be990
msgid ""
"Notice that here we need to supply reverse equality, i.e. ``y=x`` instead of"
" ``x=y``. This is because ``rewrite`` performs the substitution of left part"
" of equality to the right part and this substitution is done in the *return "
"type*. Thus, here in the return type ``y=2`` we need to apply ``y=x`` in "
"order to match the type of the argument ``x=2``."
msgstr ""

#: ../../source/proofs/propositional.rst:108 d9674a95c86b4ac4bff031fd4243897d
msgid "Symmetry and Transitivity"
msgstr ""

#: ../../source/proofs/propositional.rst:110 3e546048739e42aa94c3401ab4497541
msgid ""
"In addition to 'reflexivity' equality also obeys 'symmetry' and "
"'transitivity' and these are also included in the prelude:"
msgstr ""

#: ../../source/proofs/propositional.rst:124 606782093cb24f359efcc9d791a1316b
msgid "Heterogeneous Equality"
msgstr ""

#: ../../source/proofs/propositional.rst:126 1d3ebb15dc944534bb2d0756b26363ba
msgid "Also included in the prelude:"
msgstr ""
